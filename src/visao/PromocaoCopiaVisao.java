/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package visao;

import controlador.exceptions.NonexistentEntityException;
import dao.PrecoDao;
import dao.ProdutoDao;
import dao.PromocaoDao;
import dao.UsuarioDao;
import entity.TbPreco;
import entity.TbProduto;
import entity.Promocao;
import java.awt.Frame;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import util.BDConexao;
import util.DVML;
import util.JPAEntityMannagerFactoryUtil;
import util.MetodosUtil;
import static visao.DefinirPrecosPercentagemVisao.tabela_categoria;

/**
 *
 * @author Domingos Dala Vunge
 */
public class PromocaoCopiaVisao extends javax.swing.JDialog
{

    private Frame parent;
    private EntityManagerFactory emf = JPAEntityMannagerFactoryUtil.em;
    private ProdutoDao produtoDao = new ProdutoDao( emf );
    private PrecoDao precoDao = new PrecoDao( emf );
    private UsuarioDao usuarioDao = new UsuarioDao( emf );
    private PromocaoDao promocaoDao = new PromocaoDao( emf );
    private Promocao promocao;
    private int id_user = 0;
    private List<TbPreco> list_preco_retalho = new ArrayList<>();
    private List<TbPreco> list_preco_grosso = new ArrayList<>();
    private Vector<TbPreco> vector_preco;
    private Vector<Vector<TbPreco>> vector = new Vector<>();
    private double percentagem = 0;
    private boolean sucesso = true;
    private int TAMANHO = 0;
    private BDConexao conexao;

    public PromocaoCopiaVisao( java.awt.Frame parent, boolean modal, int id_user )
    {

        super( parent, modal );
        this.parent = parent;
        initComponents();
        setLocationRelativeTo( null );

        this.id_user = id_user;
        procedimento_enable_buttons();
        btn_update.setVisible( false );
        //adicionar_tabela();
        adicionar();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbTipoProduto = new javax.swing.JLabel();
        txt_percentagem = new javax.swing.JTextField();
        btn_update = new javax.swing.JButton();
        btn_activar = new javax.swing.JButton();
        btn_desactivar = new javax.swing.JButton();
        jp_progress = new util.CustomPanel();
        lb_status = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("...::::: DVML-DEFINIR PREÇOS POR PERCENTAGEM::::...");
        setIconImage(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PROMOÇÃO", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 36), new java.awt.Color(51, 153, 0))); // NOI18N
        jPanel1.setFont(new java.awt.Font("Showcard Gothic", 0, 24)); // NOI18N

        lbTipoProduto.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 16)); // NOI18N
        lbTipoProduto.setText("Percentagem:");

        txt_percentagem.setBackground(new java.awt.Color(51, 153, 0));
        txt_percentagem.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        txt_percentagem.setForeground(new java.awt.Color(255, 255, 255));
        txt_percentagem.setCaretColor(new java.awt.Color(255, 255, 255));
        txt_percentagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_percentagemActionPerformed(evt);
            }
        });

        btn_update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/actualizar_1_32x32.png"))); // NOI18N
        btn_update.setText("Update");
        btn_update.setAlignmentX(0.5F);
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_activar.setText("Activar");
        btn_activar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_activarActionPerformed(evt);
            }
        });

        btn_desactivar.setText("Desactivar");
        btn_desactivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_desactivarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jp_progressLayout = new javax.swing.GroupLayout(jp_progress);
        jp_progress.setLayout(jp_progressLayout);
        jp_progressLayout.setHorizontalGroup(
            jp_progressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );
        jp_progressLayout.setVerticalGroup(
            jp_progressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 166, Short.MAX_VALUE)
        );

        lb_status.setBackground(new java.awt.Color(204, 0, 0));
        lb_status.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lb_status.setForeground(new java.awt.Color(204, 0, 0));
        lb_status.setText(".");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbTipoProduto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_percentagem))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_activar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_desactivar)
                        .addGap(18, 18, 18)
                        .addComponent(btn_update)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lb_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jp_progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbTipoProduto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btn_desactivar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_activar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_percentagem, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                    .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lb_status)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jp_progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        tabela.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod", "Designação", "P.Compra", "P.Venda Retalho", "P.Venda Grosso"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabela);
        if (tabela.getColumnModel().getColumnCount() > 0) {
            tabela.getColumnModel().getColumn(0).setMaxWidth(50);
            tabela.getColumnModel().getColumn(1).setMaxWidth(800);
            tabela.getColumnModel().getColumn(2).setMaxWidth(300);
            tabela.getColumnModel().getColumn(3).setMaxWidth(300);
            tabela.getColumnModel().getColumn(4).setMaxWidth(300);
        }

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/SAIR/sair_verde_32x32.png"))); // NOI18N
        jButton1.setText("Sair");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed

        procedimento_actualizar();


    }//GEN-LAST:event_btn_updateActionPerformed

    private void tabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMouseClicked
        // TODO add your handling code here:

        if ( evt.getClickCount() >= 1 )
        {

        }


    }//GEN-LAST:event_tabelaMouseClicked

    private void txt_percentagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_percentagemActionPerformed
        // TODO add your handling code here:
        procedimento_actualizar();
    }//GEN-LAST:event_txt_percentagemActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btn_activarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_activarActionPerformed
        // TODO add your handling code here:
        procedimento_activar();
    }//GEN-LAST:event_btn_activarActionPerformed

    private void btn_desactivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_desactivarActionPerformed
        // TODO add your handling code here:
        procedimento_desactivar();
    }//GEN-LAST:event_btn_desactivarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main( String args[] )
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for ( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels() )
            {
                if ( "Windows".equals( info.getName() ) )
                {
                    javax.swing.UIManager.setLookAndFeel( info.getClassName() );
                    break;
                }
            }
        }
        catch ( ClassNotFoundException ex )
        {
            java.util.logging.Logger.getLogger( PromocaoCopiaVisao.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        catch ( InstantiationException ex )
        {
            java.util.logging.Logger.getLogger( PromocaoCopiaVisao.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        catch ( IllegalAccessException ex )
        {
            java.util.logging.Logger.getLogger( PromocaoCopiaVisao.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        catch ( javax.swing.UnsupportedLookAndFeelException ex )
        {
            java.util.logging.Logger.getLogger( PromocaoCopiaVisao.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater( new Runnable()
        {
            public void run()
            {
                PromocaoCopiaVisao dialog = new PromocaoCopiaVisao( new javax.swing.JFrame(), true, 15 );
                dialog.addWindowListener( new java.awt.event.WindowAdapter()
                {
                    @Override
                    public void windowClosing( java.awt.event.WindowEvent e )
                    {
                        System.exit( 0 );
                    }
                } );
                dialog.setVisible( true );
            }
        } );
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_activar;
    private javax.swing.JButton btn_desactivar;
    private javax.swing.JButton btn_update;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private util.CustomPanel jp_progress;
    private javax.swing.JLabel lbTipoProduto;
    private javax.swing.JLabel lb_status;
    private javax.swing.JTable tabela;
    private javax.swing.JTextField txt_percentagem;
    // End of variables declaration//GEN-END:variables

    private void adicionar_tabela()
    {

        List<TbProduto> list = produtoDao.getAll();
        TbPreco preco_retalho = new TbPreco();
        TbPreco preco_grosso = new TbPreco();
        int cod_preco_retalho = 0, qtd_baixo = 0;

        DefaultTableModel modelo_retalho = (DefaultTableModel) tabela.getModel();
        modelo_retalho.setRowCount( 0 );

        this.list_preco_retalho.clear();
        this.list_preco_grosso.clear();

        //  for (int i = 0; i < list.size(); i++) {
        for ( int i = 0; i < 100; i++ )
        {

            TbProduto produto = list.get( i );

            try
            {
                /*Busca preço do grosso e lhe retira a qtd_baixa e busca o preco retalho*/
                preco_grosso = precoDao.getLastPrecoByIdProduto( produto.getCodigo() );
            }
            catch ( Exception e )
            {
            }

            try
            {
                cod_preco_retalho = precoDao.getUltimoIdPrecoByIdProduto( produto.getCodigo(), preco_grosso.getQtdBaixo() - 1 );
                preco_retalho = precoDao.findTbPreco( cod_preco_retalho );
            }
            catch ( Exception e )
            {
            }

            //caso retalho
            modelo_retalho.addRow(
                    new Object[]
                    {
                        produto.getCodigo(),
                        produto.getDesignacao(),
                        preco_retalho.getPrecoCompra(),
                        preco_retalho.getPrecoVenda(),
                        preco_grosso.getPrecoVenda()
                    }
            );

            this.vector_preco = new Vector<>();
            this.vector_preco.add( preco_retalho );
            this.vector_preco.add( preco_grosso );
            this.vector.add( vector_preco );
//              this.list_preco_retalho.add(preco_retalho);
//              this.list_preco_grosso.add(preco_grosso);

        }

    }

    public void limpar()
    {
        txt_percentagem.setText( "" );
    }

    private void procedimento_activar()
    {

        int opcao = JOptionPane.showConfirmDialog( null, "Atenção!...\nEsta operação será aplicada à todos os produtos.\nDeseja Continuar?" );

        if ( opcao == JOptionPane.YES_OPTION )
        {

            if ( campo_valido_retalho() )
            {

                this.promocao = new Promocao();
                this.percentagem = Double.parseDouble( txt_percentagem.getText() ) / 100;
                preparar_promocao( false, percentagem );

                try
                {
                    promocaoDao.create( this.promocao );
                    //activar_promocao();
                }
                catch ( Exception e )
                {
                    distruir();
                    //promocaoDao.getEntityManager().getTransaction().rollback();
                    e.printStackTrace();
                    JOptionPane.showMessageDialog( null, "Falha ao activar a promoção", "FALHA", JOptionPane.ERROR_MESSAGE );
                }

            }
        }

    }

    private void procedimento_desactivar()
    {

        int opcao = JOptionPane.showConfirmDialog( null, "Atenção!...\nEsta operação será aplicada à todos os produtos.\nDeseja Continuar?" );

        if ( opcao == JOptionPane.YES_OPTION )
        {

            if ( campo_valido_retalho() )
            {

                try
                {
                    percentagem = Double.parseDouble( txt_percentagem.getText() ) / 100;
                    desactivar_promocao();

                }
                catch ( Exception e )
                {
                    distruir();
                    //promocaoDao.getEntityManager().getTransaction().rollback();
                    e.printStackTrace();
                    JOptionPane.showMessageDialog( null, "Falha ao activar a promoção", "FALHA", JOptionPane.ERROR_MESSAGE );
                }

            }
        }

    }

    private void distruir()
    {
        try
        {
            promocaoDao.destroy( promocaoDao.getUltimoIdPromocao( true ) );
        }
        catch ( Exception e )
        {
        }
    }

    private void preparar_promocao( boolean retalho_grosso, Double percentagem )
    {
        this.promocao.setData( new Date() );
        this.promocao.setHora( new Date() );
        this.promocao.setPercentagem( percentagem );
        this.promocao.setRetalhoGroso( retalho_grosso );
        this.promocao.setFkUsuario( usuarioDao.findTbUsuario( this.id_user ) );

    }

    private boolean campo_valido_retalho()
    {
        if ( txt_percentagem.getText().equals( "" ) )
        {
            JOptionPane.showMessageDialog( null,
                    "Caro usuário, insira a percentagem a promover",
                    "AVISO",
                    JOptionPane.WARNING_MESSAGE );
            txt_percentagem.requestFocus();
            return false;
        }
        return true;
    }

    private boolean actualizar_preco( TbPreco preco, double percentagem )
    {

        double pc, pv, pg;
        /*CASO RETALHO*/
        pc = preco.getPrecoCompra().doubleValue();
        pv = ( preco.getPrecoVenda().doubleValue() - ( preco.getPrecoVenda().doubleValue() * percentagem ) );
        try
        {
            pg = ( ( ( pv - pc ) * 100 ) / pc );
        }
        catch ( Exception e )
        {
            pg = 0;
        }
        preco.setPrecoVenda( new BigDecimal( pv ) );
        // preco.setPercentagemGanho(pg);

        try
        {
            MetodosUtil.salvar_preco( preco, id_user, conexao );
            return true;
        }
        catch ( Exception e )
        {
            distroi_preco( preco );
            return false;
        }
    }

    private void distroi_preco( TbPreco preco )
    {
        try
        {
            precoDao.destroy( preco.getPkPreco() );
        }
        catch ( Exception e )
        {
        }
    }

    private void procedimento_enable_buttons()
    {

        try
        {

            int id_promocao = promocaoDao.getUltimoIdPromocao();

            System.out.println( "ULTIMA PROMOÇÃO: " + id_promocao );
            this.promocao = promocaoDao.findPromocao( id_promocao );
            txt_percentagem.setText( String.valueOf( this.promocao.getPercentagem() * 100 ) );
            if ( this.promocao.getRetalhoGroso() == false )
            {

                this.percentagem = ( this.promocao.getPercentagem() * 100 );
                txt_percentagem.setText( String.valueOf( this.percentagem ) );
                txt_percentagem.setEditable( false );
                btn_activar.setEnabled( false );
                btn_desactivar.setEnabled( true );
                btn_update.setEnabled( false );

            }
            else
            {
                txt_percentagem.setEditable( true );
                btn_activar.setEnabled( true );
                btn_desactivar.setEnabled( false );
                btn_update.setEnabled( true );
            }

        }
        catch ( Exception e )
        {
            txt_percentagem.setEditable( true );
            btn_activar.setEnabled( true );
            btn_desactivar.setEnabled( false );
            btn_update.setEnabled( false );
        }

    }

    private void adicionar()
    {

        DefaultTableModel modelo = (DefaultTableModel) tabela.getModel();
        List<TbProduto> list = produtoDao.getAll();
        TbPreco preco_grosso;
        TbPreco preco_retalho;
        int cod_preco = 0;
        Vector<TbPreco> vector_precos;
        modelo.setRowCount( 0 );
        this.TAMANHO = list.size();
        this.vector.clear();

        for ( int i = 0; i < this.TAMANHO; i++ )
        {

            TbProduto produto = list.get( i );

            try
            {
                //ultimo preço é sempre o do grosso
                preco_grosso = precoDao.getLastPrecoByIdProduto( produto.getCodigo() );
                cod_preco = precoDao.getUltimoIdPrecoByIdProduto( produto.getCodigo(), preco_grosso.getQtdBaixo() - 1 );
                preco_retalho = precoDao.findTbPreco( cod_preco );
            }
            catch ( Exception e )
            {

                preco_grosso = new TbPreco();
                preco_grosso.setData( new Date() );
                preco_grosso.setHora( new Date() );
                preco_grosso.setFkProduto( produto );
                preco_grosso.setFkUsuario( usuarioDao.findTbUsuario( this.id_user ) );
                preco_grosso.setPrecoCompra( new BigDecimal( "0" ) );
                preco_grosso.setPrecoVenda( new BigDecimal( "0" ) );
                preco_grosso.setQtdBaixo( 50 );
                preco_grosso.setQtdAlto( DVML.GROSSO );

                preco_retalho = new TbPreco();
                preco_retalho.setData( new Date() );
                preco_retalho.setHora( new Date() );
                preco_retalho.setFkProduto( produto );
                preco_retalho.setFkUsuario( usuarioDao.findTbUsuario( this.id_user ) );
                preco_retalho.setPrecoCompra( new BigDecimal( "0" ) );
                preco_retalho.setPrecoVenda( new BigDecimal( "0" ) );
                preco_retalho.setQtdBaixo( 1 );
                preco_retalho.setQtdAlto( 49 );

            }

            modelo.addRow( new Object[]
            {
                produto.getCodigo(),
                produto.getDesignacao(),
                //getValor(preco_grosso.getPrecoCompra()), 
                MetodosUtil.retirar_dizimas( preco_grosso.getPrecoCompra().doubleValue() ),
                //retalho
                // getValor(preco_retalho.getPrecoVenda()),
                MetodosUtil.retirar_dizimas( preco_retalho.getPrecoVenda().doubleValue() ),
                //grosso
                //getValor(preco_grosso.getPrecoVenda()),
                MetodosUtil.retirar_dizimas( preco_grosso.getPrecoVenda().doubleValue() )

            }
            );

            vector_precos = new Vector<>();
            vector_precos.add( preco_retalho );
            vector_precos.add( preco_grosso );

            vector.add( vector_precos );

        }

    }

    private void activar_promocao()
    {

        new Thread( new Runnable()
        {

            @Override
            public void run()
            {

                double preco_venda = 0, preco_compra, preco_anterior, valor, percentagem;
                float x = 0;
                boolean sucesso = true;
                TbPreco preco_retalho, preco_grosso;
                int id_produto = 0;

                percentagem = Double.parseDouble( txt_percentagem.getText() );
                percentagem = ( percentagem / 100 );
                btn_activar.setEnabled( false );
                lb_status.setText( "A activar a promoção!..." );
                TAMANHO = vector.size();
                //desactiva o botão
                btn_update.setEnabled( false );
                //Abri a conexão
                conexao = new BDConexao();
                //for (int i = 0; i < vector.size(); i++) {
                for ( int i = 0; i < TAMANHO; i++ )
                {

                    x = ( ( i + 1 ) * 100 );
                    x = ( x / TAMANHO );

                    id_produto = vector.get( i ).get( 0 ).getFkProduto().getCodigo();

                    preco_compra = vector.get( i ).get( 0 ).getPrecoCompra().doubleValue();
                    preco_retalho = vector.get( i ).get( 0 );
                    preco_grosso = vector.get( i ).get( 1 );

                    try
                    {

                        /*PRIMEIRO PRECO RETALHO*/
                        preco_anterior = preco_retalho.getPrecoVenda().doubleValue();
                        valor = preco_retalho.getPrecoVenda().doubleValue() * percentagem;

                        preco_venda = preco_retalho.getPrecoVenda().doubleValue() - valor;
                        preco_retalho.setPrecoAnterior( preco_anterior );
                        preco_retalho.setPrecoVenda( new BigDecimal( MetodosUtil.retirar_dizimas( preco_venda ) ) );
                        MetodosUtil.salvar_preco( preco_retalho, id_user, conexao );

                        /*SEGUNDO PRECO GROSSO*/
                        preco_anterior = preco_grosso.getPrecoVenda().doubleValue();
                        valor = preco_grosso.getPrecoVenda().doubleValue() * percentagem;
                        preco_venda = preco_grosso.getPrecoVenda().doubleValue() - valor;
                        preco_grosso.setPrecoAnterior( preco_anterior );
                        preco_grosso.setPrecoVenda( new BigDecimal( MetodosUtil.retirar_dizimas( preco_venda ) ) );
                        MetodosUtil.salvar_preco( preco_grosso, id_user, conexao );
                        //precoDao.create(preco_grosso);

                    }
                    catch ( Exception e )
                    {

                        e.printStackTrace();
                        sucesso = false;
                        JOptionPane.showMessageDialog( null, "Erro ao actualizar o preço",
                                DVML.DVML_COMERCIAL,
                                JOptionPane.ERROR_MESSAGE );
                        break;
                    }

                    try
                    {
                        jp_progress.UpdateProgress( (int) x );
                        jp_progress.repaint();
                        Thread.sleep( 50 );
                    }
                    catch ( InterruptedException ex )
                    {
                        Logger.getLogger( PromocaoCopiaVisao.class.getName() ).log( Level.SEVERE, null, ex );
                    }

                }

                if ( sucesso )
                {
                    //fecha a coonexão
                    conexao.close();
                    //adiciona na tabela
                    adicionar_posterior();

                    //activa o botão
                    //mostra a mensagem na tela
                    //JOptionPane.showMessageDialog(null, "Preço actualizado com sucesso!...");
                }
            }
        } ).start();

    }

    private void desactivar_promocao()
    {

        new Thread( new Runnable()
        {

            @Override
            public void run()
            {

                double preco_venda = 0, preco_compra, preco_anterior, valor, percentagem;
                float x = 0;
                boolean sucesso = true;
                TbPreco preco_retalho, preco_grosso;
                int id_produto = 0;

                percentagem = Double.parseDouble( txt_percentagem.getText() );
                percentagem = ( percentagem / 100 );
                btn_desactivar.setEnabled( false );
                lb_status.setText( "A desactivar a promoção!..." );
                TAMANHO = vector.size();
                //desactiva o botão
                btn_update.setEnabled( false );
                //Abri a conexão
                conexao = new BDConexao();
                //for (int i = 0; i < vector.size(); i++) {
                for ( int i = 0; i < TAMANHO; i++ )
                {

                    x = ( ( i + 1 ) * 100 );
                    x = ( x / TAMANHO );

                    id_produto = vector.get( i ).get( 0 ).getFkProduto().getCodigo();

                    preco_compra = vector.get( i ).get( 0 ).getPrecoCompra().doubleValue();
                    preco_retalho = vector.get( i ).get( 0 );
                    preco_grosso = vector.get( i ).get( 1 );

                    try
                    {

                        /*PRIMEIRO PRECO RETALHO*/
                        preco_anterior = preco_retalho.getPrecoAnterior();
                        valor = preco_anterior * percentagem;
                        preco_retalho.setPrecoAnterior( preco_retalho.getPrecoVenda().doubleValue() );
                        preco_venda = preco_retalho.getPrecoVenda().doubleValue() + valor;
                        preco_retalho.setPrecoVenda( new BigDecimal( MetodosUtil.retirar_dizimas( preco_venda ) ) );
                        MetodosUtil.salvar_preco( preco_retalho, id_user, conexao );

                        /*SEGUNDO PRECO GROSSO*/
                        preco_anterior = preco_grosso.getPrecoAnterior();
                        valor = preco_anterior * percentagem;
                        preco_retalho.setPrecoAnterior( preco_grosso.getPrecoVenda().doubleValue() );
                        preco_venda = preco_grosso.getPrecoVenda().doubleValue() + valor;
                        preco_grosso.setPrecoVenda( new BigDecimal( MetodosUtil.retirar_dizimas( preco_venda ) ) );
                        MetodosUtil.salvar_preco( preco_grosso, id_user, conexao );
                        //precoDao.create(preco_grosso);

                    }
                    catch ( Exception e )
                    {

                        e.printStackTrace();
                        sucesso = false;
                        JOptionPane.showMessageDialog( null, "Erro ao actualizar o preço",
                                DVML.DVML_COMERCIAL,
                                JOptionPane.ERROR_MESSAGE );
                        break;
                    }

                    try
                    {
                        jp_progress.UpdateProgress( (int) x );
                        jp_progress.repaint();
                        Thread.sleep( 50 );
                    }
                    catch ( InterruptedException ex )
                    {
                        Logger.getLogger( PromocaoCopiaVisao.class.getName() ).log( Level.SEVERE, null, ex );
                    }

                }

                if ( sucesso )
                {
                    //fecha a coonexão
                    conexao.close();
                    //adiciona na tabela
                    adicionar_posterior();
                    //activa o botão
                    promocao = promocaoDao.findPromocao( promocaoDao.getUltimoIdPromocao() );
                    promocao.setRetalhoGroso( true );
                    try
                    {
                        promocaoDao.edit( promocao );
                    }
                    catch ( Exception e )
                    {
                    }
                    procedimento_enable_buttons();

                    //mostra a mensagem na tela
                    //JOptionPane.showMessageDialog(null, "Preço actualizado com sucesso!...");
                }
            }
        } ).start();

    }

    private void adicionar_posterior()
    {

        new Thread(
                new Runnable()
        {

            @Override
            public void run()
            {
                btn_update.setEnabled( false );
                lb_status.setText( "A visualizar na tabela. Por favor aguarde!..." );
                DefaultTableModel modelo = (DefaultTableModel) tabela.getModel();
                List<TbProduto> list = produtoDao.getAll();
                TbPreco preco_grosso;
                TbPreco preco_retalho;
                int cod_preco = 0, x = 0;
                Vector<TbPreco> vector_precos;
                modelo.setRowCount( 0 );
                TAMANHO = list.size();

                for ( int i = 0; i < TAMANHO; i++ )
                {

                    TbProduto produto = list.get( i );

                    x = ( ( i + 1 ) * 100 );
                    x = ( x / TAMANHO );

                    try
                    {
                        //ultimo preço é sempre o do grosso
                        preco_grosso = precoDao.getLastPrecoByIdProduto( produto.getCodigo() );
                        cod_preco = precoDao.getUltimoIdPrecoByIdProduto( produto.getCodigo(), preco_grosso.getQtdBaixo() - 1 );
                        preco_retalho = precoDao.findTbPreco( cod_preco );
                    }
                    catch ( Exception e )
                    {

                        preco_grosso = new TbPreco();
                        preco_grosso.setData( new Date() );
                        preco_grosso.setHora( new Date() );
                        preco_grosso.setFkProduto( produto );
                        preco_grosso.setFkUsuario( usuarioDao.findTbUsuario( id_user ) );
                        preco_grosso.setPrecoCompra( new BigDecimal( "0" ) );
                        preco_grosso.setPrecoVenda( new BigDecimal( "0" ) );
                        preco_grosso.setQtdBaixo( 50 );
                        preco_grosso.setQtdAlto( DVML.GROSSO );

                        preco_retalho = new TbPreco();
                        preco_retalho.setData( new Date() );
                        preco_retalho.setHora( new Date() );
                        preco_retalho.setFkProduto( produto );
                        preco_retalho.setFkUsuario( usuarioDao.findTbUsuario( id_user ) );
                        preco_retalho.setPrecoCompra( new BigDecimal( "0" ) );
                        preco_retalho.setPrecoVenda( new BigDecimal( "0" ) );
                        preco_retalho.setQtdBaixo( 1 );
                        preco_retalho.setQtdAlto( 49 );

                    }

                    modelo.addRow( new Object[]
                    {
                        produto.getCodigo(),
                        produto.getDesignacao(),
                        MetodosUtil.retirar_dizimas( preco_grosso.getPrecoCompra().doubleValue() ),
                        //retalho
                        // getValor(preco_retalho.getPrecoVenda()),
                        MetodosUtil.retirar_dizimas( preco_retalho.getPrecoVenda().doubleValue() ),
                        //grosso
                        //getValor(preco_grosso.getPrecoVenda()),
                        MetodosUtil.retirar_dizimas( preco_grosso.getPrecoVenda().doubleValue() )

                    }
                    );

                    try
                    {
                        jp_progress.UpdateProgress( (int) x );
                        jp_progress.repaint();
                        Thread.sleep( 50 );
                    }
                    catch ( Exception e )
                    {
                    }

                }
                procedimento_enable_buttons();
                lb_status.setText( "Promoção activa com sucesso!..." );
                JOptionPane.showMessageDialog( null, "Dados actualizados com sucesso!.." );
                lb_status.setText( "" );

            }

        }
        ).start();

    }

    private void procedimento_actualizar()
    {

        if ( !txt_percentagem.getText().equals( "" ) )
        {
            int opcao = JOptionPane.showConfirmDialog( null, "Atenção!...\nEsta operação será aplicada à todos os produtos. E pode demorar alguns minutos\nDeseja Continuar?" );

            if ( opcao == JOptionPane.YES_OPTION )
            {
                progress();
            }

        }
        else
        {
            txt_percentagem.requestFocus();
            JOptionPane.showMessageDialog( null, "Pf. Insira a percetagem", DVML.DVML_COMERCIAL, JOptionPane.WARNING_MESSAGE );

        }

    }

    private void progress()
    {

        new Thread( new Runnable()
        {

            @Override
            public void run()
            {

                double preco_venda = 0, preco_compra;
                float x = 0;
                boolean sucesso = true;
                TbPreco preco_retalho, preco_grosso;
                int id_produto = 0;

                lb_status.setText( "A actualizar o preço!..." );
                TAMANHO = vector.size();
                //desactiva o botão
                btn_update.setEnabled( false );
                //Abri a conexão
                conexao = new BDConexao();

                for ( int i = 0; i < TAMANHO; i++ )
                {

                    x = ( ( i + 1 ) * 100 );
                    x = ( x / TAMANHO );

                    id_produto = vector.get( i ).get( 0 ).getFkProduto().getCodigo();

                    preco_compra = vector.get( i ).get( 0 ).getPrecoCompra().doubleValue();
                    preco_retalho = vector.get( i ).get( 0 );
                    preco_grosso = vector.get( i ).get( 1 );

                    try
                    {

                        /*PRIMEIRO PRECO RETALHO*/
                        preco_retalho.setPercentagemGanho( new BigDecimal( MetodosUtil.retirar_dizimas( Double.parseDouble( txt_percentagem.getText() ) ) ) );
                        preco_venda = ( ( preco_retalho.getPercentagemGanho().doubleValue() * preco_compra ) / 100 ) + preco_compra;
                        preco_retalho.setPrecoVenda( new BigDecimal( MetodosUtil.retirar_dizimas( preco_venda ) ) );
                        //precoDao.create(preco_retalho);
                        MetodosUtil.salvar_preco( preco_retalho, id_user, conexao );

                        /*SEGUNDO PRECO GROSSO*/
                        preco_grosso.setPercentagemGanho( new BigDecimal( MetodosUtil.retirar_dizimas( Double.parseDouble( txt_percentagem.getText() ) ) ) );
                        preco_venda = ( ( preco_grosso.getPercentagemGanho().doubleValue() * preco_compra ) / 100 ) + preco_compra;
                        preco_grosso.setPrecoVenda( new BigDecimal( MetodosUtil.retirar_dizimas( preco_venda ) ) );
                        MetodosUtil.salvar_preco( preco_grosso, id_user, conexao );
                        //precoDao.create(preco_grosso);

                    }
                    catch ( Exception e )
                    {

                        e.printStackTrace();
                        sucesso = false;
                        JOptionPane.showMessageDialog( null, "Erro ao actualizar o preço",
                                DVML.DVML_COMERCIAL,
                                JOptionPane.ERROR_MESSAGE );
                        break;
                    }

                    try
                    {
                        jp_progress.UpdateProgress( (int) x );
                        jp_progress.repaint();
                        Thread.sleep( 50 );
                    }
                    catch ( InterruptedException ex )
                    {
                        Logger.getLogger( PromocaoCopiaVisao.class.getName() ).log( Level.SEVERE, null, ex );
                    }

                }

                if ( sucesso )
                {
                    //fecha a coonexão
                    conexao.close();
                    //adiciona na tabela
                    adicionar_posterior();
                    //activa o botão

                    //mostra a mensagem na tela
                    //JOptionPane.showMessageDialog(null, "Preço actualizado com sucesso!...");
                }
            }
        } ).start();

    }

}
