/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package visao;


import java.sql.Connection;
import dao.AnoEconomicoDao;
import dao.ArmazemDao;
//import dao.BancoDao;
import dao.CambioDao;
import dao.ComprasDao;
import dao.DescontoDao;
import dao.DocumentoDao;
import dao.FornecedorDao;
import dao.ItemComprasDao;
import dao.MoedaDao;
import dao.PrecoDao;
import dao.ProdutoDao;
import dao.ProdutoImpostoDao;
import dao.ProdutoIsentoDao;
import dao.StockDao;
import dao.TipoProdutoDao;
import dao.UsuarioDao;
import dao.VasilhameDao;
import entity.AnoEconomico;
import entity.Cambio;
import entity.TbDesconto;
import entity.Documento;
import entity.ItemCompras;
import entity.Moeda;
import entity.TbProduto;
import entity.TbStock;
import entity.TbUsuario;
import entity.TbVasilhame;
import entity.Compras;
import exemplos.PermitirNumeros;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import kitanda.util.CfMethods;
import kitanda.util.CfMethodsSwing;
import lista.ListaCompras;
import modelo.ProdutoModelo;
import util.BDConexao;
import util.DVML;
import util.DVML.Abreviacao;
import static util.DVML.CASAS_DECIMAIS;
import util.JPAEntityMannagerFactoryUtil;
import util.MetodosUtil;

/**
 *
 * @author Domingos Dala Vunge
 */
public class SolicitacaoComprasVisao extends javax.swing.JFrame implements Runnable
{

    private static EntityManagerFactory emf = JPAEntityMannagerFactoryUtil.em;
    private VasilhameDao vasilhameDao;
    private static DescontoDao descontoDao;
    private static PrecoDao precoDao;
//    private BancoDao bancoDao;
    private ItemCompras itemCompras;
    private TbStock stock_local;
    private Compras compra;
    public static ProdutoDao produtoDao;
    private static StockDao stockDao;
    private UsuarioDao usuarioDao;
    private DocumentoDao documentoDao;
    private static FornecedorDao fornecedorDao;
    private ComprasDao comprasDao;
    private static MoedaDao moedaDao;
    private AnoEconomicoDao anoEconomicoDao;
    private static ArmazemDao armazemDao;
    private ItemComprasDao itemComprasDao;
    private TbVasilhame vasilhame;
    private StockDao stocksDao = new StockDao( emf );
    private Moeda moeda;
    private AnoEconomico anoEconomico;
    private static BDConexao conexao;
    private CambioDao cambioDao;
    private Documento documento;
    private static ProdutoImpostoDao produtoImpostoDao;
    private Cambio cambio;
    private TipoProdutoDao tipoProdutoDao;
    private int cod_usuario;
    private int linha = 0, coordenada = 1, doc_prox_cod = 0;
    private double soma_total = 0;
    private static double total_iva = 0;
    private ProdutoModelo produtoModelo;
    private static ProdutoIsentoDao produtoIsentoDao;
    private static int linha_actual = -1;
    private Abreviacao abreviacao;
    private DefaultListModel lista_produto = new DefaultListModel();
    private static double total_iliquido = 0, total_desconto_linha = 0;
    private boolean aviso_continuar_documento = false;
    private Thread t;
    private String prox_doc;

    public SolicitacaoComprasVisao( int cod_usuario, BDConexao conexao ) throws SQLException
    {

        initComponents();

        confiLabel();
        setLocationRelativeTo( null );
        setResizable( false );
        this.cod_usuario = cod_usuario;
        this.conexao = conexao;
        setWindowsListener();
        lista_Produtos.setModel( lista_produto );
        adicionar_produtos();
        init();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        lbTotalPagar = new javax.swing.JLabel();
        lbValorEnregue = new javax.swing.JLabel();
        lbTroco = new javax.swing.JLabel();
        txtTroco = new javax.swing.JTextField();
        txtTotal_AOA_liquido = new javax.swing.JTextField();
        sp_valor_desconto_financeiro = new javax.swing.JSpinner();
        sp_valor_entregue = new javax.swing.JSpinner();
        lbTotalPagar1 = new javax.swing.JLabel();
        lbValorPorExtenco = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        lb_usuario = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        lbCategoria = new javax.swing.JLabel();
        lbCodigoProduto = new javax.swing.JLabel();
        txtCodigoProduto = new javax.swing.JTextField();
        lbPreco = new javax.swing.JLabel();
        lbProduto = new javax.swing.JLabel();
        lbQuantidade = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        lbQuantidadeStock = new javax.swing.JLabel();
        lbCodigoProduto1 = new javax.swing.JLabel();
        txtCodigoBarra = new javax.swing.JTextField();
        cmbCategoria = new javax.swing.JComboBox();
        cmbProduto = new javax.swing.JComboBox();
        txtQuantidaStock = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        txtPreco = new javax.swing.JTextField();
        txtQuatindade = new javax.swing.JTextField();
        lbCodigoProduto2 = new javax.swing.JLabel();
        txtCodigoManual = new javax.swing.JTextField();
        lb_ano_academico = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        lb_proximo_documento = new javax.swing.JLabel();
        lbPreco3 = new javax.swing.JLabel();
        cmbTipoDocumento = new javax.swing.JComboBox();
        cmbArmazem = new javax.swing.JComboBox();
        lbPreco5 = new javax.swing.JLabel();
        cmbMoeda = new javax.swing.JComboBox();
        ck_simplificada = new javax.swing.JCheckBox();
        ck_A4 = new javax.swing.JCheckBox();
        lb_cambio = new javax.swing.JLabel();
        dc_data_documento = new com.toedter.calendar.JDateChooser();
        lbPreco6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtLocal = new javax.swing.JTextField();
        cmbFornecedor = new javax.swing.JComboBox();
        jButton5 = new javax.swing.JButton();
        lbCliente = new javax.swing.JLabel();
        lb_usuario1 = new javax.swing.JLabel();
        txtQuatindade1cc = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lista_Produtos = new javax.swing.JList<>();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("...:::::  SOLICITAÇÃO DE COMPRAS ::::...");

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel1.setFont(new java.awt.Font("Showcard Gothic", 0, 24)); // NOI18N

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbTotalPagar.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbTotalPagar.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbTotalPagar.setText("Desconto :");
        jPanel8.add(lbTotalPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 120, 34));

        lbValorEnregue.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbValorEnregue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbValorEnregue.setText("Valor Entregue :");
        jPanel8.add(lbValorEnregue, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 120, 30));

        lbTroco.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbTroco.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbTroco.setText("Troco:");
        jPanel8.add(lbTroco, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 130, 10));

        txtTroco.setEditable(false);
        txtTroco.setBackground(new java.awt.Color(4, 154, 3));
        txtTroco.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        txtTroco.setForeground(new java.awt.Color(255, 255, 255));
        txtTroco.setCaretColor(new java.awt.Color(255, 255, 255));
        jPanel8.add(txtTroco, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, 310, 10));

        txtTotal_AOA_liquido.setEditable(false);
        txtTotal_AOA_liquido.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        txtTotal_AOA_liquido.setForeground(new java.awt.Color(255, 0, 0));
        txtTotal_AOA_liquido.setCaretColor(new java.awt.Color(255, 255, 255));
        txtTotal_AOA_liquido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotal_AOA_liquidoActionPerformed(evt);
            }
        });
        jPanel8.add(txtTotal_AOA_liquido, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, 310, 40));

        sp_valor_desconto_financeiro.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sp_valor_desconto_financeiroStateChanged(evt);
            }
        });
        sp_valor_desconto_financeiro.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                sp_valor_desconto_financeiroInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        sp_valor_desconto_financeiro.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sp_valor_desconto_financeiroPropertyChange(evt);
            }
        });
        sp_valor_desconto_financeiro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sp_valor_desconto_financeiroKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sp_valor_desconto_financeiroKeyPressed(evt);
            }
        });
        jPanel8.add(sp_valor_desconto_financeiro, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 310, 30));

        sp_valor_entregue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sp_valor_entregueStateChanged(evt);
            }
        });
        sp_valor_entregue.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                sp_valor_entregueInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        sp_valor_entregue.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sp_valor_entreguePropertyChange(evt);
            }
        });
        sp_valor_entregue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sp_valor_entregueKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sp_valor_entregueKeyPressed(evt);
            }
        });
        jPanel8.add(sp_valor_entregue, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 120, 310, 10));

        lbTotalPagar1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbTotalPagar1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbTotalPagar1.setText("Total Compras :");
        jPanel8.add(lbTotalPagar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 130, 34));

        lbValorPorExtenco.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lbValorPorExtenco.setForeground(new java.awt.Color(204, 0, 0));
        lbValorPorExtenco.setText("VALOR POR EXTENSO");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/impressora1.png"))); // NOI18N
        jButton1.setToolTipText("Efectuar Venda");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/LOGOUT - VERMELHO/Logout 32x32.png"))); // NOI18N
        btnCancelar.setAlignmentX(0.5F);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        lb_usuario.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lb_usuario.setText("Conta:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbValorPorExtenco, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lb_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lbValorPorExtenco, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lb_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(4, 154, 3))); // NOI18N
        jPanel4.setForeground(new java.awt.Color(102, 153, 0));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbCategoria.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbCategoria.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbCategoria.setText("Categoria:");
        jPanel4.add(lbCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 160, -1));

        lbCodigoProduto.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbCodigoProduto.setText("CodArt:");
        jPanel4.add(lbCodigoProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 120, 60, 30));

        txtCodigoProduto.setBackground(new java.awt.Color(51, 153, 0));
        txtCodigoProduto.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtCodigoProduto.setForeground(new java.awt.Color(255, 255, 255));
        txtCodigoProduto.setCaretColor(new java.awt.Color(255, 255, 255));
        txtCodigoProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoProdutoActionPerformed(evt);
            }
        });
        jPanel4.add(txtCodigoProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, 60, 40));

        lbPreco.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbPreco.setText("Preco:");
        jPanel4.add(lbPreco, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 80, 50, -1));

        lbProduto.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbProduto.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbProduto.setText("Artigo:");
        jPanel4.add(lbProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 160, 30));

        lbQuantidade.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbQuantidade.setText("Qtd:");
        jPanel4.add(lbQuantidade, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, 39, 40));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/2934_32x32.png"))); // NOI18N
        jButton2.setToolTipText("click para remover produtos do carrinho");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 160, 50, 50));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/Button-Add-icon.png"))); // NOI18N
        jButton3.setToolTipText("click para adicionar no carrinho");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 50, 50));

        lbQuantidadeStock.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbQuantidadeStock.setText("Q.Stock:");
        jPanel4.add(lbQuantidadeStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 110, -1, 33));

        lbCodigoProduto1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbCodigoProduto1.setText("CodBarra:");
        jPanel4.add(lbCodigoProduto1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 160, 100, 33));

        txtCodigoBarra.setBackground(new java.awt.Color(51, 153, 0));
        txtCodigoBarra.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtCodigoBarra.setForeground(new java.awt.Color(255, 255, 255));
        txtCodigoBarra.setCaretColor(new java.awt.Color(255, 255, 255));
        txtCodigoBarra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoBarraActionPerformed(evt);
            }
        });
        jPanel4.add(txtCodigoBarra, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 160, 270, 33));

        cmbCategoria.setBackground(new java.awt.Color(4, 154, 3));
        cmbCategoria.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        cmbCategoria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategoriaActionPerformed(evt);
            }
        });
        jPanel4.add(cmbCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 230, 31));

        cmbProduto.setBackground(new java.awt.Color(4, 154, 3));
        cmbProduto.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        cmbProduto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProdutoActionPerformed(evt);
            }
        });
        jPanel4.add(cmbProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 40, 230, 40));

        txtQuantidaStock.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtQuantidaStock.setForeground(new java.awt.Color(255, 255, 255));
        jPanel4.add(txtQuantidaStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 80, 70, 70));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/proucura.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 40, 40, 40));

        txtPreco.setEditable(false);
        txtPreco.setBackground(new java.awt.Color(51, 153, 0));
        txtPreco.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtPreco.setForeground(new java.awt.Color(255, 255, 255));
        txtPreco.setCaretColor(new java.awt.Color(255, 255, 255));
        jPanel4.add(txtPreco, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, 130, 30));

        txtQuatindade.setBackground(new java.awt.Color(51, 153, 0));
        txtQuatindade.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        txtQuatindade.setForeground(new java.awt.Color(255, 255, 255));
        txtQuatindade.setText("1");
        txtQuatindade.setCaretColor(new java.awt.Color(255, 255, 255));
        txtQuatindade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuatindadeActionPerformed(evt);
            }
        });
        jPanel4.add(txtQuatindade, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 120, 60, 30));

        lbCodigoProduto2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbCodigoProduto2.setText("CodManual:");
        jPanel4.add(lbCodigoProduto2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 190, 90, 33));

        txtCodigoManual.setBackground(new java.awt.Color(51, 153, 0));
        txtCodigoManual.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtCodigoManual.setForeground(new java.awt.Color(255, 255, 255));
        txtCodigoManual.setCaretColor(new java.awt.Color(255, 255, 255));
        txtCodigoManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoManualActionPerformed(evt);
            }
        });
        jPanel4.add(txtCodigoManual, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 190, 270, 33));

        lb_ano_academico.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        lb_ano_academico.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_ano_academico.setText("ANO ECONÔMICO");
        jPanel4.add(lb_ano_academico, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        table.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod.Art", "Descrição", "Unidade", "Preço", "Qtd.", "Desconto(%)", "Taxa ", "Valor", "Valor C/ Imposto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setCellSelectionEnabled(true);
        table.setGridColor(new java.awt.Color(51, 153, 0));
        jScrollPane1.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(10);
            table.getColumnModel().getColumn(1).setPreferredWidth(250);
            table.getColumnModel().getColumn(3).setPreferredWidth(20);
            table.getColumnModel().getColumn(4).setPreferredWidth(5);
            table.getColumnModel().getColumn(6).setPreferredWidth(5);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 895, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 16, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lb_proximo_documento.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        lb_proximo_documento.setText("PRÓXIMO DOC. : XX PP/A1");

        lbPreco3.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbPreco3.setText("Tipo de Documento");

        cmbTipoDocumento.setBackground(new java.awt.Color(4, 154, 3));
        cmbTipoDocumento.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        cmbTipoDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoDocumentoActionPerformed(evt);
            }
        });

        cmbArmazem.setBackground(new java.awt.Color(4, 154, 3));
        cmbArmazem.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        cmbArmazem.setEnabled(false);
        cmbArmazem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbArmazemActionPerformed(evt);
            }
        });

        lbPreco5.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbPreco5.setText("Moeda");

        cmbMoeda.setBackground(new java.awt.Color(4, 154, 3));
        cmbMoeda.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        cmbMoeda.setEnabled(false);
        cmbMoeda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMoedaActionPerformed(evt);
            }
        });

        buttonGroup3.add(ck_simplificada);
        ck_simplificada.setText("Simplificada");
        ck_simplificada.setEnabled(false);
        ck_simplificada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ck_simplificadaActionPerformed(evt);
            }
        });

        buttonGroup3.add(ck_A4);
        ck_A4.setSelected(true);
        ck_A4.setText("A4");
        ck_A4.setEnabled(false);
        ck_A4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ck_A4ActionPerformed(evt);
            }
        });

        lb_cambio.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        lb_cambio.setText("Cambio");

        lbPreco6.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbPreco6.setText("Data Doc.");

        jLabel1.setText("Local");

        txtLocal.setEditable(false);

        cmbFornecedor.setBackground(new java.awt.Color(4, 154, 3));
        cmbFornecedor.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        cmbFornecedor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFornecedorActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/usuario.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        lbCliente.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbCliente.setText("Fornecedor");

        lb_usuario1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lb_usuario1.setText("Cod Doc:");

        txtQuatindade1cc.setBackground(new java.awt.Color(51, 153, 0));
        txtQuatindade1cc.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        txtQuatindade1cc.setForeground(new java.awt.Color(255, 255, 255));
        txtQuatindade1cc.setCaretColor(new java.awt.Color(255, 255, 255));
        txtQuatindade1cc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuatindade1ccActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(lbPreco3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69)
                                .addComponent(lbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(cmbTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmbFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)))
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbPreco5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(cmbMoeda, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(lb_cambio))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(72, 72, 72)
                                .addComponent(lbPreco6, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(lb_usuario1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtQuatindade1cc, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(lb_proximo_documento, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbArmazem, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(ck_A4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ck_simplificada))
                            .addComponent(dc_data_documento, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbPreco3)
                            .addComponent(lbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbTipoDocumento)
                            .addComponent(cmbFornecedor)))
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lb_proximo_documento, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbArmazem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_usuario1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQuatindade1cc, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(lbPreco5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbMoeda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ck_simplificada)
                    .addComponent(ck_A4)
                    .addComponent(lb_cambio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lbPreco6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dc_data_documento, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addComponent(txtLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Produtos por Solicitar"), "Produtos por Solicitar"));

        lista_Produtos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lista_ProdutosMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(lista_Produtos);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(51, 153, 0));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("SOLICITAÇÃO DE COMPRAS");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel7.setBackground(new java.awt.Color(51, 153, 0));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("...:::::  KITANDA - FACTURAÃO ::::...");

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try
        {

            remover_item_carrinho();

        }
        catch ( Exception ex )
        {
            //Logger.getLogger(VendaUsuarioVisao.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog( null, "Possivelmente não selecionaste \n nenhuma linha ou não existe dados na tabela", "AVISO", JOptionPane.WARNING_MESSAGE );
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        adicionar_botao();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void txtCodigoProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoProdutoActionPerformed
        // TODO add your handling code here:
        accao_codigo_interno_enter();
    }//GEN-LAST:event_txtCodigoProdutoActionPerformed

    private void cmbArmazemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbArmazemActionPerformed
        // TODO add your handling code here:
        adicionar_preco_quantidade();
    }//GEN-LAST:event_cmbArmazemActionPerformed

    private void txtCodigoBarraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoBarraActionPerformed
        // TODO add your handling code here:
        accao_codigo_barra_enter();
    }//GEN-LAST:event_txtCodigoBarraActionPerformed

    private void cmbFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFornecedorActionPerformed
        // TODO add your handling code here:
        accao_cliente();
    }//GEN-LAST:event_cmbFornecedorActionPerformed

    private void txtQuatindadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuatindadeActionPerformed
        // TODO add your handling code here:
        //sp_valor_entregue.requestFocus();
        //txtCodigoBarra.requestFocus();
        txtCodigoBarra.requestFocus();
    }//GEN-LAST:event_txtQuatindadeActionPerformed

    private void txtTotal_AOA_liquidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotal_AOA_liquidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotal_AOA_liquidoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        procedimento_salvar();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmbCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategoriaActionPerformed

    }//GEN-LAST:event_cmbCategoriaActionPerformed

    private void cmbProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProdutoActionPerformed
        // TODO add your handling code here:
        try
        {
            adicionar_preco_quantidade();
        }
        catch ( Exception e )
        {
        }
    }//GEN-LAST:event_cmbProdutoActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

//        try
//        {
//            new BuscaProdutoVisao( this, rootPaneCheckingEnabled, getCodigoArmazem(), DVML.JANELA_VENDA ).show();
//        }
//        catch ( Exception e )
//        {
//            e.printStackTrace();
//        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void cmbTipoDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoDocumentoActionPerformed
        // TODO add your handling code here:
        mostrar_proximo_codigo_documento();
        actualizar_abreviacao();
        desabilitar_campos();
        atualizarFornecedor();
    }//GEN-LAST:event_cmbTipoDocumentoActionPerformed

    private void cmbMoedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMoedaActionPerformed
        // TODO add your handling code here:
        actualizar_moeda();

    }//GEN-LAST:event_cmbMoedaActionPerformed

    private void txtQuatindade1ccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuatindade1ccActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuatindade1ccActionPerformed

    private void ck_A4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ck_A4ActionPerformed
        // TODO add your handling code here:
        actualizar_abreviacao();
    }//GEN-LAST:event_ck_A4ActionPerformed

    private void ck_simplificadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ck_simplificadaActionPerformed
        // TODO add your handling code here:
        actualizar_abreviacao();
    }//GEN-LAST:event_ck_simplificadaActionPerformed

    private void sp_valor_entregueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sp_valor_entregueStateChanged
        // TODO add your handling code here:
        tratar_troco();

    }//GEN-LAST:event_sp_valor_entregueStateChanged

    private void sp_valor_entreguePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sp_valor_entreguePropertyChange
        // TODO add your handling code here:

    }//GEN-LAST:event_sp_valor_entreguePropertyChange

    private void sp_valor_entregueInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_sp_valor_entregueInputMethodTextChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_sp_valor_entregueInputMethodTextChanged

    private void sp_valor_entregueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sp_valor_entregueKeyTyped
        // TODO add your handling code here:

    }//GEN-LAST:event_sp_valor_entregueKeyTyped

    private void sp_valor_entregueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sp_valor_entregueKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_sp_valor_entregueKeyPressed

    private void sp_valor_desconto_financeiroStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sp_valor_desconto_financeiroStateChanged
        // TODO add your handling code here:
        tratar_desconto();
    }//GEN-LAST:event_sp_valor_desconto_financeiroStateChanged

    private void sp_valor_desconto_financeiroInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_sp_valor_desconto_financeiroInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_sp_valor_desconto_financeiroInputMethodTextChanged

    private void sp_valor_desconto_financeiroPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sp_valor_desconto_financeiroPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_sp_valor_desconto_financeiroPropertyChange

    private void sp_valor_desconto_financeiroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sp_valor_desconto_financeiroKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_sp_valor_desconto_financeiroKeyTyped

    private void sp_valor_desconto_financeiroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sp_valor_desconto_financeiroKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_sp_valor_desconto_financeiroKeyPressed

    private void txtCodigoManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoManualActionPerformed
        accao_codigo_manual_enter();
    }//GEN-LAST:event_txtCodigoManualActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        new FornecedorOutroVisao( this, cod_usuario, rootPaneCheckingEnabled, conexao ).show();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void lista_ProdutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lista_ProdutosMouseClicked
        // TODO add your handling code here:

        try
        {
            Integer codigo = produtoDao.getProdutoByDescricao( lista_Produtos.getSelectedValue().toString() ).getCodigo();
            accao_codigo_interno_enter_busca_exterior( codigo );
        }
        catch ( Exception e )
        {
            e.printStackTrace();
        }

    }//GEN-LAST:event_lista_ProdutosMouseClicked

//   private void busca()
//   {
//       try {
//            
//            String pedido = lista_Produtos.getSelectedValue();        
//            txtProduto.setText( lista_Produtos.getSelectedValue()  );        
//            setCamposStock(tb_stock.getCodProdutoCodigo().getCodigo());
//    
//       } catch (Exception e) {
//           e.printStackTrace();
//
//       }
//       
//   }
    private void adicionar_produtos()
    {
        try
        {
            List<TbStock> list = stocksDao.getProdutosPorComprar();
            lista_produto.clear();
            for ( int i = 0; i < list.size(); i++ )
            {
                lista_produto.addElement( list.get( i ).getCodProdutoCodigo().getDesignacao() );
            }

        }
        catch ( Exception e )
        {
            e.printStackTrace();
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JCheckBox ck_A4;
    public static javax.swing.JCheckBox ck_simplificada;
    public static javax.swing.JComboBox cmbArmazem;
    public static javax.swing.JComboBox cmbCategoria;
    public static javax.swing.JComboBox cmbFornecedor;
    public static javax.swing.JComboBox cmbMoeda;
    public static javax.swing.JComboBox cmbProduto;
    public static javax.swing.JComboBox cmbTipoDocumento;
    private com.toedter.calendar.JDateChooser dc_data_documento;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lbCategoria;
    private javax.swing.JLabel lbCliente;
    private javax.swing.JLabel lbCodigoProduto;
    private javax.swing.JLabel lbCodigoProduto1;
    private javax.swing.JLabel lbCodigoProduto2;
    private javax.swing.JLabel lbPreco;
    private javax.swing.JLabel lbPreco3;
    private javax.swing.JLabel lbPreco5;
    private javax.swing.JLabel lbPreco6;
    private javax.swing.JLabel lbProduto;
    private javax.swing.JLabel lbQuantidade;
    private javax.swing.JLabel lbQuantidadeStock;
    private javax.swing.JLabel lbTotalPagar;
    private javax.swing.JLabel lbTotalPagar1;
    private javax.swing.JLabel lbTroco;
    private javax.swing.JLabel lbValorEnregue;
    public static javax.swing.JLabel lbValorPorExtenco;
    private javax.swing.JLabel lb_ano_academico;
    private javax.swing.JLabel lb_cambio;
    private javax.swing.JLabel lb_proximo_documento;
    private javax.swing.JLabel lb_usuario;
    private javax.swing.JLabel lb_usuario1;
    private javax.swing.JList<String> lista_Produtos;
    private static javax.swing.JSpinner sp_valor_desconto_financeiro;
    private static javax.swing.JSpinner sp_valor_entregue;
    public static javax.swing.JTable table;
    public static javax.swing.JTextField txtCodigoBarra;
    public static javax.swing.JTextField txtCodigoManual;
    public static javax.swing.JTextField txtCodigoProduto;
    private javax.swing.JTextField txtLocal;
    public static javax.swing.JTextField txtPreco;
    public static javax.swing.JTextField txtQuantidaStock;
    public static javax.swing.JTextField txtQuatindade;
    public static javax.swing.JTextField txtQuatindade1cc;
    public static javax.swing.JTextField txtTotal_AOA_liquido;
    public static javax.swing.JTextField txtTroco;
    // End of variables declaration//GEN-END:variables

    //verifica se o produto existe na tabela do formulário visão isto é na jTable
    private static boolean exist_produto_tabela_formulario( int codigo )
    {

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            if ( Integer.parseInt( String.valueOf( table.getValueAt( i, 0 ) ) ) == codigo )
            {
                linha_actual = i;
                return true;
            }
        }
        return false;

    }

    private void accao_codigo_manual_enter()
    {
        try
        {

//            long codigo_barra = Long.parseLong ( txtCodigoBarra.getText () );
            String codigo_manual = txtCodigoManual.getText();

            TbProduto produto = produtoDao.getProdutoByCodigosManual( codigo_manual );

            cmbCategoria.setSelectedItem( produto.getCodTipoProduto().getDesignacao() );
            //Devo setar a combo dos produtos (Isto porque quando a se faz a busca na cmbCategoria remove todos os produtos exceptos os de categoria actual)
            cmbProduto.setModel( new DefaultComboBoxModel( produtoDao.getAllDesingnacaoProduto() ) );
            cmbProduto.setSelectedItem( produto.getDesignacao() );

            adicionar_preco_quantidade_anitgo();
            procedimento_adicionar();

            txtCodigoManual.setText( "" );
            txtQuatindade.setText( "1" );
            txtCodigoManual.requestFocus();

        }
        catch ( Exception ex )
        {
            ex.printStackTrace();
            Logger.getLogger( SolicitacaoComprasVisao.class.getName() ).log( Level.SEVERE, null, ex );
            JOptionPane.showMessageDialog( null, "Não existe produto com este código de barra.", DVML.DVML_COMERCIAL, JOptionPane.ERROR_MESSAGE );
        }

    }

    //actualiza a quantidade na tabela do formulário visão isto é na jTable
    private static void actuazlizar_quantidade_tabela_formulario( String quantidade, double desconto )
    {
        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        double preco_venda = Double.parseDouble( String.valueOf( modelo.getValueAt( linha_actual, 2 ) ) );
        double total_item = preco_venda * Double.parseDouble( quantidade );
        total_item = total_item - desconto;
        modelo.setValueAt( quantidade, linha_actual, 3 );
        modelo.setValueAt( total_item, linha_actual, 5 );
        //a linha_actual recebe o default
        linha_actual = -1;

    }

    private void accao_cliente()
    {
        String nomeCliente = ( String ) cmbFornecedor.getSelectedItem();
        boolean clienteDiverso = nomeCliente.equalsIgnoreCase( "DIVERSOS" );
//        txtClienteNome.setEditable (  ! clienteDiverso );
//        txtClienteNome.setText ( clienteDiverso ? "Consumidor Final" : nomeCliente );
//        txtClienteNome.setVisible ( cmbCliente.getSelectedItem ().equals ( "DIVERSOS" ) );

//        if ( clienteDiverso )
//        {
//            txtClienteNome.requestFocus ();
//        }
    }

    private void calcularTotalComDesconto()
    {
        double totalComDesconto = 0;
        double resultado = 0;
        double percentagem_desconto = 0;
        double total_pagar = 0;
        totalComDesconto = ( total_pagar * percentagem_desconto ) / 100;
        resultado = total_pagar - totalComDesconto;
        txtTotal_AOA_liquido.setText( String.valueOf( MetodosUtil.retirar_dizimas( resultado ) ).trim() );

    }

    private void calcularTotalSemDesconto()
    {

        double totalSemDesconto = 0;
        double resultado1 = 0;
        double percentagem_desconto = 0;
        double total_pagar = Double.parseDouble( txtTotal_AOA_liquido.getText().trim() );

        totalSemDesconto = total_pagar + ( percentagem_desconto ) / 100;
        resultado1 = total_pagar + totalSemDesconto;

    }

    public static void procedimento_adicionar()
    {

        try
        {

            if ( !campos_invalidos() )
            {

                if ( isStocavel( produtoDao.findTbProduto( getCodigoProduto() ).getStocavel() ) )
                {
//                    
//                    if ( possivel_quantidade() )
//                    {
//                        
//                        if ( estado_critico() )
//                        {
//                            JOptionPane.showMessageDialog( null, "O produto: " + produtoDao.findTbProduto( getCodigoProduto() ).getDesignacao() + " precisa de ser actualizado no stock", DVML.DVML_COMERCIAL, JOptionPane.WARNING_MESSAGE );
//                        }
                    adicionar_produto();
//                        
//                    }
//                    else
//                    {
//                        JOptionPane.showMessageDialog( null, "O produto: " + produtoDao.findTbProduto( getCodigoProduto() ).getDesignacao() + " nao pode ser vendido pra esta quantidade", DVML.DVML_COMERCIAL, JOptionPane.ERROR_MESSAGE );
//                    }

                }
                else
                {
                    adicionar_produto();
                }

            }
            else
            {
                JOptionPane.showMessageDialog( null, "Por Favor Digite a Quantidade" );
            }

        }
        catch ( SQLException ex )
        {

        }

    }

    public static void procedimento_adicionar_exterior()
    {

        try
        {

            if ( !campos_invalidos() )
            {

                if ( isStocavel( produtoDao.findTbProduto( getCodigoProduto() ).getStocavel() ) )
                {

                    adicionar_produto();

                }

            }
            else
            {
                JOptionPane.showMessageDialog( null, "Por Favor Digite a Quantidade" );
            }

        }
        catch ( SQLException ex )
        {

        }

    }

    private void accao_codigo_barra_enter()
    {
        try
        {

            String codigo_barra = txtCodigoBarra.getText().trim();

            TbProduto produto = produtoDao.getProdutoByCodigoBarra( codigo_barra );

            cmbCategoria.setSelectedItem( produto.getCodTipoProduto().getDesignacao() );
            //actualizar
            txtLocal.setText( produto.getCodLocal().getDesignacao() );
            txtCodigoManual.setText( produto.getCodigoManual() );
            //Devo setar a combo dos produtos (Isto porque quando a se faz a busca na cmbCategoria remove todos os produtos exceptos os de categoria actual)
            cmbProduto.setModel( new DefaultComboBoxModel( produtoDao.getAllDesingnacaoProduto() ) );
            cmbProduto.setSelectedItem( produto.getDesignacao() );

            adicionar_preco_quantidade_anitgo();
            procedimento_adicionar();

            txtCodigoBarra.setText( "" );
            txtCodigoManual.setText( "" );
            txtQuatindade.setText( "1" );
            txtCodigoBarra.requestFocus();

        }
        catch ( Exception ex )
        {
            ex.printStackTrace();
            Logger.getLogger( SolicitacaoComprasVisao.class.getName() ).log( Level.SEVERE, null, ex );
            JOptionPane.showMessageDialog( null, "Não existe produto com este código de barra.", DVML.DVML_COMERCIAL, JOptionPane.ERROR_MESSAGE );
        }

    }

    public void adicionar_botao_retificar()
    {

        try
        {

            if ( !campos_invalidos() )
            {
                if ( isStocavel( produtoDao.findTbProduto( getCodigoProduto() ).getStocavel() ) )
                {

                    if ( possivel_quantidade() )
                    {

                        if ( estado_critico() )
                        {
                            JOptionPane.showMessageDialog( null, "O produto: " + produtoDao.findTbProduto( getCodigoProduto() ).getDesignacao() + " precisa de ser actualizado no stock", DVML.DVML_COMERCIAL, JOptionPane.WARNING_MESSAGE );
                        }
                        adicionar_produto();

                    }
                    else
                    {
                        JOptionPane.showMessageDialog( null, "O produto: " + produtoDao.findTbProduto( getCodigoProduto() ).getDesignacao() + " nao pode ser vendido pra esta quantidade", DVML.DVML_COMERCIAL, JOptionPane.ERROR_MESSAGE );
                    }

                }
                else
                {
                    adicionar_produto();
                }

            }
            else
            {
                JOptionPane.showMessageDialog( null, "Por Favor Digite a Quantidade" );
            }

        }
        catch ( SQLException ex )
        {

        }

    }

    @Override
    public void run()
    {

    }

    private void habilitar_campos_creditos()
    {

    }

//    public void actualizar_quantidade(int quantidade, TbStock stock) {
//
//        int qtd = (stock.getQuantidadeExistente() - quantidade);
//        stock.setQuantidadeExistente(qtd);
//        try {
//            stockDao.edit(stock);
//        } catch (Exception e) {
//            e.printStackTrace();
//            System.err.println("Falha ao actualizar a quantidade do produto no stock");
//        }
//
//    }
    private void accao_codigo_interno_enter()
    {
        try
        {

            int codigo = Integer.parseInt( txtCodigoProduto.getText() );
            TbProduto produto = produtoDao.findTbProduto( codigo );
            cmbCategoria.setSelectedItem( produto.getCodTipoProduto().getDesignacao() );
            //Devo setar a combo dos produtos (Isto porque quando a se faz a busca na cmbCategoria remove todos os produtos exceptos os de categoria actual)
            cmbProduto.setModel( new DefaultComboBoxModel( produtoDao.getAllDesingnacaoProduto() ) );
            cmbProduto.setSelectedItem( produto.getDesignacao() );
            //adicionar_preco_quantidade();   991023726
            adicionar_preco_quantidade_anitgo();
            procedimento_adicionar();
            txtCodigoProduto.setText( "" );
            txtQuatindade.setText( "" );
            txtQuatindade.requestFocus();

        }
        catch ( Exception ex )
        {
            ex.printStackTrace();
            Logger.getLogger( SolicitacaoComprasVisao.class.getName() ).log( Level.SEVERE, null, ex );
            JOptionPane.showMessageDialog( null, "Este produto não existe no armazém " + cmbArmazem.getSelectedItem(), DVML.DVML_COMERCIAL, JOptionPane.ERROR_MESSAGE );
        }

    }

    public static void accao_codigo_interno_enter_busca_exterior( int codigo )
    {

        try
        {

            //int   codigo = Integer.parseInt(txtCodigoProduto.getText() );
            TbProduto produto = produtoDao.findTbProduto( codigo );
            cmbCategoria.setSelectedItem( produto.getCodTipoProduto().getDesignacao() );
            //Devo setar a combo dos produtos (Isto porque quando a se faz a busca na cmbCategoria remove todos os produtos exceptos os de categoria actual)
            cmbProduto.setModel( new DefaultComboBoxModel( produtoDao.getAllDesingnacaoProduto() ) );
            cmbProduto.setSelectedItem( produto.getDesignacao() );
            adicionar_preco_quantidade_anitgo();
            procedimento_adicionar_exterior();
            txtCodigoProduto.setText( "" );
            txtQuatindade.setText( "" );
            txtQuatindade.requestFocus();

        }
        catch ( Exception ex )
        {
            //  ex.printStackTrace();
            Logger.getLogger( SolicitacaoComprasVisao.class.getName() ).log( Level.SEVERE, null, ex );
            JOptionPane.showMessageDialog( null, "Este produto não existe no armazém " + cmbArmazem.getSelectedItem(), DVML.DVML_COMERCIAL, JOptionPane.ERROR_MESSAGE );
        }

    }

    private void desactivar_campos()
    {
        lbValorEnregue.setVisible( false );
        sp_valor_entregue.setVisible( false );
        lbTroco.setVisible( false );
        txtTroco.setVisible( false );
        lbCliente.setVisible( false );
        cmbFornecedor.setVisible( false );

    }

    private void mostrar_nome()
    {
        TbUsuario usuario = usuarioDao.findTbUsuario( this.cod_usuario );
        //caso masculino
        if ( usuario.getCodigoSexo().getCodigo() == 1 )
        {
            lb_usuario.setText( "Operador: " + usuario.getNome() );
        }
        else
        {
            lb_usuario.setText( "Operadora: " + usuario.getNome() );
        }
    }

    public void adicionar_preco_quantidade()
    {

        try
        {

            System.out.println( "CODIGO PRODUTO: " + getCodigoProduto() );
            System.out.println( "CODIGO ARMAZEM: " + getCodigoArmazem() );
            if ( stockDao.get_stock_by_id_produto_and_id_armazem( getCodigoProduto(), getCodigoArmazem() ).getQuantidadeExistente() <= stockDao.get_stock_by_id_produto_and_id_armazem( getCodigoProduto(), getCodigoArmazem() ).getQuantCritica() )
            {

                txtQuantidaStock.setBackground( Color.RED );
                txtQuantidaStock.setForeground( Color.BLACK );
            }
            else
            {
                txtQuantidaStock.setBackground( new Color( 51, 153, 0, 255 ) );
            }

            TbProduto produto = produtoDao.findTbProduto( getCodigoProduto() );
            //  txtPreco.setText(String.valueOf(precoDao.findTbPreco(precoDao.getUltimoIdPrecoByIdProduto(produto.getCodigo())).getPrecoVenda()));
            txtCodigoBarra.setText( String.valueOf( produto.getCodBarra() ) );
            //actualizar
            txtLocal.setText( String.valueOf( produto.getCodLocal().getDesignacao() ) );
            txtCodigoProduto.setText( String.valueOf( produto.getCodigo() ) );
            if ( stockDao.exist_produto_stock( getCodigoProduto(), getCodigoArmazem() ) )
            {
                txtQuantidaStock.setText( String.valueOf( stockDao.get_stock_by_id_produto_and_id_armazem( getCodigoProduto(), getCodigoArmazem() ).getQuantidadeExistente() ) );

            }
            else
            {
                txtQuantidaStock.setText( "0" );
            }

        }
        catch ( Exception ex )
        {
            ex.printStackTrace();
            txtQuantidaStock.setText( "0" );
            Logger.getLogger( SolicitacaoComprasVisao.class.getName() ).log( Level.SEVERE, null, ex );
        }

    }

    public static void adicionar_preco_quantidade_anitgo()
    {

        try
        {
            if ( txtQuatindade.getText().isEmpty() )
            {
                JOptionPane.showMessageDialog( null, "Não informou a quantidade, por favor informe a quantidade!" );
            }
            else
            {
                // TODO add your handling code here
//Mano
                //if(BDConexao.getCodigoByCodigo("tb_stock", "quantidade_existente", "cod_produto_codigo", getCodigoProduto())<=5)
                //if (conexao.getQtdExistenteStock(getCodigoProduto(), getCodigoArmazem()) <= conexao.getQtdCriticaStock(getCodigoProduto(), getCodigoArmazem())) {
                TbStock stock = stockDao.get_stock_by_id_produto_and_id_armazem( getCodigoProduto(), getCodigoArmazem() );
                if ( stock.getQuantidadeExistente() <= stock.getQuantCritica() )
                {
                    txtQuantidaStock.setBackground( Color.RED );
                    txtQuantidaStock.setForeground( Color.BLACK );
                } //[51,153,0]
                else
                {
                    txtQuantidaStock.setBackground( new Color( 51, 153, 0, 255 ) );
                }

                // txtQuantidaStock.setText( String.valueOf( BDConexao.getCodigoByCodigo("tb_stock", "quantidade_existente", "cod_produto_codigo", getCodigoProduto())));
//                txtQuantidaStock.setText(String.valueOf(conexao.getQtdExistenteStock(getCodigoProduto(), getCodigoArmazem())));
                txtQuantidaStock.setText( String.valueOf( conexao.getQtdExistenteStock( getCodigoProduto(), getCodigoArmazem() ) ) );
                //txtPreco.setText( String.valueOf(  getPrecoProduto( getCodigoProduto()  , isStocavel(  produtoModelo.getStocavel()  )  ) ) );
                //txtPreco.setText( String.valueOf( MetodosUtil.retirar_dizimas( precoDao.findTbPreco(precoDao.getUltimoIdPrecoByIdProduto(getCodigoProduto())).getPrecoVenda() ) ) );
                System.err.println( "Codigo Produto:  " + getCodigoProduto() );
                System.err.println( "Qtd:  " + txtQuatindade.getText() );
                //txtPreco.setText(String.valueOf(MetodosUtil.retirar_dizimas(precoDao.findTbPreco(precoDao.getUltimoIdPrecoByIdProduto(getCodigoProduto(), Integer.parseInt(txtQuatindade.getText()))).getPrecoVenda())));
                txtPreco.setText( String.valueOf( MetodosUtil.retirar_dizimas( precoDao.findTbPreco( precoDao.getUltimoIdPrecoByIdProduto( getCodigoProduto(), Integer.parseInt( txtQuatindade.getText() ) ) ).getPrecoVenda().doubleValue() ) ) );
            }
        }
        catch ( Exception ex )
        {
            Logger.getLogger( SolicitacaoComprasVisao.class.getName() ).log( Level.SEVERE, null, ex );
        }

    }

    public void adicionar_botao()
    {

        try
        {

            if ( !campos_invalidos() )
            {

//                if (isStocavel(new ProdutoController(conexao).getProduto(getCodigoProduto()).getStocavel())) {
//
//                    if (possivel_quantidade()) {
//
//                        if (estado_critico()) {
//                            JOptionPane.showMessageDialog(null, "O produto: " + new ProdutoController(conexao).getProduto(getCodigoProduto()).getDesignacao() + " precisa de ser actualizado no stock", "DVML", JOptionPane.WARNING_MESSAGE);
//                        }
//                        adicionar_produto();
//
//                    } else {
//                        JOptionPane.showMessageDialog(null, "O produto: " + new ProdutoController(conexao).getProduto(getCodigoProduto()).getDesignacao() + " nao pode ser vendido pra esta quantidade", "DVML", JOptionPane.ERROR_MESSAGE);
//                    }
//
//                } else {
                adicionar_produto();
//                }

            }
            else
            {
                JOptionPane.showMessageDialog( null, "Por Favor Digite a Quantidade" );
            }

        }
        catch ( SQLException ex )
        {

        }

    }

    public static boolean validar_zero()
    {
        return Integer.parseInt( txtQuatindade.getText() ) == 0;
    }

    public void limpar()
    {

        txtQuatindade.setText( "" );
//        txtClienteNome.setText ( "DIVERSOS" );
        txtCodigoProduto.setText( "" );
        sp_valor_entregue.setValue( 0.0 );
        txtCodigoManual.setText( "" );
        txtTotal_AOA_liquido.setText( "0" );
        //txtDesconto.setText("0");

        txtTroco.setText( CfMethods.formatarComoMoeda( 0 ) );
        soma_total = 0;
        txtCodigoBarra.setText( "" );

        reset_desconto_global();
        reset_valor_entregue();

    }

    public boolean campos_invalido_imprimir()
    {

        if ( getValor_entregue() < CfMethods.parseMoedaFormatada( txtTotal_AOA_liquido.getText() ) && ( getIdDocumento() != DVML.DOC_FACTURA_PROFORMA_PP ) )
        {
            JOptionPane.showMessageDialog( null, "O valor entregue tem quer ser maior ou igual ao Total a Pagar", "AVISO", JOptionPane.WARNING_MESSAGE );
            sp_valor_entregue.requestFocus();
            return true;
        }

        if ( cambio == null )
        {
            JOptionPane.showMessageDialog( null, "Por favor seleccione a moeda", "AVISO", JOptionPane.WARNING_MESSAGE );
            return true;
        }

        if ( cmbTipoDocumento == null )
        {
            JOptionPane.showMessageDialog( null, "Por favor seleccione o Tipo de Documento", "AVISO", JOptionPane.WARNING_MESSAGE );
            return true;
        }

        return false;

    }

    public boolean possivel_quantidade( int cod_produto, double qtd )
    {

        //System.err.println(conexao.getQuantidade_Existente_Publico(getCodigoProduto(), getCodigoArmazem()));  
        //  TbStock stock =  stockDao.getStockByDescricao(getCodigoProduto(), getCodigoArmazem() );
        double quant_possivel = conexao.getQuantidade_Existente_Publico( cod_produto, getCodigoArmazem() ) - conexao.getQuantidade_minima_publico( cod_produto, getCodigoArmazem() );
        //int quant_possivel = stock.getQuantidadeExistente() -  stock.getQuantBaixa();

        return quant_possivel >= qtd;

    }

    private boolean transtorno()
    {

        int cod_produto = 0;
        double qtd = 0, qtd_aceite = 0;

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        boolean transtorno = false;

        for ( int i = 0; i < table.getRowCount(); i++ )
        {

            cod_produto = Integer.parseInt( String.valueOf( table.getModel().getValueAt( i, 0 ) ) );
            qtd = Integer.parseInt( String.valueOf( table.getModel().getValueAt( i, 4 ) ) );

            if ( !possivel_quantidade( cod_produto, qtd ) )
            {

                transtorno = true;
                //qtd_aceite = conexao.getQuantidade_Existente_Publico(cod_produto, getCodigoArmazem());
                qtd_aceite = stockDao.getStockByDescricao( cod_produto, getCodigoArmazem() ).getQuantidadeExistente();

                if ( qtd_aceite != 0 )
                {

                    int opcao = JOptionPane.showConfirmDialog( null, "Desculpe pelo transtorno, o produto " + produtoDao.findTbProduto( cod_produto ).getDesignacao() + " só é possivel  a " + qtd_aceite + " quantidade(s)" + ", contrariamente de " + qtd + "\n Deseja actualizar ou remover da tabela ?" );

                    if ( opcao == JOptionPane.YES_OPTION )
                    {

                        modelo.setValueAt( qtd_aceite, i, 4 );
                        double valor_iva = 0, taxa = 0, desconto = 0;
                        taxa = Double.parseDouble( modelo.getValueAt( i, 6 ).toString() );
                        desconto = Double.parseDouble( modelo.getValueAt( i, 5 ).toString() );
                        modelo.setValueAt( getValorComIVA( qtd_aceite, taxa, getPreco( cod_produto, qtd_aceite ), desconto ), i, 8 );
                        //modelo.setValueAt((qtd_aceite * (getPreco(cod_produto, qtd_aceite) + getValorComIVA(taxa, getPreco(cod_produto, qtd_aceite))) - desconto), i, 7);

                    }
                    else
                    {
                        modelo.removeRow( i );
                    }
                    setTotalPagar();
                    valor_por_extenco();
                    sp_valor_entregue.setValue( 0.0 );
                    txtTroco.setText( CfMethods.formatarComoMoeda( 0 ) );
                    adicionar_preco_quantidade_anitgo();

                }
                else
                {
                    modelo.removeRow( i );
                    adicionar_preco_quantidade_anitgo();
                    JOptionPane.showMessageDialog( null, "Desculpe pelo transtorno o produto " + produtoDao.findTbProduto( cod_produto ).getDesignacao() + " já não se encontra disponível no stock", DVML.DVML_COMERCIAL, JOptionPane.WARNING_MESSAGE );
                }

            }

        }

        return transtorno;

    }

    public void procedimento_salvar()
    {

        if ( data_documento_superior_ou_igual_ao_ultimo_doc() )
        {
            /**
             * aviso se for necessário ao utilizador quando a data do documento
             * é superior à actual ou seja do sistema
             */
            data_documento_superior_data_actual();
            if ( this.aviso_continuar_documento )
            {
                if ( !campos_invalido_imprimir() )
                {

                    System.out.println( "STATUS: a processar a factura" );
                    EntityManager em = JPAEntityMannagerFactoryUtil.createEntityManager();
                    em.getTransaction().begin();

                    if ( DVML.MOEDA_KWANZA.equalsIgnoreCase( getMoeda().getAbreviacao() ) )
                    {
                        salvar_compras();
                    }
                    else
                    {
                        // JOptionPane.showMessageDialog(null, "Moeda Estrangeira");
                        actualizar_moeda( DVML.MOEDA_KWANZA );
                        salvar_compras();
                    }

                    em.getTransaction().commit();
                    //actualiza a data para o próximo documento.
                    dc_data_documento.setDate( new Date() );
                    System.out.println( "STATUS: fim do processamento da factura" );

                }
            }

        }
        else
        {
            JOptionPane.showMessageDialog( null, "O documento não pode ser processado porque possui uma data inferior ao úlimo documento efectuado", "AVISO", JOptionPane.WARNING_MESSAGE );
        }

    }

    /* CRIACAO DO GETS  */
    public static int getQuantidade()
    {
        System.err.println( "QUANTIDADE DIGTADA:" + txtQuatindade.getText().trim() );
        return Integer.parseInt( txtQuatindade.getText().trim() );
    }

    public static int getIdFornecedor()
    {
        try
        {
            return fornecedorDao.getFornecedorByNome( cmbFornecedor.getSelectedItem().toString() ).getCodigo();
        }
        catch ( Exception e )
        {
            return 0;
        }

    }

    public int getIdDocumento()
    {
        try
        {
            return documentoDao.getIdByDescricao( cmbTipoDocumento.getSelectedItem().toString() );
        }
        catch ( Exception e )
        {
            return 0;
        }
    }

    public int getIdMoeda()
    {
        try
        {
            return moedaDao.getIdByDescricao( cmbMoeda.getSelectedItem().toString() );
        }
        catch ( Exception e )
        {
            e.printStackTrace();
            return 0;
        }

    }

    public static Double getPreco()
    {

        Moeda moeda = getMoeda();
        if ( moeda == null )
        {
            return null;
        }

        Cambio lastCambio = new CambioDao( emf ).getLastObject( moeda.getPkMoeda() );
        try
        {
            // return  precoDao.findTbPreco( precoDao.getUltimoIdPrecoByIdProduto(  getCodigoProduto() )  ).getPrecoVenda();
            // return MetodosUtil.retirar_dizimas(precoDao.findTbPreco(precoDao.getUltimoIdPrecoByIdProduto(getCodigoProduto(), Integer.parseInt(txtQuatindade.getText()))).getPrecoVenda());
            Double valorCambio = lastCambio.getValor();
            double precoVenda = precoDao.findTbPreco( precoDao.getUltimoIdPrecoByIdProduto( getCodigoProduto(), Integer.parseInt( txtQuatindade.getText() ) ) ).getPrecoVenda().doubleValue();

            return ( precoVenda / valorCambio );
        }
        catch ( Exception e )
        {
            return 0.0;
        }

    }

    public static Double getPreco( int idProduto, double qtd )
    {

        Moeda moeda = getMoeda();
        if ( moeda == null )
        {
            return null;
        }

        Cambio lastCambio = new CambioDao( emf ).getLastObject( moeda.getPkMoeda() );
        try
        {
            // return  precoDao.findTbPreco( precoDao.getUltimoIdPrecoByIdProduto(  getCodigoProduto() )  ).getPrecoVenda();
            // return MetodosUtil.retirar_dizimas(precoDao.findTbPreco(precoDao.getUltimoIdPrecoByIdProduto(getCodigoProduto(), Integer.parseInt(txtQuatindade.getText()))).getPrecoVenda());
            Double valorCambio = lastCambio.getValor();
            double precoVenda = precoDao.findTbPreco( precoDao.getUltimoIdPrecoByIdProduto( idProduto, qtd ) ).getPrecoVenda().doubleValue();

            System.err.println( "PREÇO VENDA: " + precoVenda );
            if ( moeda.getAbreviacao().equals( DVML.MOEDA_KWANZA ) )
            {
                return precoVenda;
            }

            return ( precoVenda / valorCambio );

        }
        catch ( Exception e )
        {
            e.printStackTrace();
            return null;
        }

    }

    public static Double getPreco( int idProduto, int qtd, int idMoeda )
    {

        Moeda moeda = moedaDao.findMoeda( idMoeda );
        if ( moeda == null )
        {
            return null;
        }

        Cambio lastCambio = new CambioDao( emf ).getLastObject( moeda.getPkMoeda() );
        try
        {
            // return  precoDao.findTbPreco( precoDao.getUltimoIdPrecoByIdProduto(  getCodigoProduto() )  ).getPrecoVenda();
            // return MetodosUtil.retirar_dizimas(precoDao.findTbPreco(precoDao.getUltimoIdPrecoByIdProduto(getCodigoProduto(), Integer.parseInt(txtQuatindade.getText()))).getPrecoVenda());
            Double valorCambio = lastCambio.getValor();
            double precoVenda = precoDao.findTbPreco( precoDao.getUltimoIdPrecoByIdProduto( idProduto, qtd ) ).getPrecoVenda().doubleValue();

            System.err.println( "PREÇO VENDA: " + precoVenda );
            if ( moeda.getAbreviacao().equals( DVML.MOEDA_KWANZA ) )
            {
                return precoVenda;
            }

            return ( precoVenda / valorCambio );

        }
        catch ( Exception e )
        {
            e.printStackTrace();
            return null;
        }

    }

    public static String getDescricao_Produto()
    {
        return produtoDao.findTbProduto( getCodigoProduto() ).getDesignacao();
    }

    public static String getUnidade_Produto()
    {
        return produtoDao.findTbProduto( getCodigoProduto() ).getCodUnidade().getAbreviacao();
    }

    public static boolean campos_invalidos()
    {
        return txtQuatindade.getText().equals( "" );
    }

    public void calcularTroco()
    {

        String prefixo = "";
        double troco = 0;

        System.out.println( "VALOR ENTREGUE " + sp_valor_entregue.getValue() );
        System.out.println( "TOTAL A PAGAR " + txtTotal_AOA_liquido.getText().trim() );

        double valor_entregue = ( double ) sp_valor_entregue.getValue();
        double total_pagar = Double.parseDouble( txtTotal_AOA_liquido.getText().trim() );
        troco = valor_entregue - total_pagar;

        System.out.println( "TROCO " + troco );
        txtTroco.setText( String.valueOf( MetodosUtil.retirar_dizimas( troco ) ).trim() );

    }

    private void tratar_troco()
    {
        try
        {
            double troco = 0.0;
            double total_pagar = CfMethods.parseMoedaFormatada( txtTotal_AOA_liquido.getText() );
            double valor_entregue = ( double ) sp_valor_entregue.getValue();
            troco = valor_entregue - total_pagar;
            txtTroco.setText( CfMethods.formatarComoMoeda( troco ) );
        }
        catch ( Exception e )
        {
            e.printStackTrace();
        }

    }

    private void tratar_desconto()
    {
        try
        {
            double desconto = 0.0;
            double total_pagar = getTotalPagar();
            double valor_desconto_geral = ( double ) sp_valor_desconto_financeiro.getValue();

            if ( valor_desconto_geral > total_pagar )
            {
                JOptionPane.showMessageDialog( null, "O desconto global não pode ser maior que o total à pagar.", "AVISO", JOptionPane.WARNING_MESSAGE );
                //reset desconto global
                reset_desconto_global();
                setTotalPagar();
                sp_valor_desconto_financeiro.requestFocus();
            }
            else if ( valor_desconto_geral == total_pagar )
            {
                reset_valor_entregue();
                txtTroco.setText( "0.0" );

                desconto = ( total_pagar - valor_desconto_geral );
                txtTotal_AOA_liquido.setText( CfMethods.formatarComoMoeda( desconto ) );
                valor_por_extenco();
            }
            else
            {
                desconto = ( total_pagar - valor_desconto_geral );
                txtTotal_AOA_liquido.setText( CfMethods.formatarComoMoeda( desconto ) );
                reset_valor_entregue();
                sp_valor_entregue.setValue( desconto );
                txtTroco.setText( "0.0" );
                valor_por_extenco();

            }
        }
        catch ( Exception e )
        {
            e.printStackTrace();
        }

    }

    private void atualizarFornecedor()
    {

        cmbFornecedor.setModel( new DefaultComboBoxModel( conexao.getElementos( "tb_fornecedor", "nome", false ) ) );

    }

    //----------- evento do teclado ---------------------------------------
    class TratarTroco implements KeyListener
    {

        String prefixo = "";

        public void keyPressed( KeyEvent evt )
        {

            String prefixo = "";
            double total_pagar = CfMethods.parseMoedaFormatada( txtTotal_AOA_liquido.getText() );
            if ( evt.getKeyCode() != KeyEvent.VK_BACK_SPACE )
            {
                char key = evt.getKeyChar();
                prefixo = CfMethods.formatarComoMoeda( ( double ) sp_valor_entregue.getValue() ) + key;
                double troco = 0;
                double valor_entregue = Double.parseDouble( prefixo );

                troco = valor_entregue - total_pagar;
                txtTroco.setText( String.valueOf( MetodosUtil.retirar_dizimas( troco ) ) );

            }
            else if ( evt.getKeyCode() == KeyEvent.VK_BACK_SPACE )
            {
                char key = evt.getKeyChar();

                prefixo = CfMethods.formatarComoMoeda( ( double ) sp_valor_entregue.getValue() ) + key;

                double valor_entregue = 0;
                double troco = 0;

                try
                {
                    valor_entregue = Double.parseDouble( prefixo.toString().trim().substring( 0, prefixo.length() - 2 ) );
                    troco = valor_entregue - total_pagar;
                }
                catch ( Exception e )
                {
                    valor_entregue = 0;
                }

                troco = valor_entregue - total_pagar;
                txtTroco.setText( String.valueOf( MetodosUtil.retirar_dizimas( troco ) ) );

            }

        }

        public void keyReleased( KeyEvent evt )
        {
        }

        public void keyTyped( KeyEvent evt )
        {
        }
    }

    //----------- evento do teclado ---------------------------------------
    class TratarDesconto implements KeyListener
    {

        String prefixo = "";

        public void keyPressed( KeyEvent evt )
        {

            String prefixo = "";

            if ( evt.getKeyCode() != KeyEvent.VK_BACK_SPACE )
            {
                char key = evt.getKeyChar();
                double desconto = Double.parseDouble( prefixo );
                double total_pagar = Double.parseDouble( txtTotal_AOA_liquido.getText().trim() );
                double totalComDesconto = ( total_pagar * desconto ) / 100;
                double resultado = total_pagar - totalComDesconto;

                txtTotal_AOA_liquido.setText( String.valueOf( resultado ).trim() );

            }
            else if ( evt.getKeyCode() == KeyEvent.VK_BACK_SPACE )
            {
                char key = evt.getKeyChar();

                double desconto = 0;
                double total_pagar = Double.parseDouble( txtTotal_AOA_liquido.getText().trim() );

                try
                {
                    desconto = Double.parseDouble( prefixo.toString().trim().substring( 0, prefixo.length() - 2 ) );
                    desconto = Double.parseDouble( prefixo );
                    total_pagar = Double.parseDouble( txtTotal_AOA_liquido.getText().trim() );
                    double totalComDesconto = ( total_pagar * desconto ) / 100;
                    double resultado = total_pagar - totalComDesconto;
                    txtTotal_AOA_liquido.setText( String.valueOf( resultado ).trim() );
                }
                catch ( Exception e )
                {
                    desconto = 0;
                }

            }

        }

        public void keyReleased( KeyEvent evt )
        {
        }

        public void keyTyped( KeyEvent evt )
        {
        }
    }

    //----------- evento do teclado ---------------------------------------
    class TratarEventoValorEntregue implements KeyListener
    {

        String prefixo = "";
        int codigo = 0, codigo_categoria = 0, quatidade_produto = 0;

        public void keyPressed( KeyEvent evt )
        {

            if ( evt.getKeyCode() == KeyEvent.VK_ENTER )
            {

                try
                {
//                    txtClienteNome.requestFocus ();
                }
                catch ( Exception ex )
                {
                    Logger.getLogger( SolicitacaoComprasVisao.class.getName() ).log( Level.SEVERE, null, ex );
                }

            }
        }

        public void keyReleased( KeyEvent evt )
        {
        }

        public void keyTyped( KeyEvent evt )
        {
        }
    }

    //----------- evento do teclado ---------------------------------------
    class TratarEventoCliente implements KeyListener
    {

        String prefixo = "";
        int codigo = 0, codigo_categoria = 0, quatidade_produto = 0;

        public void keyPressed( KeyEvent evt )
        {

            if ( evt.getKeyCode() == KeyEvent.VK_ENTER )
            {

                try
                {

                    procedimento_salvar();

                }
                catch ( Exception ex )
                {
                    Logger.getLogger( SolicitacaoComprasVisao.class.getName() ).log( Level.SEVERE, null, ex );
                }

            }
        }

        public void keyReleased( KeyEvent evt )
        {
        }

        public void keyTyped( KeyEvent evt )
        {
        }
    }

    //----------- evento do teclado ---------------------------------------
    class TratarEventtoTroco implements KeyListener
    {

        String prefixo = "";

        public void keyPressed( KeyEvent evt )
        {

            if ( evt.getKeyCode() != KeyEvent.VK_BACK_SPACE && evt.getKeyCode() != KeyEvent.VK_ENTER && evt.getKeyCode() != KeyEvent.VK_BACK_SPACE )
            {

            }
        }

        public void keyReleased( KeyEvent evt )
        {
        }

        public void keyTyped( KeyEvent evt )
        {
        }
    }

    public double getValor_entregue()
    {

        return Double.parseDouble( sp_valor_entregue.getValue().toString() );

    }

    public double getTroco()
    {

        try
        {
            return CfMethods.parseMoedaFormatada( txtTroco.getText() );
        }
        catch ( Exception e )
        {
            return 0.0;
        }

    }

    public String getDataActual()
    {
        Calendar calendario = Calendar.getInstance();

        //buscar data
        int dia = calendario.get( Calendar.DAY_OF_MONTH );
        int mes = calendario.get( Calendar.MONTH );
        int ano = calendario.get( Calendar.YEAR );

        int hora = calendario.get( Calendar.HOUR_OF_DAY );
        int minuto = calendario.get( Calendar.MINUTE );
        int segundo = calendario.get( Calendar.SECOND );
        String data = ano + "-" + ( mes + 1 ) + "-" + dia + " " + hora + ":" + minuto + ":" + segundo;

        return data;

    }

    public static double getTotal()
    {
        return getQuantidade() * getPreco();
    }

    public static void adicionar_produto() throws SQLException
    {

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        double total_deconto = Double.parseDouble( String.valueOf( getPreco() ) ) * Double.parseDouble( String.valueOf( getQuantidade() ) );

        if ( !exist_produto_tabela_formulario( getCodigoProduto() ) )
        {
            if ( !validar_zero() )
            {
                modelo.addRow( new Object[]
                {
                    getCodigoProduto(),
                    getDescricao_Produto(),
                    getUnidade_Produto(),
                    CfMethods.formatarComoMoeda( getPreco() ),
                    getQuantidade(),
                    getDescontoPercentagem(),
                    getTaxaImposto( getCodigoProduto() ),
                    CfMethods.formatarComoMoeda( getTotal() ),
                    //getValorIVA(int qtd, double taxa, double preco_venda, double desconto)
                    CfMethods.formatarComoMoeda( getValorComIVA(
                    getQuantidade(),
                    getTaxaImposto( getCodigoProduto() ),
                    getPreco(),
                    //getDesconto_produto( total_deconto )
                    getDescontoPercentagem()
                    )
                    )
                } );

            }
            else
            {
                JOptionPane.showMessageDialog( null, "Atenção\nA quantidade a sair não pode ser igual a zero!" );
            }

        }
        else
        {
            actuazlizar_quantidade_tabela_formulario( txtQuatindade.getText(), getDesconto_produto( total_deconto ) );
        }
        setTotalPagar();
        calculaTotalIVA();
        valor_por_extenco();
        txtQuatindade.setText( "1" );
        txtCodigoBarra.requestFocus();

    }

    private static void valor_por_extenco()
    {
        System.out.println( "Valor XXXXXXX: " + CfMethods.parseMoedaFormatada( txtTotal_AOA_liquido.getText() ) );
        lbValorPorExtenco.setText( MetodosUtil.valorPorExtenso( CfMethods.parseMoedaFormatada( txtTotal_AOA_liquido.getText() ), getMoeda().getDesignacao() ) );
    }

    private static void valor_por_extenco( Moeda moeda )
    {
        System.out.println( "Valor XXXXXXX: " + CfMethods.parseMoedaFormatada( txtTotal_AOA_liquido.getText() ) );
        lbValorPorExtenco.setText( MetodosUtil.valorPorExtenso( CfMethods.parseMoedaFormatada( txtTotal_AOA_liquido.getText() ), moeda.getDesignacao() ) );
    }

    public void remover_item_carrinho()
    {

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        modelo.removeRow( table.getSelectedRow() );
        setTotalPagar();
        calculaTotalIVA();
        //txtDesconto.setText("0");

        valor_por_extenco();
        reset_desconto_global();
        //calcularTroco();

    }

    public void adicionar_produto_teclado( int codigo, String descricao ) throws SQLException
    {

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        double total_deconto = Double.parseDouble( String.valueOf( getPreco() ) ) * Double.parseDouble( String.valueOf( getQuantidade() ) );

        modelo.addRow( new Object[]
        {
            codigo,
            descricao,
            getPreco(),
            getQuantidade(),
            getDesconto_produto( total_deconto ),
            getTotal() - getDesconto_produto( total_deconto )
        } );

        setTotalPagar();
        double valor_entregue = ( double ) sp_valor_entregue.getValue();
        if ( valor_entregue > 0 )
        {
            calcularTroco();
        }

    }
//    

    //#I
    public void salvarItemCompras()
    {

        int cod_venda = comprasDao.getLastCompra();
        boolean efectuada = true;
        this.compra = comprasDao.findCompras( cod_venda );

        for ( int i = 0; i < table.getRowCount(); i++ )
        {
            try
            {

                itemCompras = new ItemCompras();
                itemCompras.setFkProduto( produtoDao.findTbProduto( Integer.parseInt( String.valueOf( table.getModel().getValueAt( i, 0 ) ) ) ) );
                itemCompras.setFkCompra( this.compra );
                itemCompras.setQuantidade( Double.parseDouble( String.valueOf( table.getModel().getValueAt( i, 4 ) ) ) );
                itemCompras.setDesconto( Double.parseDouble( String.valueOf( table.getModel().getValueAt( i, 5 ) ) ) );
                itemCompras.setValorIva( Double.parseDouble( String.valueOf( table.getModel().getValueAt( i, 6 ) ) ) );
                itemCompras.setMotivoIsensao( getMotivoIsensao( itemCompras.getFkProduto().getCodigo() ) );
                itemCompras.setCodigoIsensao( MetodosUtil.getCodigoRegime( itemCompras.getFkProduto().getCodigo() ) );
                itemCompras.setTotal( CfMethods.parseMoedaFormatada( String.valueOf( table.getModel().getValueAt( i, 8 ) ) ) );
                itemCompras.setPrecoCompra( CfMethods.parseMoedaFormatada( String.valueOf( table.getModel().getValueAt( i, 3 ) ) ) );
//                itemCompras.setPrecoCompra(precoDao.findTbPreco(precoDao.getUltimoIdPrecoByIdProduto(itemCompras.getFkProduto().getCodigo(), itemCompras.getQuantidade())));
                //cria o item compra
                itemComprasDao.create( itemCompras );
                this.stock_local = stockDao.get_stock_by_id_produto_and_id_armazem( itemCompras.getFkProduto().getCodigo(), getCodigoArmazem() );

            }
            catch ( Exception e )
            {
                e.printStackTrace();
                efectuada = false;
                JOptionPane.showMessageDialog( null, "Falha ao registrar o produto: " + itemCompras.getFkProduto().getCodigo() + " na Factura" );
                break;
            }
        }

        if ( efectuada )
        {
            JOptionPane.showMessageDialog( null, "Solicitação efectuada com sucesso!.." );
            List<TbProduto> lista_produto_isentos = new ArrayList<>();
//            lista_produto_isentos = getProdutosIsentos();
//            String motivos_isentos = MetodosUtil.getMotivoIsensaoProdutos(lista_produto_isentos);
//            System.err.println("MOTIVOS: " + motivos_isentos);
            try
            {

                limpar();
                remover_all_produto();
                //adicionar_preco_quantidade_anitgo();

            }
            catch ( Exception e )
            {
            }
            actualizar_cod_doc();
//            txtClienteNome.setText ( "" );
            // txtClienteNome.requestFocus();
            //Chama a factura e imprime directamente para a imprissora que estiver devenidade no sistema operativo
            //ListaVenda1 triplicado = new ListaVenda1( cod_venda, this.abreviacao, false, ck_simplificada.isSelected(), "Triplicado", motivos_isentos );
            //ListaVenda1 duplicado = new ListaVenda1( cod_venda, this.abreviacao, false, ck_simplificada.isSelected(), "Duplicado", motivos_isentos );

            txtQuatindade.requestFocus();
            txtQuantidaStock.setText( String.valueOf( conexao.getQtdExistenteStock( getCodigoProduto(), getCodigoArmazem() ) ) );
//            ListaVenda1 duplicado = new ListaVenda1(cod_venda, this.abreviacao, false, ck_simplificada.isSelected(), "Duplicado", motivos_isentos);
            ListaCompras original = new ListaCompras( cod_venda, this.abreviacao, false, ck_simplificada.isSelected(), "Original", "" );

//            ListaVenda1 listaVenda2 = new ListaVenda1(cod_venda, false, ck_simplificada.isSelected());
            //Em caso em que a impreensão é dupla
            //ListaVendaDuplicado listaVenda1 = new ListaVendaDuplicado(cod_venda, setPeformance(), ckImpreesao.isSelected());
        }

    }

    private boolean actualizar_vasilhame( TbVasilhame vasilhame, double qtd )
    {
        double qtd_actualizada = vasilhame.getQtdExistente() + qtd;
        vasilhame.setQtdExistente( qtd_actualizada );
        try
        {
            vasilhameDao.edit( vasilhame );
            return true;
        }
        catch ( Exception e )
        {
            return false;
        }

    }

    public void remover_items()
    {

        table.getColumnModel().getColumn( 0 );
        table.getColumnModel().getColumn( 1 );
        table.getColumnModel().getColumn( 2 );
        table.getColumnModel().getColumn( 3 );
        table.getColumnModel().getColumn( 4 );
        table.getColumnModel().getColumn( 5 );

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();

        for ( int i = modelo.getRowCount() - 1; i >= 0; i-- )
        {
            modelo.removeRow( i );
        }

    }

    public static void setTotalPagar()
    {

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        double total_liquido = getTotalAOALiquido();
//        double total_liquido = 0, total_desconto_linha = 0;
//        double preco = 0.0, desconto_valor_linha = 0.0, preco_total_linha = 0.0;
//        int qtd = 0, codigo_produto;
//
//        for ( int i = 0; i < modelo.getRowCount(); i++ )
//        {
//            codigo_produto = Integer.parseInt( modelo.getValueAt( i, 0 ).toString() );
//            preco = CfMethods.parseMoedaFormatada( String.valueOf( modelo.getValueAt( i, 2 ) ) );
//            qtd = Integer.parseInt( String.valueOf( modelo.getValueAt( i, 3 ) ) );
//            preco_total_linha = ( preco * qtd );
//            desconto_valor_linha = getDescontoValorLinha( codigo_produto, preco_total_linha, qtd );
//
//            //total_liquido += preco_total_linha;
//            total_desconto_linha += desconto_valor_linha;
//            total_liquido += CfMethods.parseMoedaFormatada( String.valueOf( modelo.getValueAt( i, 7 ) ) );
//
//        }

        //txtTotalApagar.setText(String.valueOf(MetodosUtil.retirar_dizimas(total_pagar)));
        txtTotal_AOA_liquido.setText( CfMethods.formatarComoMoeda( total_liquido ) );

        //sp_valor_entregue.setValue(String.valueOf(MetodosUtil.retirar_dizimas(total_pagar)));
        reset_valor_entregue();
        sp_valor_entregue.setValue( total_liquido );

        txtTroco.setText( CfMethods.formatarComoMoeda( 0 ) );
        //calcularTotalSemDesconto();

    }

    public static double getTotalPagar()
    {

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();

        double total_pagar = 0;
        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            total_pagar += CfMethods.parseMoedaFormatada( String.valueOf( modelo.getValueAt( i, 7 ) ) );

        }
        return total_pagar;

    }

    private static void calculaTotalIVA()
    {

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        double iva = 0, preco = 0, desconto = 0;
        int qtd = 0;
        total_iva = 0;
        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {

            preco = CfMethods.parseMoedaFormatada( modelo.getValueAt( i, 3 ).toString() );
            qtd = Integer.parseInt( modelo.getValueAt( i, 4 ).toString() );
            //desconto = CfMethods.parseMoedaFormatada(modelo.getValueAt(i, 4).toString());
            iva = Double.parseDouble( modelo.getValueAt( i, 6 ).toString() );
            total_iva += getIVA( qtd, iva, preco, desconto );
        }

        // System.err.println("Com o método: " + MetodosUtil.valorCasasDecimaisNovo(total_iva, CASAS_DECIMAIS));
        total_iva = MetodosUtil.valorCasasDecimaisNovo( total_iva, CASAS_DECIMAIS );
        System.out.println( "(*)TOTAL IVA: " + total_iva );

    }
//    private static void calculaTotalIVA()
//    {
//
//        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
//        double iva = 0, preco = 0, desconto = 0;
//        int qtd = 0;
//        total_iva = 0;
//        for ( int i = 0; i < modelo.getRowCount(); i++ )
//        {
//
//            preco = CfMethods.parseMoedaFormatada( modelo.getValueAt( i, 2 ).toString() );
//            qtd = Integer.parseInt( modelo.getValueAt( i, 3 ).toString() );
//            //desconto = CfMethods.parseMoedaFormatada(modelo.getValueAt(i, 4).toString());
//            iva = Double.parseDouble( modelo.getValueAt( i, 5 ).toString() );
//            total_iva += getIVA( qtd, iva, preco, desconto );
//        }
//
//        // System.err.println("Com o método: " + MetodosUtil.valorCasasDecimaisNovo(total_iva, CASAS_DECIMAIS));
//        total_iva = MetodosUtil.valorCasasDecimaisNovo( total_iva, CASAS_DECIMAIS );
//        System.out.println( "(*)TOTAL IVA: " + total_iva );
//
//    }

    public void setTotalCompleto()
    {

        table.getColumnModel().getColumn( 0 );
        table.getColumnModel().getColumn( 1 );
        table.getColumnModel().getColumn( 2 );
        table.getColumnModel().getColumn( 3 );
        table.getColumnModel().getColumn( 4 );
        table.getColumnModel().getColumn( 5 );

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();

        double total_pagar = 0;

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            total_pagar += Double.parseDouble( String.valueOf( modelo.getValueAt( i, 5 ) ) );

        }

        try
        {

            calcularTroco();

        }
        catch ( Exception e )
        {
            //e.printStackTrace();
        }

    }

    public static double getDesconto_produto( double preco_total_produto ) throws SQLException
    {

        TbDesconto desconto = getDesconto();
        Double quantidade = desconto.getQuantidade();
        double percentagem_desconto = desconto.getValor();

        if ( getQuantidade() >= quantidade )
        {
            return preco_total_produto * ( percentagem_desconto / 100 );
        }
        else
        {
            return 0.0;
        }

    }

    private static TbDesconto getDesconto()
    {
        TbDesconto desconto = descontoDao.get_desconto_cliente_produto( getIdFornecedor(), getCodigoProduto() );
        return desconto;
    }

    private static double getDescontoPercentagem()
    {
        TbDesconto desconto = getDesconto();
        return desconto.getValor();
    }

    public static double getDesconto_produto( double preco_total_produto, int qtd )
    {

//        TbDesconto desconto = descontoDao.get_desconto_cliente_produto(getIdCliente(), getCodigoProduto());
//        Integer quantidade = desconto.getQuantidade();
//        double percentagem_desconto = desconto.getValor();
//
//        if (qtd >= quantidade) {
//            return preco_total_produto * (percentagem_desconto / 100);
//        } else {
//            return 0.0;
//        }
        return 0;

    }

    public static double getDescontoValorLinha( int codigo_produto, double preco_total_linha, int qtd )
    {

//        TbDesconto desconto = descontoDao.get_desconto_cliente_produto(getIdCliente(), codigo_produto);
//        Integer quantidade = desconto.getQuantidade();
//        double percentagem_desconto = desconto.getValor();
//
//        if (qtd >= quantidade) {
//            return preco_total_linha * (percentagem_desconto / 100);
//        } else {
//            return 0.0;
//        }
        return 0;

    }

    public void getDesconto_Quantidade() throws SQLException
    {
    }

    public double getDescontoActual() throws SQLException
    {

        ResultSet resultado = conexao.executeQuery( "SELECT valor FROM tb_desconto WHERE idDesconto = 1" );
        double valor = 0;
        if ( resultado.next() )
        {
            valor = resultado.getDouble( "valor" );
        }
        return valor;

    }

    public void remover_all_produto() throws SQLException
    {

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        for ( int i = modelo.getRowCount() - 1; i >= 0; i-- )
        {
            modelo.removeRow( i );
        }

    }

    public void remover_produto() throws SQLException
    {

        if ( linha > 0 )
        {

            table.getModel().setValueAt( 0, linha - 1, 0 );
            table.getModel().setValueAt( "", linha - 1, 1 );
            table.getModel().setValueAt( 0, linha - 1, 2 );
            table.getModel().setValueAt( 0, linha - 1, 3 );
            table.getModel().setValueAt( 0, linha - 1, 4 );
            table.getModel().setValueAt( 0, linha - 1, 5 );

            setTotalPagar();
            linha--;
            coordenada--;

            calcularTroco();
        }
        else
        {
            JOptionPane.showMessageDialog( null, "Impossivel Remover Produtos na Tabela!...." );
        }

    }

//    public void actualizar_quantidade(int cod, int quantidade) {
//
//        System.err.println("Entrei no actualizar quantidade");
//        String sql = "UPDATE tb_stock SET quantidade_existente =  " + (getQuantidadeProduto(cod) - quantidade) + " WHERE cod_produto_codigo = " + cod + " AND  cod_armazem = " + getCodigoArmazem();
//        System.out.println("Quantidade   : " + quantidade);
//        conexao.executeUpdate(sql);
//
//    }
    public int getQuantidadeProduto( int cod_produto )
    {

        String sql = "SELECT quantidade_existente FROM  tb_stock WHERE  cod_produto_codigo = " + cod_produto + " AND cod_armazem = " + getCodigoArmazem();

        ResultSet rs = BDConexao.getInstancia().executeQuery( sql );

        try
        {
            if ( rs.next() )
            {
                return rs.getInt( "quantidade_existente" );
            }
        }
        catch ( SQLException ex )
        {
            ex.printStackTrace();
            return 0;
        }

        return 0;
    }

    public int getLastCodigo( String tabela )
    {

        String sql = "SELECT max(codigo) FROM " + tabela;

        ResultSet rs = BDConexao.getInstancia().executeQuery( sql );

        try
        {
            if ( rs.next() )
            {
                return rs.getInt( 1 );
            }
        }
        catch ( SQLException ex )
        {
            ex.printStackTrace();
            return 0;
        }

        return 0;
    }

    public static int getCodigoArmazem()
    {
        //return conexao.getCodigoPublico("tb_armazem", String.valueOf(  cmbArmazem.getSelectedItem() ) );   
        return armazemDao.getArmazemByDescricao( cmbArmazem.getSelectedItem().toString() ).getCodigo();
    }

    //#V
    public void salvar_compras()
    {
        Date data_documento = dc_data_documento.getDate();

        Compras compra_local = new Compras();
        compra_local.setDataCompra( data_documento );
        Calendar calendar = Calendar.getInstance();
        calendar.setTime( data_documento );
        //adicionar 15 dias na data do documento.
        calendar.add( Calendar.DATE, 15 );
        compra_local.setDataLimiteLevantamento( calendar.getTime() );
//        compra_local.setHora(data_documento);
        compra_local.setNomeFornecedor( getNomeFornecedor() );
        compra_local.setFornecedorNif( getClienteNif() );

        //Total Ilíquido
        compra_local.setTotalGeral( getTotalIliquido() );
        //desconto por linha
        compra_local.setDescontoComercial( getDescontoComercial() );
        //imposto
        //calculaTotalIVA();
        compra_local.setTotalIva( getTotalImposto() );
        //desconto global
        compra_local.setDescontoFinanceiro( getDescontoFinanceiro() );
        //Total(AOA) <=> Total Líquido
        compra_local.setTotalCompra( ( double ) getTotalAOALiquido() );
        compra_local.setValorEntregue( getValor_entregue() );
        compra_local.setTroco( getTroco() );
        compra_local.setTotalIncidencia( getTotalIncidencia() );
        compra_local.setTotalIncidenciaIsento( getTotalIncidenciaIsento() );

        /*outros campos*/
        compra_local.setDescontoTotal( getDescontoComercial() + getDescontoFinanceiro() );
//        compra_local.setIdBanco(bancoDao.findTbBanco(getIdBanco()));
//        compra_local.set(armazemDao.findTbArmazem(getCodigoArmazem()));
        compra_local.setCodigoUsuario( usuarioDao.findTbUsuario( cod_usuario ) );
        compra_local.setFkFornecedor( fornecedorDao.findTbFornecedor( getIdFornecedor() ) );
        compra_local.setFkAnoEconomico( this.anoEconomico );

        compra_local.setFkDocumento( this.documento );
        compra_local.setCodFact( this.prox_doc );
//        compra_local.setHashCod(MetodosUtil.criptografia_hash(compra_local, getGrossTotal(), conexao ) );
        compra_local.setHashCod( MetodosUtil.criptografia_hash( prox_doc ) );
        compra_local.setTotalPorExtenso( iniciais_extenso() + lbValorPorExtenco.getText() );
        System.out.println( "STATUS:hash cod processado." );
        compra_local.setAssinatura( MetodosUtil.assinatura_doc( compra_local.getHashCod() ) );
        compra_local.setAutorizado( false );
        compra_local.setDespachoEncomenda( false );
        compra_local.setEncomendado( false );

        try
        {
            comprasDao.create( compra_local );
            System.out.println( "STATUS:compra criada com sucesso." );
            salvarItemCompras();

            System.out.println( "STATUS:itens adicionado na facrtura com sucesso." );
        }
        catch ( Exception e )
        {
            System.err.println( "STATUS: falha ao actualizar a factura" );
            e.printStackTrace();
            JOptionPane.showMessageDialog( null, "Falha ao Processar a Factura", "FALHA", JOptionPane.ERROR_MESSAGE );
        }

    }

    private String getNomeFornecedor()
    {
        return cmbFornecedor.getSelectedItem().toString();
    }

    private String getClienteNif()
    {
        try
        {
            return fornecedorDao.findTbFornecedor( getIdFornecedor() ).getNif();
        }
        catch ( Exception e )
        {
            return "";
        }
    }

    public static void main( String[] args ) throws SQLException
    {
        new SolicitacaoComprasVisao( 15, BDConexao.getInstancia() ).show( true );
    }

    public void confiLabel()
    {

        lbCodigoProduto.setHorizontalAlignment( JLabel.RIGHT );
        lbCategoria.setHorizontalAlignment( JLabel.RIGHT );
        lbProduto.setHorizontalAlignment( JLabel.RIGHT );
        lbPreco.setHorizontalAlignment( JLabel.RIGHT );
        lbQuantidade.setHorizontalAlignment( JLabel.RIGHT );
        lbTotalPagar.setHorizontalAlignment( JLabel.RIGHT );
        lbValorEnregue.setHorizontalAlignment( JLabel.RIGHT );
        lbTroco.setHorizontalAlignment( JLabel.RIGHT );
        //lbCliente.setHorizontalAlignment(JLabel.RIGHT);
        lbQuantidadeStock.setHorizontalAlignment( JLabel.RIGHT );

    }

    public int getCodigoTipoProduto() throws SQLException
    {
        return conexao.getCodigoPublico( "tb_tipo_produto", String.valueOf( cmbCategoria.getSelectedItem() ) );
    }

    public static int getCodigoProduto()
    {
        //return conexao.getCodigoPublico("tb_produto", String.valueOf(  cmbProduto.getSelectedItem()));   
        return produtoDao.getProdutoByDescricao( cmbProduto.getSelectedItem().toString() ).getCodigo();

    }

    public static boolean estado_critico() throws SQLException
    {
        TbStock stock = stockDao.getStockByDescricao( getCodigoProduto(), getCodigoArmazem() );
        double qtd_minima = stock.getQuantBaixa(),
                qtd_existente = stock.getQuantidadeExistente(),
                qtd_critica = stock.getQuantCritica();

//           return conexao.getQuantidade_minima_publico(getCodigoProduto(), getCodigoArmazem() ) < conexao.getQuantidade_Existente_Publico( getCodigoProduto(), getCodigoArmazem()  ) 
//                   && conexao.getQuantidade_Existente_Publico( getCodigoProduto(), getCodigoArmazem()  )  <= conexao.getQuantidade_critica_public( getCodigoProduto(), getCodigoArmazem() );
//   
        return qtd_minima < qtd_existente
                && qtd_existente <= qtd_critica;

    }

    public static boolean possivel_quantidade() throws SQLException
    {

        double quant_possivel = conexao.getQuantidade_Existente_Publico( getCodigoProduto(), getCodigoArmazem() ) - conexao.getQuantidade_minima_publico( getCodigoProduto(), getCodigoArmazem() );
        //int quant_possivel = stock.getQuantidadeExistente() -  stock.getQuantBaixa();

        return quant_possivel >= getQuantidade();

    }

    public static boolean isStocavel( String status )
    {
        try
        {
            if ( status.equals( "true" ) )
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        catch ( Exception e )
        {
            return true;
        }

    }

    //devolve o codigo_barra de uma determinada tabela
    public double getPrecoProduto( int codProduto, boolean stocavel )
    {

        String sql = "";

        if ( stocavel )
        {
            sql = "SELECT preco_venda FROM tb_stock WHERE( cod_produto_codigo = " + codProduto + " AND cod_armazem = " + getCodigoArmazem() + ")";
        }
        else
        {
            sql = "SELECT preco FROM tb_produto WHERE( codigo = " + codProduto + ")";
            JOptionPane.showMessageDialog( null, "O produto provavelmente nap estocavel!..." );
        }
        ResultSet rs = conexao.executeQuery( sql );

        try
        {
            if ( rs.next() )
            {
                if ( stocavel )
                {
                    return rs.getDouble( "preco_venda" );
                }
                else
                {
                    return rs.getDouble( "preco" );
                }
            }
        }
        catch ( SQLException ex )
        {
            return 0;
        }

        return 0;
    }

    public boolean setCredito()
    {
        //return rbCredito.isSelected();
        return false;
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">    
    private void init()
    {

        vasilhameDao = new VasilhameDao( emf );
        descontoDao = new DescontoDao( emf );
        precoDao = new PrecoDao( emf );
        produtoDao = new ProdutoDao( emf );
        stockDao = new StockDao( emf );
        usuarioDao = new UsuarioDao( emf );
        fornecedorDao = new FornecedorDao( emf );
        comprasDao = new ComprasDao( emf );
        armazemDao = new ArmazemDao( emf );
        itemComprasDao = new ItemComprasDao( emf );
        tipoProdutoDao = new TipoProdutoDao( emf );
//        bancoDao = new BancoDao( emf );
        anoEconomicoDao = new AnoEconomicoDao( emf );
        documentoDao = new DocumentoDao( emf );
        moedaDao = new MoedaDao( emf );
        cambioDao = new CambioDao( emf );
        produtoImpostoDao = new ProdutoImpostoDao( emf );
        produtoIsentoDao = new ProdutoIsentoDao( emf );
        //txtDesconto.setText("0");
        txtQuatindade.setDocument( new PermitirNumeros() );
        txtCodigoProduto.setDocument( new PermitirNumeros() );
        txtCodigoBarra.setDocument( new PermitirNumeros() );
        lbValorPorExtenco.setText( "" );
        mostrar_nome();
        cmbArmazem.setModel( new DefaultComboBoxModel( armazemDao.buscaTodos1() ) );
        cmbCategoria.setModel( new DefaultComboBoxModel( tipoProdutoDao.getAllCategoria() ) );
        cmbProduto.setModel( new DefaultComboBoxModel( produtoDao.getAllDesingnacaoProduto() ) );
//        cmbFormaPagamento.setModel(new DefaultComboBoxModel((Vector) bancoDao.buscaTodos()));
        cmbMoeda.setModel( new DefaultComboBoxModel( ( Vector ) moedaDao.buscaTodos() ) );
        //FILIPE TUZA - FORÇAR SELECIONAR UMA MOEDA PADRÃO
        cmbMoeda.setSelectedIndex( 1 );
        cmbFornecedor.setModel( new DefaultComboBoxModel( conexao.getElementos( "tb_cliente", "nome", false ) ) );
        cmbFornecedor.setSelectedItem( DVML._CLIENTE_CONSUMIDOR_FINAL );
        cmbTipoDocumento.setModel( new DefaultComboBoxModel( ( Vector ) documentoDao.buscaTodosSolicitacoesCompras() ) );
        txtQuatindade.setText( "1" );
        txtCodigoBarra.requestFocus();
//        txtClienteNome.requestFocus ();
        dc_data_documento.setDate( new Date() );
        //desactivar_campos();
        mostrar_ano_economico_serie();
        lb_proximo_documento.setText( "" );

        txtTotal_AOA_liquido.setText( CfMethods.formatarComoMoeda( 0.0 ) );
//        sp_valor_entregue.addKeyListener(new TratarEventoValorEntregue());
//        sp_valor_entregue.addKeyListener(new TratarTroco());

        reset_valor_entregue();
        reset_desconto_global();
//        txtClienteNome.setVisible ( false );
        cmbTipoDocumento.setSelectedIndex( 1 );
    }// </editor-fold>   

    private void mostrar_ano_economico_serie()
    {
        this.anoEconomico = anoEconomicoDao.getLastObject();
        lb_ano_academico.setText( "ANO ECONÔMICO: " + this.anoEconomico.getSerie() );

    }

    private void mostrar_proximo_codigo_documento()
    {
        try
        {
            this.documento = documentoDao.findDocumento( getIdDocumento() );
            this.doc_prox_cod = documento.getCodUltimoDoc() + 1;
            prox_doc = documento.getAbreviacao();
            //FA Série / codigo
            prox_doc += " " + this.anoEconomico.getSerie() + "/" + this.doc_prox_cod;
            lb_proximo_documento.setText( "PRÓXIMO DOC. :" + prox_doc );
        }
        catch ( Exception e )
        {
            this.documento = null;
            lb_proximo_documento.setText( "" );
        }
    }

    private void mostrar_abreviacao_moeda_cambio()
    {
        try
        {
            this.moeda = moedaDao.findMoeda( getIdMoeda() );
            this.cambio = cambioDao.getLastObject( getIdMoeda() );
            lb_cambio.setText( "CAMBIO: " + String.valueOf( this.cambio.getValor() ) + " " + this.moeda.getAbreviacao() );

        }
        catch ( Exception e )
        {
            this.cambio = null;
            e.printStackTrace();
            lb_cambio.setText( "" );
        }
    }

    private static double getTaxaImposto( int idProduto )
    {
        return produtoImpostoDao.getTaxaByIdProduto( idProduto );
    }

    private static String getMotivoIsensao( int idProduto )
    {
        return produtoIsentoDao.getRegimeIsensaoByIdProduto( idProduto );
    }

    private static double getValorComIVA( double qtd, double taxa, double preco_venda, double desconto )
    {
        double subtotal_linha = ( preco_venda * qtd );
        double desconto_valor = ( subtotal_linha * ( desconto / 100 ) );
        double valor_iva = 1 + ( taxa / 100 );//
        return ( ( subtotal_linha - desconto_valor ) * valor_iva );

    }

    private static double getIVA( int qtd, double taxa, double preco_venda, double desconto )
    {
        double subtotal_linha = ( preco_venda * qtd );
        double valor_iva = ( taxa / 100 );//
        return ( ( subtotal_linha - desconto ) * valor_iva );

    }

    private void actualizar_cod_doc()
    {
        this.documento.setCodUltimoDoc( this.doc_prox_cod );
        this.documento.setDescricaoUltimoDoc( this.prox_doc );
        this.documento.setUltimaData( dc_data_documento.getDate() );
        try
        {
            documentoDao.edit( documento );
        }
        catch ( Exception e )
        {
            System.err.println( "Falha ao actualizar o documento" );
        }
    }

    private void setWindowsListener()
    {

        this.addWindowListener( new WindowAdapter()
        {
            @Override
            public void windowActivated( WindowEvent e )
            {
                mostrar_proximo_codigo_documento();
            }

        } );

    }

    private void actualizar_abreviacao()
    {

        switch ( getIdDocumento() )
        {

            case DVML.DOC_RECIBO_SO:
                this.abreviacao = Abreviacao.SO;
                break;
            default:
                break;
        }

    }

    private void desabilitar_campos()
    {

//        boolean proformaNaoSelecionado = !(DVML.DOC_FACTURA_PROFORMA_PP == getIdDocumento());
        lbValorEnregue.setVisible( false );
        sp_valor_entregue.setVisible( false );
        lbTroco.setVisible( false );
        txtTroco.setVisible( false );
//        lbFormaPagamento.setVisible(false);
//        cmbFormaPagamento.setVisible(false);

//        ck_A4.setSelected( false );
        ck_simplificada.setSelected( false );
//        ck_A4.setSelected(true);
        ck_A4.setSelected( true );

//\
//        boolean proformaNaoSelecionado = !(DVML.DOC_FACTURA_PROFORMA_PP == getIdDocumento());
//
//        lbValorEnregue.setVisible(proformaNaoSelecionado);
//        sp_valor_entregue.setVisible(proformaNaoSelecionado);
//        lbTroco.setVisible(proformaNaoSelecionado);
//        txtTroco.setVisible(proformaNaoSelecionado);
//        lbFormaPagamento.setVisible(proformaNaoSelecionado);
//        cmbFormaPagamento.setVisible(proformaNaoSelecionado);
//
////        ck_A4.setSelected( false );
//        ck_simplificada.setSelected( true );
////        ck_A4.setSelected(true);
//        ck_simplificada.setSelected(false);
//
//        txtTroco.setText(CfMethods.formatarComoMoeda(0.0));
//
//        boolean documentoIsFA = DVML.DOC_FACTURA_FT == getIdDocumento();
//        boolean documentoIsPP = DVML.DOC_FACTURA_PROFORMA_PP == getIdDocumento();
//        System.err.println("documentoIsFA: " + documentoIsFA);
//        System.err.println("documentoIsPP: " + documentoIsPP);
//        lbValorEnregue.setVisible(!documentoIsFA && !documentoIsPP);
//        sp_valor_entregue.setVisible(lbValorEnregue.isVisible());
//        lbTroco.setVisible(lbValorEnregue.isVisible());
//        txtTroco.setVisible(lbValorEnregue.isVisible());
    }

    private static Moeda getMoeda()
    {
        String moedaSelecionada = ( String ) cmbMoeda.getSelectedItem();

        if ( moedaSelecionada == null )
        {
            return null;
        }

        return new MoedaDao( emf ).getByDescricao( moedaSelecionada );
    }

    private void refresh_table()
    {

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();

        double preco = 0, desconto = 0, sub_total_linha = 0, sub_total_linha_com_iva = 0, taxa = 0;
        int idProduto, qtd;

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {

            try
            {

                /**
                 * Recupera os valores da tabela
                 */
                idProduto = Integer.parseInt( modelo.getValueAt( i, 0 ).toString() );
                qtd = Integer.parseInt( modelo.getValueAt( i, 4 ).toString() );
                taxa = Double.parseDouble( modelo.getValueAt( i, 6 ).toString() );
                //desconto_percentagem = Double.parseDouble( modelo.getValueAt( i, 4 ).toString() );

                //busca o preço em função do câmbio
                preco = getPreco( idProduto, qtd );

                /**
                 * Processa os valores para serem actualizados na tabela
                 */
                desconto = getDesconto_produto( preco, qtd );

                sub_total_linha = ( preco * qtd ) - desconto;
                sub_total_linha_com_iva = getValorComIVA( qtd, getTaxaImposto( idProduto ), preco, desconto );

                /**
                 * actualiza os valores na tabela
                 */
                modelo.setValueAt( CfMethods.formatarComoMoeda( preco ), i, 3 );
                modelo.setValueAt( CfMethods.formatarComoMoeda( desconto ), i, 5 );
                modelo.setValueAt( CfMethods.formatarComoMoeda( sub_total_linha ), i, 7 );
                modelo.setValueAt( CfMethods.formatarComoMoeda( sub_total_linha_com_iva ), i, 8 );

            }
            catch ( Exception e )
            {
                e.printStackTrace();
            }

        }

        setTotalPagar();
        calculaTotalIVA();
        valor_por_extenco();

    }

    private void refresh_table( int idMoeda )
    {

        Moeda moeda_local = moedaDao.findMoeda( idMoeda );
        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();

        double preco = 0, desconto = 0, sub_total_linha = 0, sub_total_linha_com_iva = 0, taxa = 0;
        int idProduto, qtd;

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {

            try
            {

                /**
                 * Recupera os valores da tabela
                 */
                idProduto = Integer.parseInt( modelo.getValueAt( i, 0 ).toString() );
                qtd = Integer.parseInt( modelo.getValueAt( i, 4 ).toString() );
                taxa = Double.parseDouble( modelo.getValueAt( i, 6 ).toString() );

                //busca o preço em função do câmbio em funcção da moeda
                preco = getPreco( idProduto, qtd, idMoeda );

                /**
                 * Processa os valores para serem actualizados na tabela
                 */
                desconto = getDesconto_produto( preco, qtd );
                sub_total_linha = ( preco * qtd ) - desconto;
                sub_total_linha_com_iva = getValorComIVA( qtd, getTaxaImposto( idProduto ), preco, desconto );

                /**
                 * actualiza os valores na tabela
                 */
                modelo.setValueAt( CfMethods.formatarComoMoeda( preco ), i, 3 );
                modelo.setValueAt( CfMethods.formatarComoMoeda( desconto ), i, 5 );
                modelo.setValueAt( CfMethods.formatarComoMoeda( sub_total_linha ), i, 7 );
                modelo.setValueAt( CfMethods.formatarComoMoeda( sub_total_linha_com_iva ), i, 8 );

            }
            catch ( Exception e )
            {
                e.printStackTrace();
            }

        }

        setTotalPagar();
        calculaTotalIVA();
        valor_por_extenco( moeda_local );

    }

    private double getValorTotalDescontoLinha()
    {

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();

        double desconto_linha = 0;

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            desconto_linha += CfMethods.parseMoedaFormatada( modelo.getValueAt( i, 5 ).toString() );
        }
        return desconto_linha;

    }

    private void actualizar_moeda()
    {
        CfMethods.MOEDA = getMoeda().getAbreviacao();
        mostrar_abreviacao_moeda_cambio();
        refresh_table();
    }

    private void actualizar_moeda( String moeda )
    {
        CfMethods.MOEDA = moeda;
        mostrar_abreviacao_moeda_cambio();
        refresh_table( 1 );
    }

    /**
     * @author: Engº. Domingos Dala Vunge
     * @nomefunção: data_documento_superior_ao_ultimo_doc
     * @datacriação: 2020/02/14 04:33:43
     * @dataactualização: 2020/02/17 04:33:43
     * @descrição: Verifica se a data do documento é inferior ao último
     * documento da mesma série, retorna verdadeiro se é inferior caso contrário
     * falso
     * @return
     */
    private boolean data_documento_superior_ou_igual_ao_ultimo_doc()
    {
        //buscando o id do documento.
        int pk_documento = getIdDocumento();

        //busca o último documento da série em questão.
        Integer cod_ultima_venda = comprasDao.getLastSolicitacao( pk_documento );
        if ( cod_ultima_venda != 0 )
        {

            //busca o objecto para retirar apenas a data do seu procesamento
            Compras venda_local = comprasDao.findCompras( cod_ultima_venda );
            //retirando a data do documebto
            Date data_ultimo_documento = venda_local.getDataCompra();
            //pegando a data do documento (data actual do sistema)
            Date data_actual = dc_data_documento.getDate();
            return MetodosUtil.maior_data_1_data_2( data_actual, data_ultimo_documento )
                    || MetodosUtil.igual_data_1_data_2( data_actual, data_ultimo_documento );

        }
        else
        {
            return true;
        }

    }

    /**
     * @author: Engº. Domingos Dala Vunge
     * @nomefunção: data_documento_superior_data_actual
     * @data: 2020/02/14 04:45:43
     * @descrição: Verifica se a data do documento é superior ao actual, retorna
     * verdadeiro se é inferior caso contrário falso
     */
    private void data_documento_superior_data_actual()
    {

        //retirando a data do documebto
        Date data_documento = dc_data_documento.getDate();
        //pegando a data actual do sistema 
        Date data_sistema = new Date();
        //comparar as datas
        if ( MetodosUtil.maior_data_1_data_2( data_documento, data_sistema ) )
        {
            JOptionPane.showMessageDialog( null, "Após essa emissão, não poderá ser emitido um novo documento\n "
                    + "com a data actual ou anterior, dentro da mesma série.",
                    "AVISO", JOptionPane.WARNING_MESSAGE );

            this.aviso_continuar_documento = JOptionPane.showConfirmDialog( null, "Ainda assim deseja continuar com a operação ?" )
                    == JOptionPane.YES_OPTION;

        }
        else
        {
            this.aviso_continuar_documento = true;
        }

    }

    private List<TbProduto> getProdutosIsentos()
    {
        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        double taxa = 0.0;
        int codigo_produto = 0;
        List<TbProduto> lista_produtos_isentos = new ArrayList<>();
        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            codigo_produto = Integer.parseInt( modelo.getValueAt( i, 0 ).toString() );
            taxa = Double.parseDouble( modelo.getValueAt( i, 6 ).toString() );
            if ( taxa == 0.0 )
            {
                lista_produtos_isentos.add( produtoDao.findTbProduto( codigo_produto ) );
            }
        }

        return lista_produtos_isentos;

    }

    private void reset_desconto_global()
    {
        sp_valor_desconto_financeiro.setModel( CfMethodsSwing.criarSpinnerDoubleModel( 0.0, 10000000000.00, 0.0 ) );
    }

    private static void reset_valor_entregue()
    {
        sp_valor_entregue.setModel( CfMethodsSwing.criarSpinnerDoubleModel( 0.0, 10000000000.00, 0.0 ) );
    }

    private static double getTotalIncidencia()
    {
        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        int qtd = 0;
        double incidencia = 0d, preco_unitario = 0d, desconto_valor_linha = 0;

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            preco_unitario = CfMethods.parseMoedaFormatada( modelo.getValueAt( i, 3 ).toString() );
            qtd = Integer.parseInt( modelo.getValueAt( i, 4 ).toString() );
            double valor_percentagem = Double.parseDouble( modelo.getValueAt( i, 5 ).toString() );
            double taxa = Double.parseDouble( modelo.getValueAt( i, 6 ).toString() );
            // a incidência só é aplicável ao produtos sujeitos a iva 
            if ( taxa != 0 )
            {
                desconto_valor_linha = ( ( valor_percentagem ) / 100 );
                double valor_unitario = ( preco_unitario * qtd );
                incidencia += ( ( valor_unitario ) - ( valor_unitario * desconto_valor_linha ) );

            }

        }

        return incidencia;
    }

    private static double getTotalImposto()
    {
        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        int qtd = 0;
        double imposto = 0d, preco_unitario = 0d, desconto_valor_linha = 0;

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            preco_unitario = CfMethods.parseMoedaFormatada( modelo.getValueAt( i, 3 ).toString() );
            qtd = Integer.parseInt( modelo.getValueAt( i, 4 ).toString() );
            double valor_percentagem = Double.parseDouble( modelo.getValueAt( i, 5 ).toString() );
            double taxa = Double.parseDouble( modelo.getValueAt( i, 6 ).toString() );
            // a incidência só é aplicável ao produtos sujeitos a iva 
            if ( taxa != 0 )
            {
                double valor_unitario = ( preco_unitario * qtd );
                desconto_valor_linha = valor_unitario * ( ( valor_percentagem ) / 100 );
                imposto += ( ( valor_unitario - desconto_valor_linha ) * ( taxa / 100 ) );

            }

        }

        return imposto;
    }

    private static double getTotalIncidenciaIsento()
    {
        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        int qtd = 0;
        double incidencia_isento = 0d, preco_unitario = 0d, desconto_valor_linha = 0;

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            preco_unitario = CfMethods.parseMoedaFormatada( modelo.getValueAt( i, 3 ).toString() );
            qtd = Integer.parseInt( modelo.getValueAt( i, 4 ).toString() );
            double valor_percentagem = Double.parseDouble( modelo.getValueAt( i, 5 ).toString() );
            double taxa = Double.parseDouble( modelo.getValueAt( i, 6 ).toString() );
            // a incidência também é aplicável à produtos isentos do iva 
            if ( taxa == 0 )
            {
                desconto_valor_linha = ( ( valor_percentagem ) / 100 );
                double valor_unitario = ( preco_unitario * qtd );
                incidencia_isento += ( ( valor_unitario ) - ( valor_unitario * desconto_valor_linha ) );

            }

        }

        return incidencia_isento;
    }

    private static double getDescontoComercial()
    {
        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        int qtd = 0;
        double desconto_comercial = 0d, preco_unitario = 0d, desconto_valor_linha = 0d;

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            preco_unitario = CfMethods.parseMoedaFormatada( modelo.getValueAt( i, 3 ).toString() );
            qtd = Integer.parseInt( modelo.getValueAt( i, 4 ).toString() );
            double valor_percentagem = Double.parseDouble( modelo.getValueAt( i, 5 ).toString() );
            desconto_valor_linha = ( ( valor_percentagem ) / 100 );
            double valor_unitario = ( preco_unitario * qtd );
            desconto_comercial += ( valor_unitario * desconto_valor_linha );

        }

        return desconto_comercial;
    }

    private static double getTotalIliquido()
    {
        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        int qtd = 0;
        double total_iliquido = 0, preco_unitario = 0;

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            preco_unitario = CfMethods.parseMoedaFormatada( modelo.getValueAt( i, 3 ).toString() );
            qtd = Integer.parseInt( modelo.getValueAt( i, 4 ).toString() );
            total_iliquido += ( preco_unitario * qtd );

        }

        return total_iliquido;
    }

    private static double getDescontoFinanceiro()
    {
        double desconto_economico = 0d;
        desconto_economico = Double.parseDouble( sp_valor_desconto_financeiro.getValue().toString() );
        return desconto_economico;
    }

    private static double getTotalAOALiquido()
    {
        double valores = ( getTotalIliquido() + getTotalImposto() );
        double descontos = ( getDescontoComercial() + getDescontoFinanceiro() );
        System.out.println( "TotalIliquido: " + getTotalIliquido() );
        System.out.println( "TotalImposto: " + getTotalImposto() );
        System.out.println( "TotalDescontoComercial: " + getDescontoComercial() );
        System.out.println( "TotalDescontoFinanceiro: " + getDescontoFinanceiro() );
        System.out.println( "Total Liquido: " + ( valores - descontos ) );
        return ( valores - descontos );
    }

    private static double getTotalVendaIVASemIncluirDesconto()
    {
        double taxa = 0, total_iva_local = 0, preco_unitario = 0, sub_total_iliquido = 0;
        int qtd = 0;

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            preco_unitario = CfMethods.parseMoedaFormatada( modelo.getValueAt( i, 3 ).toString() );
            qtd = Integer.parseInt( modelo.getValueAt( i, 4 ).toString() );
            sub_total_iliquido = ( preco_unitario * qtd );
            taxa = Double.parseDouble( modelo.getValueAt( i, 6 ).toString() );
            total_iva_local += ( ( ( sub_total_iliquido ) * ( taxa / 100 ) ) );
        }

        return total_iva_local;
    }

    private double getGrossTotal()
    {
        System.out.println( "TOTALILIQUIDO: " + getTotalVendaIVASemIncluirDesconto() );
        System.out.println( "TOTALVENDAIVASEMDESCONTO: " + getTotalVendaIVASemIncluirDesconto() );
        return getTotalIliquido() + getTotalVendaIVASemIncluirDesconto();
    }

    private String iniciais_extenso()
    {
        Documento documento_local = documentoDao.findDocumento( getIdDocumento() );
        String abreviacao_local = documento_local.getAbreviacao();

        switch ( abreviacao_local )
        {
            case "FT":
                return "Facturamos o valor de: ";
            case "FR":
                return "Recebemos a quantia de: ";
            default:
                return "São: ";
        }
    }

}
