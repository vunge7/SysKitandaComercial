/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package visao;


import java.sql.Connection;
import controller.ItemVendaController;
import controller.StockController;
import controller.TipoClienteController;
import controller.VendaController;
import dao.AnoEconomicoDao;
import dao.ArmazemDao;
import dao.BancoDao;
import dao.CambioDao;
import dao.ClienteDao;
import dao.DescontoDao;
import dao.DocumentoDao;
import dao.ItemVendaDao;
import dao.MoedaDao;
import dao.PrecoDao;
import dao.ProdutoDao;
import dao.ProdutoImpostoDao;
import dao.ProdutoIsentoDao;
import dao.StockDao;
import dao.TipoProdutoDao;
import dao.UsuarioDao;
import dao.VasilhameDao;
import dao.VendaDao;
import entity.AnoEconomico;
import entity.Cambio;
import entity.Documento;
import entity.TbItemVenda;
import entity.Moeda;
import entity.TbDesconto;
import entity.TbPreco;
import entity.TbStock;
import entity.TbUsuario;
import entity.TbVasilhame;
import entity.TbVenda;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import kitanda.util.CfMethods;
import kitanda.util.CfMethodsSwing;
import lista.ListaVenda1;
import modelo.ClienteModelo;
import modelo.ItemVendaModelo;
import modelo.ProdutoModelo;
import modelo.StockModelo;
import modelo.TipoClienteModelo;
import modelo.VendaModelo;
import util.BDConexao;
import util.DVML;
import util.DVML.Abreviacao;
import static util.DVML.DOC_FACTURA_RECIBO_FR;
import static util.DVML.DOC_GUIA_TRANSPORTE_GT;
import util.JPAEntityMannagerFactoryUtil;
import util.MetodosUtil;
import static util.MetodosUtil.esvaziar_tabela;

/**
 *
 * @author Domingos Dala Vunge
 */
public class GuiaTransporteVisao extends javax.swing.JFrame implements Runnable
{

    private EntityManagerFactory emf = JPAEntityMannagerFactoryUtil.em;
    private static DescontoDao descontoDao;
    private static PrecoDao precoDao;
    private TbItemVenda itemVenda;
    private TbVenda venda;
    public static ProdutoDao produtoDao;
    private static StockDao stockDao;
    private UsuarioDao usuarioDao;
    private DocumentoDao documentoDao;
    private static ClienteDao clienteDao;
    private static VendaDao vendaDao;
    private static MoedaDao moedaDao;
    private AnoEconomicoDao anoEconomicoDao;
    private static ArmazemDao armazemDao;
    private ItemVendaDao itemVendaDao;
    private TbVasilhame vasilhame;
    private Moeda moeda;
    private AnoEconomico anoEconomico;
    private static BDConexao conexao;
    private StockModelo stockModelo;
    private TipoClienteController tipoClienteController;
    private VendaController vendaController;
    private ItemVendaController itemVendaController;
    private ItemVendaModelo itemVendaModelo;
    private VendaModelo vendaModelo;
    private ClienteModelo clienteModelo;
    private static CambioDao cambioDao;
    private Documento documento;
    private BancoDao bancoDao = new BancoDao( emf );
//    private CambioDao cambioDao = new CambioDao(emf);
    private static ProdutoImpostoDao produtoImpostoDao;
    private Cambio cambio;
    private TipoProdutoDao tipoProdutoDao;
    private int cod_usuario;
    private TipoClienteModelo tipoClienteModelo;
    private StockController stockController;
    private int linha = 0, coordenada = 1, doc_prox_cod = 0;

    private static ProdutoIsentoDao produtoIsentoDao;
    private static int linha_actual = -1;

    private Abreviacao abreviacao;

    private Thread t;
    private String prox_doc;
    private EntityTransaction transaction;

    public GuiaTransporteVisao( int cod_usuario, BDConexao conexao ) throws SQLException
    {

        initComponents();
        txtRefDoc.setVisible( true );
        confiLabel();
        setLocationRelativeTo( null );
        setResizable( false );
        this.cod_usuario = cod_usuario;
        this.conexao = conexao;
        setWindowsListener();
        init();
        txtRefDoc.requestFocus();
        setCombos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenuItem1 = new javax.swing.JMenuItem();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        cmbCliente = new javax.swing.JComboBox();
        lbCliente = new javax.swing.JLabel();
        txtClienteNome = new javax.swing.JTextField();
        lbCliente1 = new javax.swing.JLabel();
        lbCliente2 = new javax.swing.JLabel();
        txtLocalCarga = new javax.swing.JTextField();
        txtLocalDescarga = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        lb_usuario = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        lb_proximo_documento = new javax.swing.JLabel();
        cmbTipoDocumento = new javax.swing.JComboBox();
        lbPreco1 = new javax.swing.JLabel();
        cmbArmazem = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        lb_ano_academico = new javax.swing.JLabel();
        txtRefDoc = new javax.swing.JTextField();
        lb_ano_academico1 = new javax.swing.JLabel();
        lb_usuario1 = new javax.swing.JLabel();
        cmbDoc = new javax.swing.JComboBox<>();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("...:::::  KITANDA - NOTA DE LEVANTAMENTO ::::...");

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel1.setFont(new java.awt.Font("Showcard Gothic", 0, 24)); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cmbCliente.setBackground(new java.awt.Color(4, 154, 3));
        cmbCliente.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        cmbCliente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCliente.setEnabled(false);
        cmbCliente.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmbClienteActionPerformed(evt);
            }
        });
        jPanel3.add(cmbCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 210, 40));

        lbCliente.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbCliente.setText("Local de Descarga:");
        jPanel3.add(lbCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 140, 40));

        txtClienteNome.setEditable(false);
        txtClienteNome.setBackground(new java.awt.Color(4, 154, 3));
        txtClienteNome.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtClienteNome.setForeground(new java.awt.Color(255, 255, 255));
        txtClienteNome.setCaretColor(new java.awt.Color(255, 255, 255));
        txtClienteNome.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txtClienteNomeActionPerformed(evt);
            }
        });
        jPanel3.add(txtClienteNome, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, 290, 40));

        lbCliente1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbCliente1.setText("Cliente:");
        jPanel3.add(lbCliente1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 60, 40));

        lbCliente2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbCliente2.setText("Local de Carga:");
        jPanel3.add(lbCliente2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 140, 40));

        txtLocalCarga.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txtLocalCargaActionPerformed(evt);
            }
        });
        jPanel3.add(txtLocalCarga, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 410, -1));

        txtLocalDescarga.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txtLocalDescargaActionPerformed(evt);
            }
        });
        jPanel3.add(txtLocalDescarga, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 120, 410, -1));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/impressora1.png"))); // NOI18N
        jButton1.setText("Processar");
        jButton1.setToolTipText("Efectuar Venda");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/LOGOUT - VERMELHO/Logout 32x32.png"))); // NOI18N
        btnCancelar.setAlignmentX(0.5F);
        btnCancelar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCancelarActionPerformed(evt);
            }
        });

        lb_usuario.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lb_usuario.setText("Conta:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lb_usuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lb_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        table.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Cod. Artigo", "Descrição", "Quantidade"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        table.setCellSelectionEnabled(true);
        table.setGridColor(new java.awt.Color(51, 153, 0));
        jScrollPane1.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (table.getColumnModel().getColumnCount() > 0)
        {
            table.getColumnModel().getColumn(0).setPreferredWidth(10);
            table.getColumnModel().getColumn(1).setPreferredWidth(250);
            table.getColumnModel().getColumn(2).setPreferredWidth(5);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lb_proximo_documento.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        lb_proximo_documento.setText("PRÓXIMO DOC. : XX PP/A1");

        cmbTipoDocumento.setBackground(new java.awt.Color(4, 154, 3));
        cmbTipoDocumento.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        cmbTipoDocumento.setEnabled(false);
        cmbTipoDocumento.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmbTipoDocumentoActionPerformed(evt);
            }
        });

        lbPreco1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbPreco1.setText("Armzém");

        cmbArmazem.setBackground(new java.awt.Color(4, 154, 3));
        cmbArmazem.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        cmbArmazem.setEnabled(false);
        cmbArmazem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmbArmazemActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Motorista: ");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel2.setText("Matricula: ");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel3.setText("Marca do Carro: ");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel4.setText("Cor do Carro: ");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel5.setText("BI/Carta: ");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5))
                        .addGap(68, 68, 68)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(cmbTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(lb_proximo_documento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbPreco1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(cmbArmazem, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lb_proximo_documento, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbTipoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbArmazem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPreco1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        lb_ano_academico.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        lb_ano_academico.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_ano_academico.setText("ANO ECONÔMICO");

        txtRefDoc.setBackground(new java.awt.Color(4, 154, 3));
        txtRefDoc.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        txtRefDoc.setForeground(new java.awt.Color(255, 255, 255));
        txtRefDoc.setCaretColor(new java.awt.Color(255, 255, 255));
        txtRefDoc.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txtRefDocActionPerformed(evt);
            }
        });

        lb_ano_academico1.setBackground(new java.awt.Color(4, 154, 3));
        lb_ano_academico1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        lb_ano_academico1.setForeground(new java.awt.Color(255, 255, 255));
        lb_ano_academico1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_ano_academico1.setText("NOTA DE LEVANTAMENTO");
        lb_ano_academico1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lb_ano_academico1.setOpaque(true);

        lb_usuario1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lb_usuario1.setText("Ref. Doc:");

        cmbDoc.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cmbDoc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbDoc.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmbDocActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 16, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lb_usuario1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtRefDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbDoc, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(88, 88, 88)
                        .addComponent(lb_ano_academico, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lb_ano_academico1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lb_ano_academico1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtRefDoc, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(lb_ano_academico))
                    .addComponent(lb_usuario1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbDoc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("...:::::  KITANDA - FACTURAÃO ::::...");

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void cmbArmazemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbArmazemActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_cmbArmazemActionPerformed

    private void cmbClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbClienteActionPerformed
        // TODO add your handling code here:
        accao_cliente();
    }//GEN-LAST:event_cmbClienteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        procedimento_converter();


    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmbTipoDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoDocumentoActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbTipoDocumentoActionPerformed

    private void txtRefDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRefDocActionPerformed
        // TODO add your handling code here:
        procedimento_busca();
    }//GEN-LAST:event_txtRefDocActionPerformed

    private void txtClienteNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClienteNomeActionPerformed
        // TODO add your handling code here:
        procedimento_converter();

    }//GEN-LAST:event_txtClienteNomeActionPerformed

    private void txtLocalCargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLocalCargaActionPerformed
        txtLocalDescarga.requestFocus();
    }//GEN-LAST:event_txtLocalCargaActionPerformed

    private void txtLocalDescargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLocalDescargaActionPerformed
        procedimento_converter();
    }//GEN-LAST:event_txtLocalDescargaActionPerformed

    private void cmbDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDocActionPerformed
        mostrar_facturas();
        procedimento_busca();
    }//GEN-LAST:event_cmbDocActionPerformed

    private void mostrar_facturas()
    {
        try
        {
            String ref_doc = cmbDoc.getSelectedItem().toString();
            TbVenda venda = vendaDao.findByCodFactura( ref_doc );
            txtRefDoc.setText( venda.getCodFact() );
        }
        catch ( Exception e )
        {
            e.printStackTrace();
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    public static javax.swing.JComboBox cmbArmazem;
    public static javax.swing.JComboBox cmbCliente;
    private javax.swing.JComboBox<String> cmbDoc;
    public static javax.swing.JComboBox cmbTipoDocumento;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JLabel lbCliente;
    private javax.swing.JLabel lbCliente1;
    private javax.swing.JLabel lbCliente2;
    private javax.swing.JLabel lbPreco1;
    private javax.swing.JLabel lb_ano_academico;
    private javax.swing.JLabel lb_ano_academico1;
    private javax.swing.JLabel lb_proximo_documento;
    private javax.swing.JLabel lb_usuario;
    private javax.swing.JLabel lb_usuario1;
    public static javax.swing.JTable table;
    private javax.swing.JTextField txtClienteNome;
    private javax.swing.JTextField txtLocalCarga;
    private javax.swing.JTextField txtLocalDescarga;
    public static javax.swing.JTextField txtRefDoc;
    // End of variables declaration//GEN-END:variables

    //verifica se o produto existe na tabela do formulário visão isto é na jTable
    private static boolean exist_produto_tabela_formulario( int codigo )
    {

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            if ( Integer.parseInt( String.valueOf( table.getValueAt( i, 0 ) ) ) == codigo )
            {
                linha_actual = i;
                return true;
            }
        }
        return false;

    }

    //actualiza a quantidade na tabela do formulário visão isto é na jTable
    private static void actuazlizar_quantidade_tabela_formulario( String quantidade, double desconto )
    {
        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        double preco_venda = Double.parseDouble( String.valueOf( modelo.getValueAt( linha_actual, 2 ) ) );
        double total_item = preco_venda * Double.parseDouble( quantidade );
        total_item = total_item - desconto;
        modelo.setValueAt( quantidade, linha_actual, 3 );
        modelo.setValueAt( total_item, linha_actual, 5 );
        //a linha_actual recebe o default
        linha_actual = -1;

    }

    private void accao_cliente()
    {
        if ( cmbCliente.getSelectedItem().equals( "DIVERSOS" ) )
        {
            txtClienteNome.setVisible( true );
            txtClienteNome.requestFocus();
        }
        else
        {
            txtClienteNome.setVisible( false );
        }
    }

    private void calcularTotalComDesconto()
    {

        double totalComDesconto = 0;
        double resultado = 0;
        double percentagem_desconto = 0;
        double total_pagar = 0;
        totalComDesconto = ( total_pagar * percentagem_desconto ) / 100;
        resultado = total_pagar - totalComDesconto;
//        txtTotalApagar.setText(String.valueOf(MetodosUtil.retirar_dizimas(resultado)).trim());

    }

    private void calcularTotalSemDesconto()
    {

        double totalSemDesconto = 0;
        double resultado1 = 0;
        double percentagem_desconto = 0;
//        double total_pagar = Double.parseDouble(txtTotalApagar.getText().trim());

//        totalSemDesconto = total_pagar + (percentagem_desconto) / 100;
//        resultado1 = total_pagar + totalSemDesconto;
    }

    @Override
    public void run()
    {

    }

    public void actualizar_quantidade( double quantidade, TbStock stock )
    {

        double qtd = ( stock.getQuantidadeExistente() - quantidade );
        stock.setQuantidadeExistente( qtd );
        try
        {
            stockDao.edit( stock );
        }
        catch ( Exception e )
        {
            e.printStackTrace();
            System.err.println( "Falha ao actualizar a quantidade do produto no stock" );
        }

    }
//
//    private Integer getIdBanco() {
//        return bancoDao.getIdByDescricao(String.valueOf(cmbFormaPagamento.getSelectedItem()));
//    }

    private void mostrar_nome()
    {
        TbUsuario usuario = usuarioDao.findTbUsuario( this.cod_usuario );
        //caso masculino
        if ( usuario.getCodigoSexo().getCodigo() == 1 )
        {
            lb_usuario.setText( "Operador: " + usuario.getNome() );
        }
        else
        {
            lb_usuario.setText( "Operadora: " + usuario.getNome() );
        }
    }

    public void limpar()
    {

        txtClienteNome.setText( "DIVERSOS" );
        txtLocalCarga.setText( " " );
        txtLocalDescarga.setText( " " );
//        sp_valor_entregue.setValue(0.0);
//        txtTotalApagar.setText("0");
//        txtTroco.setText("0");
//        soma_total = 0;

    }

    public boolean campos_invalido_imprimir()
    {

        if ( txtClienteNome.getText().equals( "" ) || txtClienteNome.getText() == null )
        {
            txtClienteNome.requestFocus();
            JOptionPane.showMessageDialog( null, "Por favor digite o nome do cliente", "AVISO", JOptionPane.WARNING_MESSAGE );
            return true;
        }
        if ( txtLocalCarga.getText().equals( "" ) || txtLocalCarga.getText() == null )
        {
            txtLocalCarga.requestFocus();
            JOptionPane.showMessageDialog( null, "Por favor digite o local de carga", "AVISO", JOptionPane.WARNING_MESSAGE );
            return true;
        }
        if ( txtLocalDescarga.getText().equals( "" ) || txtLocalDescarga.getText() == null )
        {
            txtLocalDescarga.requestFocus();
            JOptionPane.showMessageDialog( null, "Por favor digite o local de descarga", "AVISO", JOptionPane.WARNING_MESSAGE );
            return true;
        }
//
//
//        if (cmbTipoDocumento == null) {
//            JOptionPane.showMessageDialog(null, "Por favor seleccione o Tipo de Documento", "AVISO", JOptionPane.WARNING_MESSAGE);
//            return true;
//        }

        return false;

    }

    public boolean possivel_quantidade( int cod_produto, double qtd )
    {

        //System.err.println(conexao.getQuantidade_Existente_Publico(getCodigoProduto(), getCodigoArmazem()));  
        //  TbStock stock =  stockDao.getStockByDescricao(getCodigoProduto(), getCodigoArmazem() );
        double quant_possivel = conexao.getQuantidade_Existente_Publico( cod_produto, getCodigoArmazem() ) - conexao.getQuantidade_minima_publico( cod_produto, getCodigoArmazem() );
        //int quant_possivel = stock.getQuantidadeExistente() -  stock.getQuantBaixa();

        return quant_possivel >= qtd;

    }

    public double getPreco( int cod_produto, int qtd )
    {

        try
        {
            // return  precoDao.findTbPreco( precoDao.getUltimoIdPrecoByIdProduto(  getCodigoProduto() )  ).getPrecoVenda();

            return precoDao.findTbPreco( precoDao.getUltimoIdPrecoByIdProduto( cod_produto, qtd ) ).getPrecoVenda().doubleValue();
        }
        catch ( Exception e )
        {
            return 0;
        }

    }

    public void procedimento_converter()
    {

        if ( !campos_invalido_imprimir() )
        {
            if ( !txtClienteNome.getText().equals( "" ) )
            {
                if ( true )
                {
                    System.out.println( "STATUS: a processar a guia de transporte" );
                    EntityManager em = JPAEntityMannagerFactoryUtil.createEntityManager();
                    transaction = em.getTransaction();
                    em.getTransaction().begin();
                    salvar_venda();
                    System.out.println( "STATUS: fim do processamento da guia de transporte" );
                }
            }
            else
            {
                txtClienteNome.requestFocus();
                JOptionPane.showMessageDialog( null, "Pf. Digite o Nome do Cliente!...", "AVISO", JOptionPane.WARNING_MESSAGE );
            }
        }
    }

    /* CRIACAO DO GETS  */
    public static int getIdCliente()
    {
        try
        {
            String ref_doc = txtRefDoc.getText();
            TbVenda venda = vendaDao.findByCodFact( ref_doc, DVML.DOC_FACTURA_RECIBO_FR );
            return venda.getCodigoCliente().getCodigo();
        }
        catch ( Exception e )
        {
            return 0;
        }

    }

    public int getIdDocumento()
    {
        try
        {

            return DOC_GUIA_TRANSPORTE_GT;

        }
        catch ( Exception e )
        {
            return 0;
        }
    }

    private void setCombos()
    {

        cmbDoc.setModel( new DefaultComboBoxModel( ( Vector ) vendaDao.buscaTodasFactExceptoAlgumas() ) );

    }

    private void procedimento_busca()
    {
        /**
         * @1. inserir a referência;
         * @1.1 Se o campo estiver vazio emitir a mensagem: "por favor insira a
         * refrência da pró-forma"
         * @2. buscar a venda relacionada com esta referência desde que o
         * documento seja do tipo factura ou factura/recibo;
         * @2.1 Senão existe emitir uma mensagem: "Não existe este documento
         * referência"
         * @3. percorrer e preencher os campos do formulário;
         * @4. setar cliente
         */

        //@1. Inserir a referência
        String ref_doc = cmbDoc.getSelectedItem().toString();
//        String ref_doc = txtRefDoc.getText();
        if ( !ref_doc.equals( "" ) )
        {
            //@2. buscar a venda relacionada com esta referência desde que o documento seja factura ou factura/recibo;
            TbVenda venda = vendaDao.findByCodFact( txtRefDoc.getText() );
//            TbVenda venda = vendaDao.findByCodFact(ref_doc, Integer.parseInt(String.valueOf(cmbDoc.getSelectedItem().toString())));
            venda.setRefCodFact( ( String ) cmbDoc.getSelectedItem() );
            if ( venda != null )
            {

                /*@3. percorrer e preencher os campos do formulário;*/
                //3.1 preeenche o tipo documento
                cmbTipoDocumento.setSelectedItem( venda.getFkDocumento().getDesignacao() );

                //3.2 preenche o armazém
                cmbArmazem.setSelectedItem( venda.getIdArmazemFK().getDesignacao() );

                //3.4 preencher a tabela com os itens
                List<TbItemVenda> linhas = venda.getTbItemVendaList();
                DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
                //3.4.1 limpa a tabela
                modelo.setRowCount( 0 );
                for ( TbItemVenda object : linhas )
                {
                    modelo.addRow( new Object[]
                    {
                        object.getCodigoProduto().getCodigo(),
                        object.getCodigoProduto().getDesignacao(),
                        object.getQuantidade()

                    } );
                }

                //@4.setar o total
//                txtTotalApagar.setText(CfMethods.formatarComoMoeda(venda.getTotalGeral()));
                //@5.setar o cliente
                txtClienteNome.setText( venda.getNomeCliente() );

            }
            else
            {
                procedimento_limpar_dados();
                JOptionPane.showMessageDialog( null, "Não existe documento com esta referência", "AVISO", JOptionPane.WARNING_MESSAGE );
            }

        }
        else
        {
            JOptionPane.showMessageDialog( null, "por favor insira a refrência do documento", "AVISO", JOptionPane.WARNING_MESSAGE );
        }

    }

    private void reset_combo()
    {
        cmbTipoDocumento.setSelectedIndex( 0 );
        cmbArmazem.setSelectedIndex( 0 );

    }

    private void procedimento_limpar_dados()
    {
        limpar();
        esvaziar_tabela( table );
        reset_combo();
    }

    //----------- evento do teclado ---------------------------------------
    class TratarEventoCliente implements KeyListener
    {

        String prefixo = "";
        int codigo = 0, codigo_categoria = 0, quatidade_produto = 0;

        public void keyPressed( KeyEvent evt )
        {

            if ( evt.getKeyCode() == KeyEvent.VK_ENTER )
            {

                try
                {

                    procedimento_converter();

                }
                catch ( Exception ex )
                {
                    Logger.getLogger( GuiaTransporteVisao.class.getName() ).log( Level.SEVERE, null, ex );
                }

            }
        }

        public void keyReleased( KeyEvent evt )
        {
        }

        public void keyTyped( KeyEvent evt )
        {
        }
    }

    public String getDataActual()
    {
        Calendar calendario = Calendar.getInstance();

        //buscar data
        int dia = calendario.get( Calendar.DAY_OF_MONTH );
        int mes = calendario.get( Calendar.MONTH );
        int ano = calendario.get( Calendar.YEAR );

        int hora = calendario.get( Calendar.HOUR_OF_DAY );
        int minuto = calendario.get( Calendar.MINUTE );
        int segundo = calendario.get( Calendar.SECOND );
        String data = ano + "-" + ( mes + 1 ) + "-" + dia + " " + hora + ":" + minuto + ":" + segundo;

        return data;

    }

    public void salvarItemvenda()
    {

        int cod_venda = vendaDao.getLastVenda();
        boolean efectuada = true;
        this.venda = vendaDao.findTbVenda( cod_venda );

        for ( int i = 0; i < table.getRowCount(); i++ )
        {
            try
            {

                itemVenda = new TbItemVenda();
                itemVenda.setCodigoProduto( produtoDao.findTbProduto( Integer.parseInt( String.valueOf( table.getModel().getValueAt( i, 0 ) ) ) ) );
                itemVenda.setCodigoVenda( this.venda );
                itemVenda.setQuantidade( Double.parseDouble( String.valueOf( table.getModel().getValueAt( i, 2 ) ) ) );
//                itemVenda.setFkPreco( precoDao.getUltimoIdPrecoByIdProduto( itemVenda.getCodigoProduto().getCodigo(), itemVenda.getQuantidade()));
                itemVenda.setFkPreco( new TbPreco( precoDao.getUltimoIdPrecoByIdProduto( itemVenda.getCodigoProduto().getCodigo(), itemVenda.getQuantidade() ) ) );

                //cria o item venda
                itemVendaDao.create( itemVenda );

            }
            catch ( Exception e )
            {
                e.printStackTrace();
                efectuada = false;
                transaction.rollback();
                JOptionPane.showMessageDialog( null, "Falha ao registrar o produto: " + itemVenda.getCodigoProduto().getCodigo() + " na guia de transporte" );
                break;
            }
        }

        if ( efectuada )
        {
            JOptionPane.showMessageDialog( null, "Guia de Transporte efectuada com sucesso!.." );
            try
            {

                limpar();
                remover_all_produto();
                //adicionar_preco_quantidade_anitgo();

            }
            catch ( Exception e )
            {
            }
            actualizar_cod_doc();
            txtClienteNome.setText( "" );
            txtClienteNome.requestFocus();
            actualizar_abreviacao();
            ListaVenda1 listaVenda1 = new ListaVenda1( cod_venda, this.abreviacao, false, false, "Original" );

        }

    }

    public void getDesconto_Quantidade() throws SQLException
    {
    }

    public double getDescontoActual() throws SQLException
    {

        ResultSet resultado = conexao.executeQuery( "SELECT valor FROM tb_desconto WHERE idDesconto = 1" );
        double valor = 0;
        if ( resultado.next() )
        {
            valor = resultado.getDouble( "valor" );
        }
        return valor;

    }

    public void remover_all_produto() throws SQLException
    {

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        for ( int i = modelo.getRowCount() - 1; i >= 0; i-- )
        {
            modelo.removeRow( i );
        }

    }

    public void remover_produto() throws SQLException
    {

        if ( linha > 0 )
        {

            table.getModel().setValueAt( 0, linha - 1, 0 );
            table.getModel().setValueAt( "", linha - 1, 1 );
            table.getModel().setValueAt( 0, linha - 1, 2 );
            table.getModel().setValueAt( 0, linha - 1, 3 );
            table.getModel().setValueAt( 0, linha - 1, 4 );
            table.getModel().setValueAt( 0, linha - 1, 5 );

//            setTotalPagar();
            linha--;
            coordenada--;

//            calcularTroco();
        }
        else
        {
            JOptionPane.showMessageDialog( null, "Impossivel Remover Produtos na Tabela!...." );
        }

    }

    public void actualizar_quantidade( int cod, int quantidade )
    {

        String sql = "UPDATE tb_stock SET quantidade_existente =  " + ( getQuantidadeProduto( cod ) - quantidade ) + " WHERE cod_produto_codigo = " + cod + " AND  cod_armazem = " + getCodigoArmazem();
        System.out.println( "Quantidade   : " + quantidade );
        conexao.executeUpdate( sql );

    }

    public int getQuantidadeProduto( int cod_produto )
    {

        String sql = "SELECT quantidade_existente FROM  tb_stock WHERE  cod_produto_codigo = " + cod_produto + " AND cod_armazem = " + getCodigoArmazem();

        ResultSet rs = BDConexao.getInstancia().executeQuery( sql );

        try
        {
            if ( rs.next() )
            {
                return rs.getInt( "quantidade_existente" );
            }
        }
        catch ( SQLException ex )
        {
            ex.printStackTrace();
            return 0;
        }

        return 0;
    }

    public int getLastCodigo( String tabela )
    {

        String sql = "SELECT max(codigo) FROM " + tabela;

        ResultSet rs = BDConexao.getInstancia().executeQuery( sql );

        try
        {
            if ( rs.next() )
            {
                return rs.getInt( 1 );
            }
        }
        catch ( SQLException ex )
        {
            ex.printStackTrace();
            return 0;
        }

        return 0;
    }

    public static int getCodigoArmazem()
    {
        //return conexao.getCodigoPublico("tb_armazem", String.valueOf(  cmbArmazem.getSelectedItem() ) );   
        return armazemDao.getArmazemByDescricao( cmbArmazem.getSelectedItem().toString() ).getCodigo();
    }

    public void salvar_venda()
    {

        TbVenda venda = new TbVenda();

        venda.setCodigoUsuario( usuarioDao.findTbUsuario( cod_usuario ) );
        venda.setCodigoCliente( clienteDao.findTbCliente( getIdCliente() ) );
        venda.setPerformance( "false" );
        venda.setCredito( "false" );
        venda.setIdArmazemFK( armazemDao.findTbArmazem( getCodigoArmazem() ) );
        venda.setDataVenda( new Date() );
        venda.setHora( new Date() );
        venda.setNomeCliente( getNomeCliente() );

        venda.setTotalGeral( new BigDecimal(0 ));
        venda.setDescontoComercial( new BigDecimal(0 ));
        venda.setDescontoFinanceiro( new BigDecimal(0 ));
        venda.setTotalIva( new BigDecimal(0 ));
        venda.setTotalVenda( new BigDecimal(0 ));
        venda.setValorEntregue( new BigDecimal(0 ));
        venda.setTroco( new BigDecimal(0 ));
        venda.setTotalIncidencia( new BigDecimal(0 ));
        venda.setDescontoTotal( new BigDecimal(0 ));
        venda.setIdBanco( bancoDao.findTbBanco( DVML.COD_BANCO_CAIXA ) );

        Cambio cambio_nacional = cambioDao.getLastObject( 1 );
        venda.setFkCambio( cambio_nacional );

        venda.setStatusEliminado( "false" );
        venda.setFkAnoEconomico( this.anoEconomico );
        venda.setFkDocumento( this.documento );
        venda.setCodFact( this.prox_doc );
        venda.setLocalCarga( txtLocalCarga.getText() );
        venda.setLocalDescarga( txtLocalDescarga.getText() );
        venda.setRefCodFact( txtRefDoc.getText() );
//#HASH_TESTE        venda.setHashCod(MetodosUtil.criptografia_hash( venda,conexao ));

        venda.setHashCod( MetodosUtil.criptografia_hash( prox_doc ) );

        System.out.println( "STATUS:hash cod processado." );
        venda.setAssinatura( MetodosUtil.assinatura_doc( venda.getHashCod() ) );
        System.out.println( "STATUS:documento assinado com sucesso." );

        try
        {
            vendaDao.create( venda );
            System.out.println( "STATUS:Guia de Transporte processado com sucesso." );
            salvarItemvenda();
            transaction.commit();
            System.out.println( "STATUS:itens adicionado na Guia de Transporte." );
        }
        catch ( Exception e )
        {
            System.err.println( "STATUS: falha ao actualizar a Guia de Transporte" );
            e.printStackTrace();
            transaction.rollback();
            JOptionPane.showMessageDialog( null, "Falha ao Processar a Guia de Transporte", "FALHA", JOptionPane.ERROR_MESSAGE );
        }

    }

    private String getNomeCliente()
    {

        if ( cmbCliente.getSelectedItem().equals( "DIVERSOS" ) )
        {
            return txtClienteNome.getText();
        }
        return cmbCliente.getSelectedItem().toString();

    }

    public static void main( String[] args ) throws SQLException
    {
        new GuiaTransporteVisao( 15, BDConexao.getInstancia() ).show( true );
    }

    public void confiLabel()
    {

    }

    //devolve o codigo_barra de uma determinada tabela
    public double getPrecoProduto( int codProduto, boolean stocavel )
    {

        String sql = "";

        if ( stocavel )
        {
            sql = "SELECT preco_venda FROM tb_stock WHERE( cod_produto_codigo = " + codProduto + " AND cod_armazem = " + getCodigoArmazem() + ")";
        }
        else
        {
            sql = "SELECT preco FROM tb_produto WHERE( codigo = " + codProduto + ")";
            JOptionPane.showMessageDialog( null, "O produto provavelmente nap estocavel!..." );
        }
        ResultSet rs = conexao.executeQuery( sql );

        try
        {
            if ( rs.next() )
            {
                if ( stocavel )
                {
                    return rs.getDouble( "preco_venda" );
                }
                else
                {
                    return rs.getDouble( "preco" );
                }
            }
        }
        catch ( SQLException ex )
        {
            return 0;
        }

        return 0;
    }

    public boolean setCredito()
    {
        //return rbCredito.isSelected();
        return false;
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">    
    private void init()
    {

//        vasilhameDao = new VasilhameDao(emf);
        descontoDao = new DescontoDao( emf );
        precoDao = new PrecoDao( emf );
        produtoDao = new ProdutoDao( emf );
        stockDao = new StockDao( emf );
        usuarioDao = new UsuarioDao( emf );
        clienteDao = new ClienteDao( emf );
        vendaDao = new VendaDao( emf );
        armazemDao = new ArmazemDao( emf );
        itemVendaDao = new ItemVendaDao( emf );
        tipoProdutoDao = new TipoProdutoDao( emf );
//        bancoDao = new BancoDao(emf);
        anoEconomicoDao = new AnoEconomicoDao( emf );
        documentoDao = new DocumentoDao( emf );
        moedaDao = new MoedaDao( emf );
        cambioDao = new CambioDao( emf );
        produtoImpostoDao = new ProdutoImpostoDao( emf );
        produtoIsentoDao = new ProdutoIsentoDao( emf );
        mostrar_nome();
        cmbArmazem.setModel( new DefaultComboBoxModel( armazemDao.buscaTodos1() ) );
        cmbCliente.setModel( new DefaultComboBoxModel( conexao.getElementos( "tb_cliente", "nome", false ) ) );
        cmbCliente.setSelectedItem( "DIVERSOS" );
        cmbTipoDocumento.setModel( new DefaultComboBoxModel( ( Vector ) documentoDao.buscaTodos() ) );

        txtClienteNome.requestFocus();
        //desactivar_campos();
        mostrar_ano_economico_serie();
        lb_proximo_documento.setText( "" );

    }// </editor-fold>   

    private void mostrar_ano_economico_serie()
    {
        this.anoEconomico = anoEconomicoDao.getLastObject();
        lb_ano_academico.setText( "ANO ECONÔMICO: " + this.anoEconomico.getSerie() );

    }

    private void mostrar_proximo_codigo_documento()
    {
        try
        {
            this.documento = documentoDao.findDocumento( getIdDocumento() );
            this.doc_prox_cod = documento.getCodUltimoDoc() + 1;
            //prox_doc = " " + documento.getAbreviacao();
            prox_doc = documento.getAbreviacao();
            //FA Série / codigo
            prox_doc += " " + this.anoEconomico.getSerie() + "/" + this.doc_prox_cod;
            lb_proximo_documento.setText( "PRÓXIMO DOC. :" + prox_doc );
        }
        catch ( Exception e )
        {
            this.documento = null;
            lb_proximo_documento.setText( "" );
        }
    }

    private static double getTaxaImposto( int idProduto )
    {
        return produtoImpostoDao.getTaxaByIdProduto( idProduto );
    }

    private static String getMotivoIsensao( int idProduto )
    {
        return produtoIsentoDao.getRegimeIsensaoByIdProduto( idProduto );
    }

    private static double getValorIVA( double taxa, double preco_venda )
    {
        return ( ( ( taxa / 100 ) + 1 ) * preco_venda );
    }

    private void actualizar_cod_doc()
    {
        this.documento.setCodUltimoDoc( this.doc_prox_cod );
        this.documento.setDescricaoUltimoDoc( this.prox_doc );
        this.documento.setUltimaData( new Date() );
        try
        {
            documentoDao.edit( documento );
        }
        catch ( Exception e )
        {
            System.err.println( "Falha ao actualizar o documento" );
        }
    }

    private void setWindowsListener()
    {

        this.addWindowListener( new WindowAdapter()
        {
            @Override
            public void windowActivated( WindowEvent e )
            {
                mostrar_proximo_codigo_documento();
            }

        } );

    }

    private void actualizar_abreviacao()
    {

        switch ( getIdDocumento() )
        {
            case DVML.DOC_FACTURA_RECIBO_FR:
                if ( true )
                {
                    this.abreviacao = Abreviacao.FR_A4;
                }
                else
                {
                    this.abreviacao = Abreviacao.FR_A6;
                }
                break;
            case DVML.DOC_FACTURA_FT:
                this.abreviacao = Abreviacao.FA;
                break;
            case DVML.DOC_FACTURA_PROFORMA_PP:
                this.abreviacao = Abreviacao.PP;
                break;
            case DVML.DOC_GUIA_TRANSPORTE_GT:
                this.abreviacao = Abreviacao.GT;
                break;
            default:
                break;
        }

    }

    private void desabilitar_campos()
    {

        boolean valor = !( DVML.DOC_FACTURA_PROFORMA_PP == getIdDocumento() );

    }

    private void refresh_table()
    {

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();

        double preco = 0, desconto = 0, sub_total_linha = 0, sub_total_linha_com_iva = 0, taxa = 0;
        int idProduto, qtd;

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {

            try
            {

                /**
                 * Recupera os valores da tabela
                 */
                idProduto = Integer.parseInt( modelo.getValueAt( i, 0 ).toString() );
                qtd = Integer.parseInt( modelo.getValueAt( i, 3 ).toString() );
                taxa = Double.parseDouble( modelo.getValueAt( i, 3 ).toString() );

                //busca o preço em função do câmbio
//                preco = getPrecoByIdProdutoAndQtd(idProduto, qtd);
                /**
                 * Processa os valores para serem actualizados na tabela
                 */
                desconto = getDesconto_produto( idProduto, preco, qtd );
                sub_total_linha = ( preco * qtd ) - desconto;
                sub_total_linha_com_iva = ( qtd * getValorIVA( getTaxaImposto( idProduto ), preco ) - desconto );

                /**
                 * actualiza os valores na tabela
                 */
                modelo.setValueAt( CfMethods.formatarComoMoeda( preco ), i, 2 );
                modelo.setValueAt( CfMethods.formatarComoMoeda( desconto ), i, 4 );
                modelo.setValueAt( CfMethods.formatarComoMoeda( sub_total_linha ), i, 6 );
                modelo.setValueAt( CfMethods.formatarComoMoeda( sub_total_linha_com_iva ), i, 7 );

            }
            catch ( Exception e )
            {
                e.printStackTrace();
            }

        }

    }

    public static double getDesconto_produto( int id_produto, double preco_total_produto, double qtd )
    {

        TbDesconto desconto = descontoDao.get_desconto_cliente_produto( getIdCliente(), id_produto );
        Double quantidade = desconto.getQuantidade();
        double percentagem_desconto = desconto.getValor();

        if ( qtd >= quantidade )
        {
            return preco_total_produto * ( percentagem_desconto / 100 );
        }
        else
        {
            return 0.0;
        }

    }
//actualizar_abreviacao
}
