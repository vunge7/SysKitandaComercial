/*

 2259 - ImprimirNota
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package visao;


import java.sql.Connection;
import controller.ItemVendaController;
import controller.StockController;
import controller.TipoClienteController;
import controller.VendaController;
import dao.*;
import entity.*;
import java.awt.Component;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import kitanda.util.CfMethods;
import lista.ListaNotaDebito;
import modelo.ClienteModelo;
import modelo.ItemVendaModelo;
import modelo.ProdutoModelo;
import modelo.StockModelo;
import modelo.TipoClienteModelo;
import modelo.VendaModelo;
import util.BDConexao;
import static util.DVML.*;
import util.DVML;
import util.DVML.Abreviacao;
import static util.DVML.ESTADO_NOTA.ANULADO;
import util.JPAEntityMannagerFactoryUtil;
import util.MetodosUtil;
import static util.MetodosUtil.esvaziar_tabela;
import static util.MetodosUtil.showMessageUtil;
//import static visao.NotasComprasCreditoDebitoVisao.*;

/**
 *
 * @author Domingos Dala Vunge
 */
public class NotasCreditoDebitoAnulacaoComprasVisao extends javax.swing.JFrame implements Runnable
{

    private static EntityManagerFactory emf = JPAEntityMannagerFactoryUtil.em;
    private VasilhameDao vasilhameDao;
    private static DescontoDao descontoDao;
    private static PrecoDao precoDao;
    private static ComprasDao comprasDao;
    private BancoDao bancoDao;
    private NotasItemCompras notasItem;
    private TbStock stock_local;
    private NotasCompras notas;
    public static ProdutoDao produtoDao;
    private static StockDao stockDao;
    private UsuarioDao usuarioDao;
    private DocumentoDao documentoDao;
    private static ClienteDao clienteDao;
    private NotasComprasDao notasDao;
    private MoedaDao moedaDao;
    private AnoEconomicoDao anoEconomicoDao;
    private static ArmazemDao armazemDao;
    private NotasComprasItemDao notasItemDao;
    private TbVasilhame vasilhame;
    private Moeda moeda;
    private AnoEconomico anoEconomico;
    private static BDConexao conexao;
    private StockModelo stockModelo;
    private TipoClienteController tipoClienteController;
    private VendaController vendaController;
    private ItemVendaController itemVendaController;
    private ItemVendaModelo itemVendaModelo;
    private VendaModelo vendaModelo;
    private ClienteModelo clienteModelo;
    private CambioDao cambioDao;
    private Documento documento;
    private static ProdutoImpostoDao produtoImpostoDao;
    private Cambio cambio;
    private TipoProdutoDao tipoProdutoDao;
    private int cod_usuario;
    private TipoClienteModelo tipoClienteModelo;
    private StockController stockController;
    private int linha = 0, coordenada = 1, doc_prox_cod = 0;
    private double soma_total = 0, total_iva = 0;
    private ProdutoModelo produtoModelo;
    private static ProdutoIsentoDao produtoIsentoDao;
    private static int linha_actual = -1;
    private Abreviacao abreviacao;
    private String prox_doc;
    private static String codFactura = "";
    private Thread t;

    public NotasCreditoDebitoAnulacaoComprasVisao( int cod_usuario, BDConexao conexao ) throws SQLException
    {

        initComponents();

        setLocationRelativeTo( null );
        setResizable( false );
        this.cod_usuario = cod_usuario;
        this.conexao = conexao;
        setWindowsListener();
        init();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenuItem1 = new javax.swing.JMenuItem();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel5 = new javax.swing.JPanel();
        lbPreco4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        motivoJTextArea = new javax.swing.JTextArea();
        txtRefDoc = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_detalhe = new javax.swing.JTable();
        lbDesconto = new javax.swing.JLabel();
        lbTotal = new javax.swing.JLabel();
        lbData = new javax.swing.JLabel();
        lbUsuario = new javax.swing.JLabel();
        lbFornecedor = new javax.swing.JLabel();
        lbTotalGeral = new javax.swing.JLabel();
        lb_ano_academico = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        anularJButton = new javax.swing.JButton();
        lb_proximo_documento = new javax.swing.JLabel();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("...:::::  KITANDA - Anulação Compras ::::...");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lbPreco4.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbPreco4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbPreco4.setText("Ref. Documento");
        lbPreco4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Motivo da Alteração ou Rectificação", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("SansSerif", 1, 14))); // NOI18N

        motivoJTextArea.setColumns(20);
        motivoJTextArea.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        motivoJTextArea.setRows(5);
        jScrollPane2.setViewportView(motivoJTextArea);

        txtRefDoc.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txtRefDocActionPerformed(evt);
            }
        });

        table_detalhe.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        table_detalhe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Cod.Art", "Descrição", "Preço", "Qtd.", "Desconto(%)", "IVA", "Valor", "Valor(IVA)"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        table_detalhe.setCellSelectionEnabled(true);
        table_detalhe.setGridColor(new java.awt.Color(51, 153, 0));
        jScrollPane1.setViewportView(table_detalhe);
        table_detalhe.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        lbDesconto.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lbDesconto.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbDesconto.setText("Desconto :");

        lbTotal.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lbTotal.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbTotal.setText("Total C/Desconto:");

        lbData.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lbData.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbData.setText("Data:");

        lbUsuario.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lbUsuario.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbUsuario.setText("Usuário:");

        lbFornecedor.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lbFornecedor.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbFornecedor.setText("Fornecedor:");

        lbTotalGeral.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lbTotalGeral.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbTotalGeral.setText("Total S/Desconto:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(txtRefDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(lbPreco4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(70, 70, 70)
                                .addComponent(lbFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbData, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 714, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(lbDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbTotalGeral, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(lbPreco4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRefDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbData, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbTotalGeral, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lb_ano_academico.setFont(new java.awt.Font("Lucida Grande", 3, 16)); // NOI18N
        lb_ano_academico.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_ano_academico.setText("ANO ECONÔMICO");
        lb_ano_academico.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operações", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 14))); // NOI18N

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/LOGOUT - VERMELHO/Logout 32x32.png"))); // NOI18N
        btnCancelar.setText("FECHAR ESTA JANELA");
        btnCancelar.setAlignmentX(0.5F);
        btnCancelar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCancelarActionPerformed(evt);
            }
        });

        anularJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/img32x32/_cancel.png"))); // NOI18N
        anularJButton.setText("EFECTUAR A ANULAÇÃO");
        anularJButton.setToolTipText("Emitir nota de credito de anulamento");
        anularJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                anularJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                    .addComponent(anularJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(anularJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                .addGap(52, 52, 52))
        );

        lb_proximo_documento.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        lb_proximo_documento.setText("PRÓXIMO DOC. : XX PP/A1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lb_ano_academico, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lb_proximo_documento, javax.swing.GroupLayout.DEFAULT_SIZE, 965, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lb_ano_academico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lb_proximo_documento, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName("...:::::  KITANDA - FACTURAÃO ::::...");

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void anularJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_anularJButtonActionPerformed
    {//GEN-HEADEREND:event_anularJButtonActionPerformed

        procedimento_anular_nota();
    }//GEN-LAST:event_anularJButtonActionPerformed

    private void txtRefDocActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtRefDocActionPerformed
    {//GEN-HEADEREND:event_txtRefDocActionPerformed
        // TODO add your handling code here:
        procedimento_busca();

    }//GEN-LAST:event_txtRefDocActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anularJButton;
    private javax.swing.JButton btnCancelar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbData;
    private javax.swing.JLabel lbDesconto;
    private javax.swing.JLabel lbFornecedor;
    private javax.swing.JLabel lbPreco4;
    private javax.swing.JLabel lbTotal;
    private javax.swing.JLabel lbTotalGeral;
    private javax.swing.JLabel lbUsuario;
    private javax.swing.JLabel lb_ano_academico;
    private javax.swing.JLabel lb_proximo_documento;
    private javax.swing.JTextArea motivoJTextArea;
    public static javax.swing.JTable table_detalhe;
    private static javax.swing.JTextField txtRefDoc;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run()
    {

    }

//    public void actualizar_quantidade( int quantidade, TbStock stock )
//    {
//
//        int qtd = ( stock.getQuantidadeExistente() - quantidade );
//        stock.setQuantidadeExistente( qtd );
//        try
//        {
//            stockDao.edit( stock );
//        }
//        catch ( Exception e )
//        {
//            e.printStackTrace();
//            System.err.println( "Falha ao actualizar a quantidade do produto no stock" );
//        }
//
//    }
    public void limpar()
    {

        soma_total = 0;
        lbTotal.setText( "" );
        lbDesconto.setText( "" );
        lbUsuario.setText( "" );
        lbData.setText( "" );
        lbFornecedor.setText( "" );
        motivoJTextArea.setText( "" );
        lbTotalGeral.setText( "" );
        lbTotal.setText( "" );

    }

    public boolean campos_invalido_imprimir()
    {

        if ( cambio == null )
        {
            JOptionPane.showMessageDialog( null, "Por favor seleccione a moeda", "AVISO", JOptionPane.WARNING_MESSAGE );
            return true;
        }

        return false;

    }

    public boolean possivel_quantidade( int cod_produto, double qtd )
    {

        //System.err.println(conexao.getQuantidade_Existente_Publico(getFkProduto(), getCodigoArmazem()));  
        //  TbStock stock =  stockDao.getStockByDescricao(getFkProduto(), getCodigoArmazem() );
        double quant_possivel = conexao.getQuantidade_Existente_Publico( cod_produto, getCompra().getIdArmazemFK().getCodigo() ) - conexao.getQuantidade_minima_publico( cod_produto, getCompra().getIdArmazemFK().getCodigo() );
        //int quant_possivel = stock.getQuantidadeExistente() -  stock.getQuantBaixa();

        return quant_possivel >= qtd;

    }


    /* CRIACAO DO GETS  */
    public static int getIdCliente()
    {
        try
        {
//            return clienteDao.getClienteByNome ( cmbCliente.getSelectedItem ().toString () ).getCodigo ();
            return 1;
        }
        catch ( Exception e )
        {
            return 0;
        }

    }

    public int getIdDocumento()
    {
        try
        {
            return DOC_NOTA_CREDITO_NC_COMPRAS;
        }
        catch ( Exception e )
        {
            return 0;
        }
    }

//    public static String getDescricao_Produto()
//    {
//        return produtoDao.findTbProduto( getFkProduto() ).getDesignacao();
//    }
    private void atualizarCMBVendas()
    {
        VendaDao tbVendaDao = new VendaDao( emf );

        Object[] listarVendaDoDocumento = tbVendaDao.listarDocumentoRetificaveisComOsSeguintesPKs( 1, 2 );

        if ( listarVendaDoDocumento != null )
        {
//            cmbFactura.setModel( new DefaultComboBoxModel( listarVendaDoDocumento ) );
//            cmbFactura.setSelectedIndex( -1 );
        }
        else
        {

        }

    }

    public String getDataActual()
    {
        Calendar calendario = Calendar.getInstance();

        //buscar data
        int dia = calendario.get( Calendar.DAY_OF_MONTH );
        int mes = calendario.get( Calendar.MONTH );
        int ano = calendario.get( Calendar.YEAR );

        int hora = calendario.get( Calendar.HOUR_OF_DAY );
        int minuto = calendario.get( Calendar.MINUTE );
        int segundo = calendario.get( Calendar.SECOND );
        String data = ano + "-" + ( mes + 1 ) + "-" + dia + " " + hora + ":" + minuto + ":" + segundo;

        return data;

    }

    public double getDescontoActual() throws SQLException
    {

        ResultSet resultado = conexao.executeQuery( "SELECT valor FROM tb_desconto WHERE idDesconto = 1" );
        double valor = 0;
        if ( resultado.next() )
        {
            valor = resultado.getDouble( "valor" );
        }
        return valor;

    }

    public int getQuantidadeProduto( int cod_produto )
    {

        String sql = "SELECT quantidade_existente FROM  tb_stock WHERE  cod_produto_codigo = " + cod_produto + " AND cod_armazem = " + getCompra().getIdArmazemFK().getCodigo();

        ResultSet rs = conexao.executeQuery( sql );

        try
        {
            if ( rs.next() )
            {
                return rs.getInt( "quantidade_existente" );
            }
        }
        catch ( SQLException ex )
        {
            ex.printStackTrace();
            return 0;
        }

        return 0;
    }

    public int getLastCodigo( String tabela )
    {

        String sql = "SELECT max(codigo) FROM " + tabela;

        ResultSet rs = conexao.executeQuery( sql );

        try
        {
            if ( rs.next() )
            {
                return rs.getInt( 1 );
            }
        }
        catch ( SQLException ex )
        {
            ex.printStackTrace();
            return 0;
        }

        return 0;
    }

    public static Compras getCompra()
    {
        codFactura = txtRefDoc.getText();
        //String codFactura = (String) cmbFactura.getSelectedItem();
        return new ComprasDao( emf ).findByCodFacts( codFactura );
    }

    public static void main( String[] args ) throws SQLException
    {
        new NotasCreditoDebitoAnulacaoComprasVisao( 15, BDConexao.getInstancia() ).show( true );
    }

//    public static boolean estado_critico() throws SQLException
//    {
//        TbStock stock = stockDao.getStockByDescricao( getFkProduto(), getCompra().getIdArmazemFK().getCodigo() );
//        int qtd_minima = stock.getQuantBaixa(),
//                qtd_existente = stock.getQuantidadeExistente(),
//                qtd_critica = stock.getQuantCritica();
//
////           return conexao.getQuantidade_minima_publico(getFkProduto(), getCodigoArmazem() ) < conexao.getQuantidade_Existente_Publico( getFkProduto(), getCodigoArmazem()  ) 
////                   && conexao.getQuantidade_Existente_Publico( getFkProduto(), getCodigoArmazem()  )  <= conexao.getQuantidade_critica_public( getFkProduto(), getCodigoArmazem() );
////   
//        return qtd_minima < qtd_existente
//                && qtd_existente <= qtd_critica;
//
//    }
    public static boolean possivel_quantidade() throws SQLException
    {

//        int quant_possivel = conexao.getQuantidade_Existente_Publico ( getFkProduto (), getVenda().getIdArmazemFK ().getCodigo () ) - conexao.getQuantidade_minima_publico ( getFkProduto (), getVenda().getIdArmazemFK ().getCodigo () );
//        //int quant_possivel = stock.getQuantidadeExistente() -  stock.getQuantBaixa();
//
//        return quant_possivel >= getQuantidade ();
        return true;
    }

    public static boolean isStocavel( String status )
    {
        try
        {
            if ( status.equals( "true" ) )
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        catch ( Exception e )
        {
            return true;
        }

    }

    //devolve o codigo_barra de uma determinada tabela
    public double getPrecoProduto( int codProduto, boolean stocavel )
    {

        String sql = "";

        if ( stocavel )
        {
            sql = "SELECT preco_venda FROM tb_stock WHERE( cod_produto_codigo = " + codProduto + " AND cod_armazem = " + getCompra().getIdArmazemFK().getCodigo() + ")";
        }
        else
        {
            sql = "SELECT preco FROM tb_produto WHERE( codigo = " + codProduto + ")";
            JOptionPane.showMessageDialog( null, "O produto provavelmente nap estocavel!..." );
        }
        ResultSet rs = conexao.executeQuery( sql );

        try
        {
            if ( rs.next() )
            {
                if ( stocavel )
                {
                    return rs.getDouble( "preco_venda" );
                }
                else
                {
                    return rs.getDouble( "preco" );
                }
            }
        }
        catch ( SQLException ex )
        {
            return 0;
        }

        return 0;
    }

    public boolean setCredito()
    {
        //return rbCredito.isSelected();
        return false;
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">    
    private void init()
    {
        vasilhameDao = new VasilhameDao( emf );
        descontoDao = new DescontoDao( emf );
        precoDao = new PrecoDao( emf );
        produtoDao = new ProdutoDao( emf );
        comprasDao = new ComprasDao( emf );
        stockDao = new StockDao( emf );
        usuarioDao = new UsuarioDao( emf );
        clienteDao = new ClienteDao( emf );
        notasDao = new NotasComprasDao( emf );
        armazemDao = new ArmazemDao( emf );
        notasItemDao = new NotasComprasItemDao( emf );
        tipoProdutoDao = new TipoProdutoDao( emf );
        bancoDao = new BancoDao( emf );
        anoEconomicoDao = new AnoEconomicoDao( emf );
        documentoDao = new DocumentoDao( emf );
        moedaDao = new MoedaDao( emf );
        cambioDao = new CambioDao( emf );
        produtoImpostoDao = new ProdutoImpostoDao( emf );
        produtoIsentoDao = new ProdutoIsentoDao( emf );

        mostrar_ano_economico_serie();
        lb_proximo_documento.setText( "" );

        atualizarCMBVendas();
        anularJButton.setVisible( false );
        motivoJTextArea.getDocument().addDocumentListener( new DocumentListener()
        {

            @Override
            public void insertUpdate( DocumentEvent e )
            {
                atualizarBtnSalvar();
            }

            @Override
            public void removeUpdate( DocumentEvent e )
            {
                atualizarBtnSalvar();
            }

            @Override
            public void changedUpdate( DocumentEvent e )
            {
            }
        } );

    }// </editor-fold>   

    private void mostrar_ano_economico_serie()
    {
        this.anoEconomico = anoEconomicoDao.getLastObject();
        lb_ano_academico.setText( "ANO ECONÔMICO: " + this.anoEconomico.getSerie() );
    }

    private void mostrar_proximo_codigo_documento()
    {
        lb_proximo_documento.setText( pegarProxDoc( DVML.DOC_NOTA_CREDITO_NC_COMPRAS ) );
    }

    private void actualizar_cod_doc()
    {
        Documento documento = documentoDao.findDocumento( DVML.DOC_NOTA_CREDITO_NC_COMPRAS );

        documento.setCodUltimoDoc( doc_prox_cod );
        documento.setDescricaoUltimoDoc( pegarProxDoc( DVML.DOC_NOTA_CREDITO_NC_COMPRAS ) );
        documento.setUltimaData( new Date() );

        try
        {
            documentoDao.edit( documento );
        }
        catch ( Exception e )
        {
            System.err.println( "Falha ao actualizar o documento" );
        }
    }

    private void setWindowsListener()
    {
        this.addWindowListener( new WindowAdapter()
        {
            @Override
            public void windowActivated( WindowEvent e )
            {
                mostrar_proximo_codigo_documento();
            }
        } );

    }

    private void actualizar_abreviacao()
    {

        if ( DVML.DOC_FACTURA_RECIBO_FR == getIdDocumento() )
        {

            this.abreviacao = Abreviacao.FR_A4;

        }
        else if ( DVML.DOC_FACTURA_FT == getIdDocumento() )
        {
            this.abreviacao = Abreviacao.FA;
        }
        else if ( DVML.DOC_FACTURA_PROFORMA_PP == getIdDocumento() )
        {
            this.abreviacao = Abreviacao.PP;
        }
        else if ( DVML.DOC_NOTA_CREDITO_NC == getIdDocumento() )
        {
            this.abreviacao = Abreviacao.NC;
        }
        else if ( DVML.DOC_NOTA_CREDITO_NC_COMPRAS == getIdDocumento() )
        {
            this.abreviacao = Abreviacao.NCCO;
        }
        else if ( DVML.DOC_NOTA_DEBITO_ND == getIdDocumento() )
        {
            this.abreviacao = Abreviacao.ND;
        }

    }

    private boolean notaAnulada()
    {
        Compras compras = getCompra();

        int cod_notas = notasDao.getLastNota();
        this.notas = notasDao.findNotasCompras( cod_notas );
        List<ItemCompras> itemCompras = compras.getItemComprasList();

        if ( itemCompras.size() != table_detalhe.getRowCount() )
        {
            return false;
        }

        for ( int i = 0; i < table_detalhe.getRowCount(); i++ )
        {
            int quantidade = Integer.parseInt( String.valueOf( table_detalhe.getModel().getValueAt( i, 3 ) ) );

            if ( quantidade > 0 )
            {
                return false;
            }
        }

        return true;
    }

    private void procedimento_anular_nota()
    {
        Compras compra = getCompra();

        if ( compra != null )
        {
            if ( compra.getStatusEliminado().equals( "false" ) )
            {
                Date data_actual = new Date();
                Date documento_ref_data = compra.getDataCompra();
                if ( documento_ref_data != null )
                {
                    if ( MetodosUtil.menor_data_1_data_2( data_actual, documento_ref_data ) )
                    {
                        JOptionPane.showMessageDialog( null, "Caro usário verifiue a data do sistema", "AVISO", JOptionPane.WARNING_MESSAGE );
                    }
                    else
                    {
                        anularFaturaNota();
                    }
                }
            }
            else
            {
                showMessageUtil( "Este documento já foi eliminado.", TIPO_MENSAGEM_INFOR );
            }
        }
        else
        {
            JOptionPane.showMessageDialog( null, "Não existe documento com esta referência ou já foi eliminado.", "Aviso", JOptionPane.WARNING_MESSAGE );
        }

    }

    public void anularFaturaNota()
    {
        boolean anular = exibirMensagemConfirmacao( this, "Mensagem de confirmação", "Deseja mesmo anular esta factura?" ) == 0;

        if ( anular )
        {
            Compras compra_local = getCompra();

            Calendar calendarHoje = Calendar.getInstance();
            Calendar calendarVenda = Calendar.getInstance();
            calendarVenda.setTime( compra_local.getDataCompra() );
            System.err.println( "Venda : " + new SimpleDateFormat( "dd/MMM/yyyy" ).format( compra_local.getDataCompra() ) );
            System.err.println( "Hoje : " + new SimpleDateFormat( "dd/MMM/yyyy" ).format( new Date() ) );
            System.err.println( "calendarHoje.after ( calendarVenda ): " + calendarVenda.after( calendarHoje ) );

            boolean dataDeHojePosteriorADataDaVenda = calendarHoje.after( calendarVenda );

            if ( dataDeHojePosteriorADataDaVenda )
            {

                NotasCompras notas = new NotasCompras();

                notas.setCodigoUsuario( usuarioDao.findTbUsuario( cod_usuario ) );
                notas.setTotalCompra( compra_local.getTotalCompra().floatValue() );
                notas.setPerformance( "false" );
                notas.setCredito( "false" );
                notas.setIdArmazemFK( compra_local.getIdArmazemFK() );
                notas.setDataNota( new Date() );
                notas.setHora( new Date() );
                notas.setFkFornecedor( compra_local.getFkFornecedor() );

                notas.setDescontoTotal( compra_local.getDescontoTotal() );
                notas.setTotalGeral( compra_local.getTotalGeral() );
                //notas.setIdBanco( compra_local.getIdBanco() );
                notas.setStatusEliminado( "true" );
                notas.setFkAnoEconomico( this.anoEconomico );
                //notas.setFkCambio( compra_local.getFkCambio() );
                // notas.setFkDocumento( getDocumento() );
                notas.setFkDocumento( getDocumento() );
                notas.setObs( ANULACAO );
                notas.setMotivo( motivoJTextArea.getText() );
                System.err.println( "#1 prox_doc: " + pegarProxDoc( DVML.DOC_NOTA_CREDITO_NC_COMPRAS ) );
                notas.setCodNota( pegarProxDoc( DVML.DOC_NOTA_CREDITO_NC_COMPRAS ) );
                notas.setRefCodFact( compra_local.getCodFact() );
                notas.setTotalIva( compra_local.getTotalIva() );
//#HASH_TESTE                notas.setHashCod ( MetodosUtil.criptografia_hash ( notas.getCodNota () ) );
//                notas.setHashCod( MetodosUtil.criptografia_hash( prox_doc ) );
//                notas.setHashCod( MetodosUtil.criptografia_hash( notas, getGrossTotal( compra_local ), conexao ) );
                notas.setTotalPorExtenso( "0" );
                System.out.println( "STATUS:hash cod processado." );
                //notas.setAssinatura( MetodosUtil.assinatura_doc( notas.getHashCod() ) );
                //notas.setDataNota( new Date() );
                notas.setRefFactData( compra_local.getDataCompra() );
                System.out.println( "STATUS:documento assinado com sucesso." );
                notas.setDescontoComercial( compra_local.getDescontoComercial() );
                notas.setDescontoFinanceiro( compra_local.getDescontoFinanceiro() );
                notas.setTotalIncidencia( compra_local.getTotalIncidencia() );
                notas.setTotalIncidenciaIsento( compra_local.getTotalIncidenciaIsento() );

                notas.setEstado( ANULADO.toString() );

                try
                {
                    notasDao.create( notas );

                    System.out.println( "STATUS:factura criada com sucesso." );
                    boolean documentosalvoComSucesso = salvarItemNotaAnulamento( notasDao.getLastNota() );

                    if ( documentosalvoComSucesso )
                    {
                        alterarStatusVenda( compra_local );
                        actualizar_cod_doc();
                        HashMap hashMap = new HashMap();
                        String telefone = compra_local.getFkFornecedor().getTelefone();
                        String morada = compra_local.getFkFornecedor().getEndereco();
                        String email = compra_local.getFkFornecedor().getEmail();

                        List<TbProduto> lista_produto_isentos = new ArrayList<>();
                        NotasCompras last_nota = notasDao.findNotasCompras( notasDao.getLastNota() );
//                        lista_produto_isentos = getProdutosIsentos( last_nota );
                        String motivos_isentos = MetodosUtil.getMotivoIsensaoProdutos( lista_produto_isentos );
                        System.err.println( "MOTIVOS: " + motivos_isentos );

//                    boolean clienteConsumidorFinal = venda.getCodigoCliente ().getNome ().equalsIgnoreCase ( "Consumidor Final" );
                        boolean clienteNaoInformouOTelefone = telefone == null || telefone.isEmpty();
                        boolean clienteNaoInformouAMorada = morada == null || morada.isEmpty();
                        boolean clienteNaoInformouOEmail = email == null || email.isEmpty();
//                    hashMap.put ( "_CLIENTE_NOME", DVML._NAO_INCLUIR );
//                    hashMap.put ( "_CLIENTE_NIF", DVML._NAO_INCLUIR );

                        if ( clienteNaoInformouOEmail )
                        {
                            hashMap.put( "_CLIENTE_EMAIL", DVML._NAO_INCLUIR );
                        }
                        if ( clienteNaoInformouOTelefone )
                        {
                            hashMap.put( "_CLIENTE_TELEFONE", DVML._NAO_INCLUIR );
                        }
                        if ( clienteNaoInformouAMorada )
                        {
                            hashMap.put( "_CLIENTE_MORADA", DVML._NAO_INCLUIR );
                        }
                        JOptionPane.showMessageDialog( null, "Compra anulada com sucesso." );
                        procedimento_limpar_dados();
                        //Chama a factura e imprime directamente para a imprissora que estiver devenidade no sistema operativo
//                        ListaNotaDebito listaNotaDebito = new ListaNotaDebito( notasDao.getLastNota(), Abreviacao.NC, false, false, hashMap, motivos_isentos );
                    }

                    System.out.println( "STATUS:itens adicionado na facrtura com sucesso." );
                }
                catch ( Exception e )
                {
                    System.err.println( "STATUS: falha ao actualizar a factura" );
                    e.printStackTrace();
                    JOptionPane.showMessageDialog( null, "Falha ao Processar a Factura", "FALHA", JOptionPane.ERROR_MESSAGE );
                }

                atualizarFormulario();
            }
            else
            {
                JOptionPane.showMessageDialog( null, "Erro: Não é permitido processar um documento com data anterior a factura.", "FALHA", JOptionPane.ERROR_MESSAGE );
            }
        }
    }

    public boolean salvarItemNotaAnulamento( int cod_notas )
    {
        Compras compras = getCompra();

        this.notas = notasDao.findNotasCompras( cod_notas );
        List<ItemCompras> itemCompras = compras.getItemComprasList();

        for ( ItemCompras itemCompra : itemCompras )
        {
            notasItem = new NotasItemCompras();

            notasItem.setFkProduto( itemCompra.getFkProduto() );
            notasItem.setFkNotaCompras( this.notas );
            notasItem.setQuantidade( itemCompra.getQuantidade() );
            notasItem.setDesconto( itemCompra.getDesconto() );
            notasItem.setValorIva( itemCompra.getValorIva() );
            notasItem.setMotivoIsensao( itemCompra.getMotivoIsensao() );
            notasItem.setTotal( itemCompra.getTotal() );

            System.err.println( "notasItem.getFkProduto ().getCodigo (): " + notasItem.getFkProduto().getCodigo() );

            //notasItem.setFkPreco( itemCompra.getFkPreco() );
            //cria o item notas
            notasItemDao.create( notasItem );
            this.stock_local = stockDao.get_stock_by_id_produto_and_id_armazem( notasItem.getFkProduto().getCodigo(), getCompra().getIdArmazemFK().getCodigo() );

            //if ( getCompra().getFkDocumento().getPkDocumento() == DOC_FACTURA_RECIBO_FR || getCompra().getFkDocumento().getPkDocumento() == DOC_FACTURA_FT )
            if ( true )
            {
                //so adiciona caso existir o produto no armazém em questão.
                if ( stock_local.getCodigo() != 0 )
                {
                    actualizar_quantidade( itemCompra.getFkProduto().getCodigo(), itemCompra.getQuantidade() );
                }
            }
        }

        actualizar_cod_doc();
        Abreviacao abreviacao = Abreviacao.ND;

        return true;
    }

    public static void exibirMensagemErro( Component rootPane, String tituloJanela, String menssagem )
    {
        JOptionPane.showMessageDialog( rootPane, menssagem, tituloJanela, JOptionPane.ERROR_MESSAGE );
    }

    public static int exibirMensagemConfirmacao( Component rootPane, String tituloJanela, String menssagem )
    {
        return JOptionPane.showOptionDialog( rootPane, menssagem, tituloJanela, JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, new Object[]
        {
            "Sim", "Não"
        }, "Não" );
    }

    //DVML.DOC_NOTA_CREDITO_NC
    public String pegarProxDoc( int idDocumento )
    {
        Documento documento = documentoDao.findDocumento( idDocumento );

        if ( documento != null )
        {
            System.err.println( "documento: " + documento );
            this.doc_prox_cod = documento.getCodUltimoDoc() + 1;
            System.err.println( "#3 " + doc_prox_cod );
            System.err.println( "#4 " + String.format( "%s %s/%S", documento.getAbreviacao(), this.anoEconomico.getSerie(), documento.getCodUltimoDoc() + 1 ) );
            return String.format( "%s %s/%S", documento.getAbreviacao(), this.anoEconomico.getSerie(), documento.getCodUltimoDoc() + 1 );
        }

        return "";
    }

    //DVML.DOC_NOTA_CREDITO_NC
    public String pegarDocAnterior( int idDocumento )
    {
        Documento documento = documentoDao.findDocumento( idDocumento );

        if ( documento != null )
        {
            System.err.println( "documento: " + documento );
            this.doc_prox_cod = documento.getCodUltimoDoc() + 1;

            return String.format( "%s %s/%S", documento.getAbreviacao(), this.anoEconomico.getSerie(), documento.getCodUltimoDoc() + 1 );
        }

        return "";
    }

    private Documento getDocumento()
    {
        return documentoDao.findDocumento( DVML.DOC_NOTA_CREDITO_NC_COMPRAS );
    }

    private void atualizarFormulario()
    {
        System.err.println( "" );
        atualizarCMBVendas();
    }

    private static double getTotalIliquido()
    {
        DefaultTableModel modelo = ( DefaultTableModel ) table_detalhe.getModel();
        int qtd = 0;
        double total_iliquido = 0, preco_unitario = 0;

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            preco_unitario = Double.parseDouble( modelo.getValueAt( i, 2 ).toString() );
            qtd = Integer.parseInt( modelo.getValueAt( i, 3 ).toString() );
            total_iliquido += ( preco_unitario * qtd );

        }

        return total_iliquido;
    }
//    
//        private static double getDescontoFinanceiro()
//    {
//        double desconto_economico = 0d;
//        desconto_economico = Double.parseDouble( sp_valor_desconto_financeiro.getValue().toString() );
//        return desconto_economico;
//    }

    private static double getTotalAOALiquido()
    {
        double valores = ( getTotalIliquido() + getTotalImposto() );
        double descontos = ( getDescontoComercial() );
        System.out.println( "TotalIliquido: " + getTotalIliquido() );
        System.out.println( "TotalImposto: " + getTotalImposto() );
        System.out.println( "TotalDescontoComercial: " + getDescontoComercial() );
        System.out.println( "Total Liquido: " + ( valores - descontos ) );
        return ( valores - descontos );
    }

    private static double getDescontoComercial()
    {
        DefaultTableModel modelo = ( DefaultTableModel ) table_detalhe.getModel();
        int qtd = 0;
        double desconto_comercial = 0d, preco_unitario = 0d, desconto_valor_linha = 0d;

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            preco_unitario = Double.parseDouble( modelo.getValueAt( i, 2 ).toString() );
            qtd = Integer.parseInt( modelo.getValueAt( i, 3 ).toString() );
            double valor_percentagem = Double.parseDouble( modelo.getValueAt( i, 4 ).toString() );
            desconto_valor_linha = ( ( valor_percentagem ) / 100 );
            double valor_unitario = ( preco_unitario * qtd );
            desconto_comercial += ( valor_unitario * desconto_valor_linha );

        }

        return desconto_comercial;
    }

    private static double getTotalIncidencia()
    {
        DefaultTableModel modelo = ( DefaultTableModel ) table_detalhe.getModel();
        int qtd = 0;
        double incidencia = 0d, preco_unitario = 0d, desconto_valor_linha = 0;

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            preco_unitario = Double.parseDouble( modelo.getValueAt( i, 2 ).toString() );
            qtd = Integer.parseInt( modelo.getValueAt( i, 3 ).toString() );
            double valor_percentagem = Double.parseDouble( modelo.getValueAt( i, 4 ).toString() );
            double taxa = Double.parseDouble( modelo.getValueAt( i, 5 ).toString() );
            // a incidência só é aplicável ao produtos sujeitos a iva 
            if ( taxa != 0 )
            {
                desconto_valor_linha = ( ( valor_percentagem ) / 100 );
                double valor_unitario = ( preco_unitario * qtd );
                incidencia += ( ( valor_unitario ) - ( valor_unitario * desconto_valor_linha ) );

            }

        }

        return incidencia;
    }

    private static double getTotalImposto()
    {
        DefaultTableModel modelo = ( DefaultTableModel ) table_detalhe.getModel();
        int qtd = 0;
        double imposto = 0d, preco_unitario = 0d, desconto_valor_linha = 0;

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            preco_unitario = Double.parseDouble( modelo.getValueAt( i, 2 ).toString() );
            qtd = Integer.parseInt( modelo.getValueAt( i, 3 ).toString() );
            double valor_percentagem = Double.parseDouble( modelo.getValueAt( i, 4 ).toString() );
            double taxa = Double.parseDouble( modelo.getValueAt( i, 5 ).toString() );
            // a incidência só é aplicável ao produtos sujeitos a iva 
            if ( taxa != 0 )
            {
                double valor_unitario = ( preco_unitario * qtd );
                desconto_valor_linha = valor_unitario * ( ( valor_percentagem ) / 100 );
                imposto += ( ( valor_unitario - desconto_valor_linha ) * ( taxa / 100 ) );

            }

        }

        return imposto;
    }

    private void atualizarBtnSalvar()
    {
        boolean selecionouFactura = !motivoJTextArea.getText().isEmpty();
        boolean digitouOMotivo = !txtRefDoc.getText().isEmpty();

        anularJButton.setVisible( selecionouFactura && digitouOMotivo );
    }

    private static double getTotalNotaIVASemIncluirDesconto( TbVenda documentoOrigem )
    {
         return MetodosUtil.getTotalVendaIVASemIncluirDesconto( documentoOrigem.getTbItemVendaList() ).doubleValue();

    }

    private double getGrossTotal( TbVenda documentoOrigem )
    {
       return documentoOrigem.getTotalGeral().doubleValue() + getTotalNotaIVASemIncluirDesconto( documentoOrigem );
    }

    private List<TbProduto> getProdutosIsentos()
    {
        DefaultTableModel modelo = ( DefaultTableModel ) table_detalhe.getModel();
        double taxa = 0.0;
        int codigo_produto = 0;
        List<TbProduto> lista_produtos_isentos = new ArrayList<>();
        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            codigo_produto = Integer.parseInt( modelo.getValueAt( i, 0 ).toString() );
            taxa = Double.parseDouble( modelo.getValueAt( i, 5 ).toString() );
            if ( taxa == 0.0 )
            {
                lista_produtos_isentos.add( produtoDao.findTbProduto( codigo_produto ) );
            }
        }

        return lista_produtos_isentos;

    }

    private List<TbProduto> getProdutosIsentos( NotasCompras notas )
    {
        List<NotasItemCompras> list_item = notas.getNotasItemComprasList();
        List<TbProduto> lista_produtos_isentos = new ArrayList<>();
        for ( NotasItemCompras linha_nota : list_item )
        {
            if ( linha_nota.getValorIva() == 0d )
            {
                lista_produtos_isentos.add( linha_nota.getFkProduto() );
            }

        }

//        DefaultTableModel modelo = ( DefaultTableModel ) tabelaItensNotasCompras.getModel();
//        double taxa = 0.0;
//        int codigo_produto = 0;
//        List<TbProduto> lista_produtos_isentos = new ArrayList<>();
//        for ( int i = 0; i < modelo.getRowCount(); i++ )
//        {
//            codigo_produto = Integer.parseInt( modelo.getValueAt( i, 0 ).toString() );
//            taxa = Double.parseDouble( modelo.getValueAt( i, 5 ).toString() );
//            if ( taxa == 0.0 )
//            {
//                lista_produtos_isentos.add( produtoDao.findTbProduto( codigo_produto ) );
//            }
//        }
        return lista_produtos_isentos;

    }

    private void alterarStatusVenda( Compras compras )
    {

        try
        {
            compras.setStatusEliminado( "true" );
            new ComprasDao( emf ).edit( compras );

        }
        catch ( Exception e )
        {
        }

    }

    public int getIdAnoEconomico()
    {
        try
        {
            return anoEconomicoDao.getIdByDescricao( lb_ano_academico.getText() );
        }
        catch ( Exception e )
        {
            return 0;
        }
    }

    private void procedimento_busca()
    {

        //@1. Inserir a referência
        String ref_doc = txtRefDoc.getText();

        if ( !ref_doc.equals( "" ) )
        {

            //verifica se já existe recibo 
            if ( !comprasDao.existe_codFact( ref_doc ) )
            {

                //@2. buscar a compra relacionada com esta referência desde que o documento seja do tipo compra;
                Compras compra_local = comprasDao.findByCodFact( ref_doc, DVML.DOC_COMPRA_CO );

                if ( compra_local != null )
                {

                    if ( compra_local.getStatusEliminado().equals( "false" ) )
                    {
                        //3.1 preencher a tabela com os itens
                        List<ItemCompras> linhas = compra_local.getItemComprasList();
                        DefaultTableModel modelo = ( DefaultTableModel ) table_detalhe.getModel();
                        //3.1.1 limpa a tabela
                        modelo.setRowCount( 0 );
                        for ( ItemCompras object : linhas )
                        {
                            modelo.addRow( new Object[]
                            {
                                object.getFkProduto().getCodigo(),
                                object.getFkProduto().getDesignacao(),
                                CfMethods.formatarComoMoeda( object.getPrecoCompra() ),
                                object.getQuantidade(),
                                object.getDesconto(),
                                object.getValorIva(),
                                CfMethods.formatarComoMoeda(
                                object.getPrecoCompra()
                                * object.getQuantidade()
                                - object.getDesconto() ),
                                CfMethods.formatarComoMoeda( object.getTotal() )

                            } );
                        }

                        //@4.setar o total
                        lbTotal.setText( "Total C/Desconto: " + CfMethods.formatarComoMoeda( compra_local.getTotalCompra() ) );
                        lbTotalGeral.setText( "Total S/Desconto: " + CfMethods.formatarComoMoeda( compra_local.getTotalGeral() ) );
                        lbDesconto.setText( "Desconto: " + CfMethods.formatarComoMoeda( compra_local.getDescontoTotal() ) );
                        //lbValorEnregue.setText("Valor Entregue: " + CfMethods.formatarComoMoeda(compra_local.getValorEntregue() ) );
                        //lbTroco.setText("Troco: " + CfMethods.formatarComoMoeda(compra_local.getTroco() ) );

                        lbUsuario.setText( "Usuário: " + compra_local.getCodigoUsuario().getNome() );
                        lbData.setText( "Data: " + MetodosUtil.getDataBanco( compra_local.getDataCompra() ) );

                        lbFornecedor.setText( "Fornecedor: " + getNomeFornecedor( compra_local ) );
                    }
                    else
                    {
                        procedimento_limpar_dados();
                        MetodosUtil.showMessageUtil( "Atenção: esta compra já foi eliminada.", TIPO_MENSAGEM_AVISO );
                    }

                }
                else
                {
                    procedimento_limpar_dados();
                    JOptionPane.showMessageDialog( null, "Não existe compra com esta referência", "AVISO", JOptionPane.WARNING_MESSAGE );
                }

            }
            else
            {
                //lb_ref_data_fact.setText( ref_data_fact );
                txtRefDoc.setText( "" );
                txtRefDoc.requestFocus();
                procedimento_limpar_dados();
                JOptionPane.showMessageDialog( null, "Atenção: não existe factura relacionada a esta referência.", "AVISO", JOptionPane.WARNING_MESSAGE );
            }

        }
        else
        {
            JOptionPane.showMessageDialog( null, "Por favor insira a refrência da factura ", "AVISO", JOptionPane.WARNING_MESSAGE );
        }
    }

    private void procedimento_limpar_dados()
    {
        limpar();
        esvaziar_tabela( table_detalhe );
    }

    private String getNomeFornecedor( Compras compra_local )
    {

        return compra_local.getFkFornecedor().getNome();

    }

//    public void actualizar_quantidade( int cod, int quantidade )
//    {
//
//        System.err.println( "Entrei no actualizar quantidade" );
//        String sql = "UPDATE tb_stock SET quantidade_existente =  " + ( getQuantidadeProduto( cod ) - quantidade ) + " WHERE cod_produto_codigo = " + cod + " AND  cod_armazem = " + getCodigoArmazem();
//        System.out.println( "Quantidade   : " + quantidade );
//        conexao.executeUpdate( sql );
//
//    }
    public void actualizar_quantidade( int cod, double quantidade )
    {

        String sql = "UPDATE tb_stock SET quantidade_existente =  " + ( getQuantidadeProduto( cod ) - quantidade ) + " WHERE cod_produto_codigo = " + cod + " AND  cod_armazem = " + getCompra().getIdArmazemFK().getCodigo();
        System.out.println( "Quantidade   : " + quantidade );
        conexao.executeUpdate( sql );

    }

}
