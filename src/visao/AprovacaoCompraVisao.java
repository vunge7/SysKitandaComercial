/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visao;


import java.sql.Connection;
import dao.ArmazemDao;
import dao.ComprasDao;
import dao.DescontoDao;
import dao.FornecedorDao;
import dao.ItemComprasDao;
import dao.PrecoDao;
import dao.ProdutoDao;
import dao.ProdutoImpostoDao;
import dao.StockDao;
import entity.Compras;
import entity.ItemCompras;
import entity.TbDesconto;
import entity.TbFornecedor;
import entity.TbProduto;
import entity.TbStock;
import java.sql.SQLException;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import kitanda.util.CfMethods;
import util.BDConexao;
import util.JPAEntityMannagerFactoryUtil;
import static visao.EncomendaVisao.table;
import static visao.VendaUsuarioVisao.getCodigoProduto;
import static visao.VendaUsuarioVisao.getIdCliente;

/**
 *
 * @author Martinho
 */
public class AprovacaoCompraVisao extends javax.swing.JFrame
{

    private static EntityManagerFactory emf = JPAEntityMannagerFactoryUtil.em;
    private ProdutoDao produtoDao = new ProdutoDao( emf );
    private static Compras encomenda_global;
    private StockDao stockDao = new StockDao( emf );
    private ArmazemDao armazemDao = new ArmazemDao( emf );
    private static TbFornecedor fornecedor;
    private static Compras compras_global;
    private static BDConexao conexao;
    private PrecoDao precoDao = new PrecoDao( emf );
    private DescontoDao descontoDao = new DescontoDao( emf );
    private ProdutoImpostoDao produtoImpostoDao = new ProdutoImpostoDao( emf );
    private static FornecedorDao fornecedorDao = new FornecedorDao( emf );
    private ComprasDao comprasDao = new ComprasDao( emf );
    private static ComprasDao encomendaDao;
    private ItemComprasDao itemComprasDao = new ItemComprasDao( emf );
    private TbStock tb_stock;
    private ItemCompras itemCompras;
    private ItemComprasDao itemCompraDao = new ItemComprasDao( emf );
    private Compras compras;
    private TbFornecedor tb_fornecedor;
    private TbProduto produto;
    private int cod = 0;
    private int cod_usuario;
    private DefaultListModel lista_local = new DefaultListModel();
    private DefaultListModel lista_produto = new DefaultListModel();
    private String nome, sobrenome, hora_entrada, hora_saida, minuto_entrada, minuto_saida;
    private int idLogin = 0;
    private int pk_itenHorarioFuncionarioDiasConsultorio = 0;

    public AprovacaoCompraVisao( int cod_usuario, BDConexao conexao ) throws SQLException
    {

        initComponents();
        this.idLogin = idLogin;
        setLocationRelativeTo( null );
        cmbFornecedor.setModel( new DefaultComboBoxModel( fornecedorDao.buscaTodos5() ) );
        this.cod_usuario = cod_usuario;
        this.conexao = conexao;
        lista_solicitacoes.setModel( lista_local );

        try
        {

            mostrar_compras_solicitadas();

        }
        catch ( Exception e )
        {
            e.printStackTrace();
        }

    }

    private void mostrar_compras_solicitadas()
    {

        List<Compras> lista_aux = comprasDao.getProdutosPorComprar();

        lista_local.clear();

        for ( int i = 0; i < lista_aux.size(); i++ )
        {

            lista_local.addElement( lista_aux.get( i ).getCodFact()
            );
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextField9 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lista_solicitacoes = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabela_solicitacao_compras = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        cmbFornecedor = new javax.swing.JComboBox<>();
        lb_fornecedor_nome = new javax.swing.JLabel();
        lb_ano_encomico = new javax.swing.JLabel();
        lb_fornecedor_email = new javax.swing.JLabel();
        lb_fornecedor_telefone = new javax.swing.JLabel();
        lb_fornecedor_endereco = new javax.swing.JLabel();
        lb_fornecedorNome = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("....:::::: HORÁRIO DO MEDICO ::::::....");

        jPanel1.setBackground(new java.awt.Color(51, 153, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setBackground(new java.awt.Color(51, 153, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("APROVAÇÃO DE COMPRAS SOLICITADAS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTextField9.setText("jTextField2");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel18.setText("COMPRAS SOLICITADAS");

        lista_solicitacoes.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lista_solicitacoes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lista_solicitacoesMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(lista_solicitacoes);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                    .addComponent(jScrollPane5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(523, Short.MAX_VALUE)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(37, 37, 37)))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tabela_solicitacao_compras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod.", "Produtos", "Qtd", "Preço de Compra", "Desconto", "IVA", "Subtotal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela_solicitacao_compras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabela_solicitacao_comprasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabela_solicitacao_compras);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cmbFornecedor.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        cmbFornecedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbFornecedor.setEnabled(false);
        cmbFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFornecedorActionPerformed(evt);
            }
        });

        lb_fornecedor_nome.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lb_fornecedor_nome.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lb_fornecedor_nome.setText("Fornecedor");

        lb_ano_encomico.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lb_ano_encomico.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_ano_encomico.setText("Ano Econômico");

        lb_fornecedor_email.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lb_fornecedor_email.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lb_fornecedor_email.setText("email");

        lb_fornecedor_telefone.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lb_fornecedor_telefone.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lb_fornecedor_telefone.setText("Telefone");

        lb_fornecedor_endereco.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lb_fornecedor_endereco.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lb_fornecedor_endereco.setText("Endereço");

        lb_fornecedorNome.setText("Fornecedor");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lb_ano_encomico, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lb_fornecedorNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(lb_fornecedor_nome, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbFornecedor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lb_fornecedor_endereco, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                    .addComponent(lb_fornecedor_telefone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lb_fornecedor_email, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lb_fornecedor_endereco)
                .addGap(6, 6, 6)
                .addComponent(lb_fornecedor_telefone)
                .addGap(6, 6, 6)
                .addComponent(lb_fornecedor_email)
                .addContainerGap(11, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(lb_ano_encomico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lb_fornecedor_nome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lb_fornecedorNome)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/2934_32x32.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 888, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/LOGOUT - VERMELHO/Logout 32x32.png"))); // NOI18N
        jButton4.setText("Sair");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/actualizar_32x32.png"))); // NOI18N
        jButton2.setText("Aceitar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        dispose();
        //new MenuPrincipal().show();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void porocedimento_actualizar()
    {
        Compras compras_local = comprasDao.findCompras( getIdCompras() );

        compras_local.setAutorizado( true );
        compras_local.setDespachoEncomenda( false );
        compras_local.setEncomendado( false );

        try
        {

            comprasDao.edit( compras_local );

            System.out.println( "ID COMPRA: " + compras_local.getPkCompra() );
            itemComprasDao.elimina_itens( itemComprasDao.getItensByEncomendas( compras_local.getPkCompra() ) );
            salvar_item_encomenda1( compras_local.getPkCompra() );
        }
        catch ( Exception e )
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog( null, "Falha ao actualizar a aprovação", "FALHA", JOptionPane.ERROR_MESSAGE );
        }

        try
        {
            mostrar_compras_solicitadas();
        }
        catch ( Exception e )
        {
        }

    }

    private boolean tabela_vazia()
    {
        DefaultTableModel modelo = ( DefaultTableModel ) tabela_solicitacao_compras.getModel();
        return modelo.getRowCount() == 0;
    }

    private void esvaziar_tabela()
    {
        DefaultTableModel modelo = ( DefaultTableModel ) tabela_solicitacao_compras.getModel();
        modelo.setRowCount( 0 );

    }

    private void limpar()
    {

        DefaultTableModel modelo_designacao = ( DefaultTableModel ) tabela_solicitacao_compras.getModel();
        modelo_designacao.setRowCount( 0 );

    }


    private void lista_solicitacoesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lista_solicitacoesMouseClicked

        busca_compras();


    }//GEN-LAST:event_lista_solicitacoesMouseClicked

    private void setCamposStock( int idProduto )
    {

        System.out.println( "Cod" + idProduto );
        produto = new TbProduto();
        produto = produtoDao.getProdutoByCodigoProduto( idProduto );
        System.out.println( "Cod" + idProduto );

        try
        {

        }
        catch ( Exception e )
        {
            e.printStackTrace();
        }

    }

    private void busca()
    {
        try
        {

            String pedido = lista_solicitacoes.getSelectedValue();
            setCamposStock( tb_stock.getCodProdutoCodigo().getCodigo() );

        }
        catch ( Exception e )
        {
            e.printStackTrace();

        }

    }

    private void setLabels( String cod_fact )
    {

        compras = new Compras();

        compras = comprasDao.getCoprasByCodFact( cod_fact );
        System.out.println( "CodigoFact" + cod_fact );
        lb_fornecedor_nome.setText( compras.getFkFornecedor().getNome() );

    }

    private void busca_compras()
    {
        String cod_fact = lista_solicitacoes.getSelectedValue();
        encomenda_global = comprasDao.findByCodFact( cod_fact );
        fornecedor = encomenda_global.getFkFornecedor();
//            cmbFornecedor.setSelectedItem( encomenda_global.getFkFornecedor().getNome() );
        lb_ano_encomico.setText( "Ano Económico: " + encomenda_global.getFkAnoEconomico().getDesignacao() );
        cmbFornecedor.setSelectedItem( encomenda_global.getFkFornecedor().getNome() );

        lb_fornecedorNome.setText( encomenda_global.getFkFornecedor().getNome() );
        lb_fornecedor_endereco.setText( "Endereço: " + encomenda_global.getFkFornecedor().getEndereco() );
        lb_fornecedor_telefone.setText( "Telefone: " + encomenda_global.getFkFornecedor().getTelefone() );
        lb_fornecedor_email.setText( "Email: " + encomenda_global.getFkFornecedor().getEmail() );
        try
        {

            String pedido = lista_solicitacoes.getSelectedValue();
            List<ItemCompras> itemComprase = itemComprasDao.getComprasByDescricao( lista_solicitacoes.getSelectedValue() );

            if ( itemComprase.get( 0 ).getPkItmCompras() != 0 )
            {

                DefaultTableModel modelo = ( DefaultTableModel ) tabela_solicitacao_compras.getModel();
                remover_dados_tabela();
                for ( int i = 0; i < itemComprase.size(); i++ )
                {

                    modelo.addRow( new Object[]
                    {
                        itemComprase.get( i ).getFkProduto().getCodigo(),
                        itemComprase.get( i ).getFkProduto().getDesignacao(),
                        itemComprase.get( i ).getQuantidade(),
                        itemComprase.get( i ).getPrecoCompra(),
                        itemComprase.get( i ).getDesconto(),
                        itemComprase.get( i ).getValorIva(),
                        itemComprase.get( i ).getTotal()

                    } );
                }
            }
            else
            {
                remover_dados_tabela();

            }

            this.compras = encomendaDao.findByCodFact( pedido );
            setLabels( compras.getCodFact() );
        }
        catch ( Exception e )
        {
            e.printStackTrace();
        }

    }

    private int getIdFornecedor()
    {

        try
        {
            String nome = lista_solicitacoes.getSelectedValue();
            return fornecedorDao.getIdByDescricao( nome );

        }
        catch ( Exception e )
        {
            return 0;
        }

    }

    private static double getTotalVendaIVASemIncluirDesconto()
    {
        double taxa = 0, total_iva_local = 0, preco_unitario = 0, sub_total_iliquido = 0;
        int qtd = 0;

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            preco_unitario = CfMethods.parseMoedaFormatada( modelo.getValueAt( i, 2 ).toString() );
            qtd = Integer.parseInt( modelo.getValueAt( i, 3 ).toString() );
            sub_total_iliquido = ( preco_unitario * qtd );
            taxa = Double.parseDouble( modelo.getValueAt( i, 6 ).toString() );
            total_iva_local += ( ( ( sub_total_iliquido ) * ( taxa / 100 ) ) );
        }

        return total_iva_local;
    }

    private static double getTotalVendaIVASemIncluirDesconto( List<ItemCompras> list )
    {
        double taxa = 0, total_iva_local = 0, preco_unitario = 0, sub_total_iliquido = 0;
        double qtd = 0;

        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();

        for ( ItemCompras itemCompras : list )
        {
            preco_unitario = itemCompras.getPrecoCompra();
            qtd = itemCompras.getQuantidade();
            sub_total_iliquido = ( preco_unitario * qtd );
            taxa = itemCompras.getValorIva();
            total_iva_local += ( ( ( sub_total_iliquido ) * ( taxa / 100 ) ) );

        }

        return total_iva_local;
    }

    private static double getTotalIliquido()
    {
        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        int qtd = 0;
        double total_iliquido_local = 0, preco_unitario = 0;

        for ( int i = 0; i < modelo.getRowCount(); i++ )
        {
            preco_unitario = CfMethods.parseMoedaFormatada( modelo.getValueAt( i, 2 ).toString() );
            qtd = Integer.parseInt( modelo.getValueAt( i, 3 ).toString() );
            total_iliquido_local += ( preco_unitario * qtd );

        }

        return total_iliquido_local;
    }

    private static double getTotalIliquido( List<ItemCompras> lista )
    {
        DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        double qtd = 0;
        double total_iliquido_local = 0, preco_unitario = 0;

        for ( ItemCompras itemCompras : lista )
        {
            preco_unitario = itemCompras.getPrecoCompra();
            qtd = itemCompras.getQuantidade();
            total_iliquido_local += ( preco_unitario * qtd );
        }

        return total_iliquido_local;
    }

    private static double getGrossTotal()
    {
        System.out.println( "TOTALILIQUIDO: " + getTotalVendaIVASemIncluirDesconto() );
        System.out.println( "TOTALVENDAIVASEMDESCONTO: " + getTotalVendaIVASemIncluirDesconto() );
        return getTotalIliquido() + getTotalVendaIVASemIncluirDesconto();
    }

    private static double getGrossTotal( List<ItemCompras> lista )
    {
        System.out.println( "TOTALILIQUIDO: " + getTotalVendaIVASemIncluirDesconto( lista ) );
        System.out.println( "TOTALVENDAIVASEMDESCONTO: " + getTotalVendaIVASemIncluirDesconto( lista ) );
        return getTotalIliquido( lista ) + getTotalVendaIVASemIncluirDesconto( lista );
    }

    private TbDesconto getDesconto()
    {
        TbDesconto desconto = descontoDao.get_desconto_cliente_produto( getIdCliente(), getCodigoProduto() );
        return desconto;
    }

    private double getDescontoPercentagem()
    {
        TbDesconto desconto = getDesconto();
        return desconto.getValor();
    }

    private double getTaxaImposto( int idProduto )
    {
        return produtoImpostoDao.getTaxaByIdProduto( idProduto );
    }

    private static double getValorComIVA( int qtd, double taxa, double preco_venda, double desconto )
    {
        double subtotal_linha = ( preco_venda * qtd );
        double desconto_valor = ( subtotal_linha * ( desconto / 100 ) );
        double valor_iva = 1 + ( taxa / 100 );//
        return ( ( subtotal_linha - desconto_valor ) * valor_iva );

    }

    private void tabela_solicitacao_comprasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabela_solicitacao_comprasMouseClicked
        // TODO add your handling code here:

        if ( evt.getClickCount() >= 2 )
        {
//              mostrar_dados(); 
        }

    }//GEN-LAST:event_tabela_solicitacao_comprasMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try
        {
            porocedimento_actualizar();
//            procedimento_salvar();

        }
        catch ( Exception e )
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cmbFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFornecedorActionPerformed
        // TODO add your handling code here:
        mostrar_fornecedor();
    }//GEN-LAST:event_cmbFornecedorActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        remover_item_carrinho1();
    }//GEN-LAST:event_jButton3ActionPerformed

    public void remover_item_carrinho1()
    {

        DefaultTableModel modelo = ( DefaultTableModel ) tabela_solicitacao_compras.getModel();
        modelo.removeRow( tabela_solicitacao_compras.getSelectedRow() );

    }

    private static void mostrar_fornecedor()
    {
        fornecedor = fornecedorDao.getFornecedorByNome( cmbFornecedor.getSelectedItem().toString() );

//        limpar_cabecario();
        if ( fornecedor != null )
        {
            cmbFornecedor.setSelectedItem( fornecedor.getNome() );
//            lb_fornecedor_endereco.setText( "Endereço: " + fornecedor.getEndereco() );
//            lb_fornecedor_telefone.setText( "Telefone: " + fornecedor.getTelefone() );
//            lb_fornecedor_email.setText( "Email: " + fornecedor.getEmail() );
        }
        else
        {
            fornecedor = null;
            //cmbFornecedor.setSelectedIndex( 0 );
        }

    }

    private int getIdCompras()
    {
        return comprasDao.getComprasByNome( String.valueOf( lista_solicitacoes.getSelectedValue() ) );
    }

    public void procedimento_salvar()
    {
        Compras compras = comprasDao.findCompras( getIdCompras() );

        try
        {

            compras.setAutorizado( true );
            comprasDao.edit( compras );

            actualizar_item_encomenda( compras.getPkCompra() );
            JOptionPane.showMessageDialog( null, "Solicitação aprovada com sucesso!..." );
            mostrar_despachos();

        }
        catch ( Exception e )
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog( null, "Erro ao alterar ", "ERRO", JOptionPane.ERROR_MESSAGE );
        }

    }

    private void actualizar_item_encomenda( int id_encomenda )
    {

        DefaultTableModel modelo = ( DefaultTableModel ) tabela_solicitacao_compras.getModel();
        boolean operacao_efectuada = true;

        Compras compras = comprasDao.findCompras( id_encomenda );

        for ( int i = 0; i < tabela_solicitacao_compras.getRowCount(); i++ )
        {
            itemCompras = new ItemCompras();
            itemCompras.setFkCompra( comprasDao.findCompras( comprasDao.getIdByDescricao( String.valueOf( tabela_solicitacao_compras.getModel().getValueAt( i, 0 ) ) ) ) );
            itemCompras.setQuantidade( Double.parseDouble( String.valueOf( tabela_solicitacao_compras.getValueAt( i, 2 ) ) ) );
            itemCompras.setPrecoCompra( Double.parseDouble( String.valueOf( tabela_solicitacao_compras.getValueAt( i, 3 ) ) ) );
            itemCompras.setFkCompra( compras );
            try
            {
                itemCompraDao.edit( itemCompras );
            }
            catch ( Exception e )
            {
                e.printStackTrace();
                operacao_efectuada = false;
                break;
            }
        }

        if ( operacao_efectuada )
        {
            limpar();

            JOptionPane.showMessageDialog( null, "Encomenda actualizada com sucesso!..." );
            Compras object = comprasDao.findCompras( id_encomenda );

        }
        else
        {
            JOptionPane.showMessageDialog( null, "Erro ao Registrar a Encomenda:    ", "ERRO", JOptionPane.ERROR_MESSAGE );

        }

    }

    private void mostrar_despachos()
    {

        List<ItemCompras> lista_aux = itemCompraDao.buscaTodosByPedido( true );

        lista_local.clear();

        for ( int i = 0; i < lista_aux.size(); i++ )
        {
            lista_local.addElement( lista_aux.get( i ).getFkProduto().getDesignacao()
            );
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main( String args[] )
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for ( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels() )
            {
                if ( "Windows".equals( info.getName() ) )
                {
                    javax.swing.UIManager.setLookAndFeel( info.getClassName() );
                    break;
                }
            }
        }
        catch ( ClassNotFoundException ex )
        {
            java.util.logging.Logger.getLogger( AprovacaoCompraVisao.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        catch ( InstantiationException ex )
        {
            java.util.logging.Logger.getLogger( AprovacaoCompraVisao.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        catch ( IllegalAccessException ex )
        {
            java.util.logging.Logger.getLogger( AprovacaoCompraVisao.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        catch ( javax.swing.UnsupportedLookAndFeelException ex )
        {
            java.util.logging.Logger.getLogger( AprovacaoCompraVisao.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater( new Runnable()
        {
            public void run()
            {
                try
                {

                    new AprovacaoCompraVisao( 15, BDConexao.getInstancia() ).setVisible( true );

                }
                catch ( Exception e )
                {
                    e.printStackTrace();
                }
            }
        } );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JComboBox<String> cmbFornecedor;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JLabel lb_ano_encomico;
    private javax.swing.JLabel lb_fornecedorNome;
    private static javax.swing.JLabel lb_fornecedor_email;
    private static javax.swing.JLabel lb_fornecedor_endereco;
    private javax.swing.JLabel lb_fornecedor_nome;
    private static javax.swing.JLabel lb_fornecedor_telefone;
    private javax.swing.JList<String> lista_solicitacoes;
    private javax.swing.JTable tabela_solicitacao_compras;
    // End of variables declaration//GEN-END:variables

    private void remover_dados_tabela()
    {

        DefaultTableModel modelo = ( DefaultTableModel ) tabela_solicitacao_compras.getModel();

        modelo.setRowCount( 0 );

    }

    private void salvar_item_encomenda1( int id_compra )
    {

        DefaultTableModel modelo = ( DefaultTableModel ) tabela_solicitacao_compras.getModel();
        boolean operacao_efectuada = true;

        Compras compra = comprasDao.findCompras( id_compra );

        if ( !tabela_vazia() )
        {

            for ( int i = 0; i < tabela_solicitacao_compras.getRowCount(); i++ )
            {
                itemCompras = new ItemCompras();
//      

                //itemCompras.setFkProduto(produtoDao.findTbProduto(Integer.parseInt((tabela_solicitacao_compras.getValueAt(i, 0)))));
                int cod_produto = Integer.parseInt( modelo.getValueAt( i, 0 ).toString() );
                itemCompras.setFkProduto( produtoDao.findTbProduto( cod_produto ) );
                itemCompras.setQuantidade( Double.parseDouble( String.valueOf( tabela_solicitacao_compras.getValueAt( i, 2 ) ) ) );
                itemCompras.setPrecoCompra( Double.parseDouble( String.valueOf( tabela_solicitacao_compras.getValueAt( i, 3 ) ) ) );
                itemCompras.setDesconto( Double.parseDouble( String.valueOf( tabela_solicitacao_compras.getValueAt( i, 4 ) ) ) );
                itemCompras.setValorIva( Double.parseDouble( String.valueOf( tabela_solicitacao_compras.getValueAt( i, 5 ) ) ) );
                itemCompras.setTotal( Double.parseDouble( String.valueOf( tabela_solicitacao_compras.getValueAt( i, 6 ) ) ) );

                itemCompras.setFkCompra( compra );
                try
                {
                    itemCompraDao.create( itemCompras );
                }
                catch ( Exception e )
                {
                    e.printStackTrace();
                    operacao_efectuada = false;
                    break;
                }
            }

        }
        else
        {
            JOptionPane.showMessageDialog( null, "Pf! adiciona os campos na tabela", "AVISO", JOptionPane.WARNING_MESSAGE );
            operacao_efectuada = false;
        }

        if ( operacao_efectuada )
        {
            limpar();

            JOptionPane.showMessageDialog( null, "Aprovação de Solicitação de Compras efectuada com sucesso!..." );

        }
        else
        {
            JOptionPane.showMessageDialog( null, "Erro ao autorizar a solicitação de Compras:    ", "ERRO", JOptionPane.ERROR_MESSAGE );

        }

    }

}
