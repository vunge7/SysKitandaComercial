/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package visao;

import controller.ItemVendaController;
import controller.StockController;
import controller.TipoClienteController;
import controller.VendaController;
import dao.AnoEconomicoDao;
import dao.ArmazemDao;
import dao.BancoDao;
import dao.CambioDao;
import dao.ClienteDao;
import dao.DescontoDao;
import dao.DocumentoDao;
import dao.ItemVendaDao;
import dao.LugarDao;
import dao.MesasDao;
import dao.MoedaDao;
import dao.PrecoDao;
import dao.ProdutoDao;
import dao.ProdutoImpostoDao;
import dao.ProdutoIsentoDao;
import dao.StockDao;
import dao.TipoProdutoDao;
import dao.UsuarioDao;
import dao.VasilhameDao;
import dao.VendaDao;
import entity.AnoEconomico;
import entity.Cambio;
import entity.Documento;
import entity.TbItemVenda;
import entity.Moeda;
import entity.TbDesconto;
import entity.TbProduto;
import entity.TbStock;
import entity.TbUsuario;
import entity.TbVasilhame;
import entity.TbVenda;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.Vector;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import kitanda.util.CfMethods;
import lista.ListaVenda1;
import modelo.ClienteModelo;
import modelo.ItemVendaModelo;
import modelo.ProdutoModelo;
import modelo.StockModelo;
import modelo.TipoClienteModelo;
import modelo.VendaModelo;
import util.BDConexao;
import util.DVML;
import util.DVML.Abreviacao;
import util.JPAEntityMannagerFactoryUtil;
import util.MetodosUtil;
import static util.MetodosUtil.esvaziar_tabela;

/**
 *
 * @author Domingos Dala Vunge
 */
public class NotaLevantamentoVisao1 extends javax.swing.JFrame implements Runnable {
    
    private EntityManagerFactory emf = JPAEntityMannagerFactoryUtil.em;
    private VasilhameDao vasilhameDao;
    private static DescontoDao descontoDao;
    private static PrecoDao precoDao;
    private BancoDao bancoDao;
    private TbItemVenda itemVendaLevantamento;
    private TbStock stock_local;
    private TbVenda venda;
    public static ProdutoDao produtoDao;
    private static StockDao stockDao;
    private UsuarioDao usuarioDao;
    private DocumentoDao documentoDao;
    private static ClienteDao clienteDao;
    private static VendaDao vendaDao;
    private static MoedaDao moedaDao;
    private AnoEconomicoDao anoEconomicoDao;
    private static ArmazemDao armazemDao;
    private ItemVendaDao itemVendaDao;
    private TbVasilhame vasilhame;
    private Moeda moeda;
    private AnoEconomico anoEconomico;
    private static BDConexao conexao;
    private StockModelo stockModelo;
    private TipoClienteController tipoClienteController;
    private VendaController vendaController;
    private ItemVendaController itemVendaController;
    private ItemVendaModelo itemVendaModelo;
    private VendaModelo vendaModelo;
    private ClienteModelo clienteModelo;
    private static CambioDao cambioDao;
    private Documento documento;
    private static ProdutoImpostoDao produtoImpostoDao;
    private Cambio cambio;
    private TipoProdutoDao tipoProdutoDao;
    private static MesasDao mesasDao;
    private static LugarDao lugarDao;
    private int cod_usuario;
    private TipoClienteModelo tipoClienteModelo;
    private StockController stockController;
    private int linha = 0, coordenada = 1, doc_prox_cod = 0;
    private double soma_total = 0;
    private static double total_iva = 0;
    private ProdutoModelo produtoModelo;
    private static ProdutoIsentoDao produtoIsentoDao;
    private static int linha_actual = -1;
    
    private Abreviacao abreviacao;
    
    private Thread t;
    private String prox_doc;
    private EntityTransaction transaction;
    
    public NotaLevantamentoVisao1(int cod_usuario, BDConexao conexao) {
        
        initComponents();
        confiLabel();
        setLocationRelativeTo(null);
        setResizable(false);
        this.cod_usuario = cod_usuario;
        this.conexao = conexao;
        setWindowsListener();
        init();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenuItem1 = new javax.swing.JMenuItem();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jTextField3 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        lbTotalPagar = new javax.swing.JLabel();
        txtTotalQTD = new javax.swing.JTextField();
        btnProcessar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        lb_usuario = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_levantamento = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        lbCliente = new javax.swing.JLabel();
        lbEndereco = new javax.swing.JLabel();
        lbNIF = new javax.swing.JLabel();
        lbTelefone = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        lbCliente4 = new javax.swing.JLabel();
        lbCliente5 = new javax.swing.JLabel();
        lbCliente6 = new javax.swing.JLabel();
        lbCliente7 = new javax.swing.JLabel();
        lbCliente8 = new javax.swing.JLabel();
        txtNomeMotorista = new javax.swing.JTextField();
        txtDocBICE = new javax.swing.JTextField();
        txtMarcaCarro = new javax.swing.JTextField();
        txtMatricula = new javax.swing.JTextField();
        txtCor = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        lb_ano_academico1 = new javax.swing.JLabel();
        lb_usuario1 = new javax.swing.JLabel();
        txtRefDoc = new javax.swing.JTextField();
        lb_proximo_documento = new javax.swing.JLabel();
        lb_proximo_documento1 = new javax.swing.JLabel();
        cmbAnoEconomico = new javax.swing.JComboBox<>();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("...:::::  KITANDA - NOTA DE LEVANTAMENTO  ::::...");

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel1.setFont(new java.awt.Font("Showcard Gothic", 0, 24)); // NOI18N

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbTotalPagar.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbTotalPagar.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbTotalPagar.setText("Total Qtd :");
        jPanel8.add(lbTotalPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 120, 34));

        txtTotalQTD.setEditable(false);
        txtTotalQTD.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        txtTotalQTD.setForeground(new java.awt.Color(255, 0, 0));
        txtTotalQTD.setCaretColor(new java.awt.Color(255, 255, 255));
        txtTotalQTD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalQTDActionPerformed(evt);
            }
        });
        jPanel8.add(txtTotalQTD, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 160, 40));

        btnProcessar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnProcessar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/impressora1.png"))); // NOI18N
        btnProcessar.setText("Processar");
        btnProcessar.setToolTipText("Efectuar Venda");
        btnProcessar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessarActionPerformed(evt);
            }
        });
        jPanel8.add(btnProcessar, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 20, -1, 45));

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/LOGOUT - VERMELHO/Logout 32x32.png"))); // NOI18N
        btnCancelar.setAlignmentX(0.5F);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel8.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 20, 60, 45));

        lb_usuario.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        lb_usuario.setText("Conta:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 988, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lb_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        table_levantamento.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        table_levantamento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod.Art", "Descrição", "Qtd."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_levantamento.setCellSelectionEnabled(true);
        table_levantamento.setGridColor(new java.awt.Color(51, 153, 0));
        jScrollPane1.setViewportView(table_levantamento);
        table_levantamento.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (table_levantamento.getColumnModel().getColumnCount() > 0) {
            table_levantamento.getColumnModel().getColumn(0).setMaxWidth(100);
            table_levantamento.getColumnModel().getColumn(1).setPreferredWidth(250);
            table_levantamento.getColumnModel().getColumn(2).setMaxWidth(100);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Cliente"));

        lbCliente.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbCliente.setText("Cliente:");

        lbEndereco.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbEndereco.setText("Endereço");

        lbNIF.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbNIF.setText("NIF");

        lbTelefone.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbTelefone.setText("Telefone");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lbEndereco, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                        .addComponent(lbCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(lbNIF, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbCliente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbEndereco)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbNIF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbTelefone)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Motorista"));

        lbCliente4.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbCliente4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbCliente4.setText("Nº Doc(BI ou Carta de Condução):");

        lbCliente5.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbCliente5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbCliente5.setText("Marca do Carro:");

        lbCliente6.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbCliente6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbCliente6.setText("Matrícula:");

        lbCliente7.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbCliente7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbCliente7.setText("Cor:");

        lbCliente8.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lbCliente8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbCliente8.setText("Nome :");

        txtNomeMotorista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeMotoristaActionPerformed(evt);
            }
        });

        txtDocBICE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocBICEActionPerformed(evt);
            }
        });

        txtMarcaCarro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMarcaCarroActionPerformed(evt);
            }
        });

        txtMatricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMatriculaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lbCliente8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbCliente4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbCliente5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbCliente6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbCliente7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNomeMotorista)
                    .addComponent(txtDocBICE, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtMarcaCarro, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtMatricula, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(txtCor, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCliente8)
                    .addComponent(txtNomeMotorista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCliente4)
                    .addComponent(txtDocBICE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCliente5)
                    .addComponent(txtMarcaCarro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCliente6)
                    .addComponent(txtMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCliente7)
                    .addComponent(txtCor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lb_ano_academico1.setBackground(new java.awt.Color(4, 154, 3));
        lb_ano_academico1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        lb_ano_academico1.setForeground(new java.awt.Color(255, 255, 255));
        lb_ano_academico1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lb_ano_academico1.setText("NOTA DE LEVANTAMENTO");
        lb_ano_academico1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lb_ano_academico1.setOpaque(true);

        lb_usuario1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lb_usuario1.setText("Ref. Doc:");

        txtRefDoc.setBackground(new java.awt.Color(4, 154, 3));
        txtRefDoc.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        txtRefDoc.setForeground(new java.awt.Color(255, 255, 255));
        txtRefDoc.setCaretColor(new java.awt.Color(255, 255, 255));
        txtRefDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRefDocActionPerformed(evt);
            }
        });

        lb_proximo_documento.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        lb_proximo_documento.setText("PRÓXIMO DOC. : XX NL/A1");

        lb_proximo_documento1.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        lb_proximo_documento1.setText("Ano Econômico:");

        cmbAnoEconomico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbAnoEconomico.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lb_ano_academico1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lb_proximo_documento, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lb_proximo_documento1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbAnoEconomico, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lb_usuario1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRefDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lb_ano_academico1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lb_proximo_documento, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(cmbAnoEconomico, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lb_proximo_documento1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRefDoc)
                    .addComponent(lb_usuario1, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("...:::::  KITANDA - FACTURAÃO ::::...");

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void txtTotalQTDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalQTDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalQTDActionPerformed

    private void btnProcessarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessarActionPerformed
        
        procedimento_converter();
    }//GEN-LAST:event_btnProcessarActionPerformed

    private void txtRefDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRefDocActionPerformed
        // TODO add your handling code here:
        procedimento_busca();
    }//GEN-LAST:event_txtRefDocActionPerformed

    private void txtNomeMotoristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeMotoristaActionPerformed
        // TODO add your handling code here:
        txtDocBICE.requestFocus();
    }//GEN-LAST:event_txtNomeMotoristaActionPerformed

    private void txtDocBICEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocBICEActionPerformed
        // TODO add your handling code here:
        txtMarcaCarro.requestFocus();
    }//GEN-LAST:event_txtDocBICEActionPerformed

    private void txtMarcaCarroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMarcaCarroActionPerformed
        // TODO add your handling code here:
        txtMatricula.requestFocus();
    }//GEN-LAST:event_txtMarcaCarroActionPerformed

    private void txtMatriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMatriculaActionPerformed
        // TODO add your handling code here:
        txtCor.requestFocus();
    }//GEN-LAST:event_txtMatriculaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    public static javax.swing.JButton btnProcessar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JComboBox<String> cmbAnoEconomico;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JLabel lbCliente;
    private javax.swing.JLabel lbCliente4;
    private javax.swing.JLabel lbCliente5;
    private javax.swing.JLabel lbCliente6;
    private javax.swing.JLabel lbCliente7;
    private javax.swing.JLabel lbCliente8;
    private javax.swing.JLabel lbEndereco;
    private javax.swing.JLabel lbNIF;
    private javax.swing.JLabel lbTelefone;
    private javax.swing.JLabel lbTotalPagar;
    private javax.swing.JLabel lb_ano_academico1;
    private javax.swing.JLabel lb_proximo_documento;
    private javax.swing.JLabel lb_proximo_documento1;
    private javax.swing.JLabel lb_usuario;
    private javax.swing.JLabel lb_usuario1;
    public static javax.swing.JTable table_levantamento;
    private javax.swing.JTextField txtCor;
    private javax.swing.JTextField txtDocBICE;
    private javax.swing.JTextField txtMarcaCarro;
    private javax.swing.JTextField txtMatricula;
    private javax.swing.JTextField txtNomeMotorista;
    public static javax.swing.JTextField txtRefDoc;
    public static javax.swing.JTextField txtTotalQTD;
    // End of variables declaration//GEN-END:variables

    //verifica se o produto existe na tabela do formulário visão isto é na jTable
    private static boolean exist_produto_tabela_formulario(int codigo) {
        
        DefaultTableModel modelo = (DefaultTableModel) table_levantamento.getModel();
        
        for (int i = 0; i < modelo.getRowCount(); i++) {
            if (Integer.parseInt(String.valueOf(table_levantamento.getValueAt(i, 0))) == codigo) {
                linha_actual = i;
                return true;
            }
        }
        return false;
        
    }

    //actualiza a quantidade na tabela do formulário visão isto é na jTable
    private static void actuazlizar_quantidade_tabela_formulario(String quantidade, double desconto) {
        DefaultTableModel modelo = (DefaultTableModel) table_levantamento.getModel();
        double preco_venda = Double.parseDouble(String.valueOf(modelo.getValueAt(linha_actual, 2)));
        double total_item = preco_venda * Double.parseDouble(quantidade);
        total_item = total_item - desconto;
        modelo.setValueAt(quantidade, linha_actual, 3);
        modelo.setValueAt(total_item, linha_actual, 5);
        //a linha_actual recebe o default
        linha_actual = -1;
        
    }
    
    @Override
    public void run() {
        
    }
    
    public void actualizar_quantidade(double quantidade, TbStock stock) {
        
        double qtd = (stock.getQuantidadeExistente() - quantidade);
        stock.setQuantidadeExistente(qtd);
        try {
            stockDao.edit(stock);
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Falha ao actualizar a quantidade do produto no stock");
        }
        
    }
    
    private Integer getIdBanco() {
        return 0;
    }
    
    private void mostrar_nome() {
        TbUsuario usuario = usuarioDao.findTbUsuario(this.cod_usuario);
        //caso masculino
        if (usuario.getCodigoSexo().getCodigo() == 1) {
            lb_usuario.setText("Operador: " + usuario.getNome());
        } else {
            lb_usuario.setText("Operadora: " + usuario.getNome());
        }
    }
    
    public void limpar() {
        
        txtTotalQTD.setText("0");
        soma_total = 0;
        
        lbCliente.setText("");
        lbEndereco.setText("");
        lbNIF.setText("");
        lbTelefone.setText("");
        
    }
    
    public boolean campos_invalido_imprimir() {
        
      
        
        return false;
        
    }
    
    public boolean possivel_quantidade(int cod_produto, double qtd) {

        //System.err.println(conexao.getQuantidade_Existente_Publico(getCodigoProduto(), getCodigoArmazem()));  
        //  TbStock stock =  stockDao.getStockByDescricao(getCodigoProduto(), getCodigoArmazem() );
        double quant_possivel = conexao.getQuantidade_Existente_Publico(cod_produto, getCodigoArmazem()) - conexao.getQuantidade_minima_publico(cod_produto, getCodigoArmazem());
        //int quant_possivel = stock.getQuantidadeExistente() -  stock.getQuantBaixa();

        return quant_possivel >= qtd;
        
    }
    
    public double getPreco(int cod_produto, double qtd) {
        
        try {
            // return  precoDao.findTbPreco( precoDao.getUltimoIdPrecoByIdProduto(  getCodigoProduto() )  ).getPrecoVenda();

            return precoDao.findTbPreco(precoDao.getUltimoIdPrecoByIdProduto(cod_produto, qtd)).getPrecoVenda().doubleValue();
        } catch (Exception e) {
            return 0;
        }
        
    }
    
    private boolean transtorno() {
        
        int cod_produto = 0;
        double qtd = 0d, qtd_aceite = 0d;
        
        DefaultTableModel modelo = (DefaultTableModel) table_levantamento.getModel();
        boolean transtorno = false;
        
        for (int i = 0; i < table_levantamento.getRowCount(); i++) {
            
            cod_produto = Integer.parseInt(String.valueOf(table_levantamento.getModel().getValueAt(i, 0)));
            qtd = Double.parseDouble(String.valueOf(table_levantamento.getModel().getValueAt(i, 3)));
            
            if (!possivel_quantidade(cod_produto, qtd)) {
                
                transtorno = true;
                //qtd_aceite = conexao.getQuantidade_Existente_Publico(cod_produto, getCodigoArmazem());
                qtd_aceite = stockDao.getStockByDescricao(cod_produto, getCodigoArmazem()).getQuantidadeExistente();
                
                if (qtd_aceite != 0) {
                    
                    int opcao = JOptionPane.showConfirmDialog(null, "Desculpe pelo transtorno, o produto " + produtoDao.findTbProduto(cod_produto).getDesignacao() + " só é possivel  a " + qtd_aceite + " quantidade(s)" + ", contrariamente de " + qtd + "\n Deseja actualizar ou remover da tabela ?");
                    
                    if (opcao == JOptionPane.YES_OPTION) {
                        
                        modelo.setValueAt(qtd_aceite, i, 3);
                        double valor_iva = 0, taxa = 0, desconto = 0;
                        taxa = Double.parseDouble(modelo.getValueAt(i, 5).toString());
                        desconto = Double.parseDouble(modelo.getValueAt(i, 4).toString());
                        modelo.setValueAt((qtd_aceite * (getPreco(cod_produto, qtd_aceite) + getValorIVA(taxa, getPreco(cod_produto, qtd_aceite))) - desconto), i, 7);
                        
                    } else {
                        modelo.removeRow(i);
                    }
                    setTotalPagar();
                    valor_por_extenco();
                    
                } else {
                    modelo.removeRow(i);
                    
                    JOptionPane.showMessageDialog(null, "Desculpe pelo transtorno o produto " + produtoDao.findTbProduto(cod_produto).getDesignacao() + " já não se encontra disponível no stock", DVML.DVML_COMERCIAL, JOptionPane.WARNING_MESSAGE);
                }
                
            }
            
        }
        
        return transtorno;
        
    }
    
    public void procedimento_converter() {
        
        if (!campos_invalido_imprimir()) {
            btnProcessar.setEnabled(false);
            System.out.println("STATUS: a processar a factura");
            EntityManager em = JPAEntityMannagerFactoryUtil.createEntityManager();
            transaction = em.getTransaction();
            em.getTransaction().begin();
            salvar_venda();
            
        } else {
            JOptionPane.showMessageDialog(null, "Pf. Digite o Nome do Cliente!...", "AVISO", JOptionPane.WARNING_MESSAGE);
        }
    }

    /* CRIACAO DO GETS  */
    public static int getIdCliente() {
        try {
            String ref_doc = txtRefDoc.getText();
            TbVenda venda = vendaDao.findByCodFact(ref_doc, DVML.DOC_FACTURA_PROFORMA_PP);
            return venda.getCodigoCliente().getCodigo();
        } catch (Exception e) {
            return 0;
        }
        
    }
    
    public int getIdDocumento() {
        try {
            return DVML.DOC_NOTA_LEVANTAMENTO;
        } catch (Exception e) {
            return 0;
        }
    }
    
    public void calcularTroco() {
        String prefixo = "";
        double troco = 0;
    }
    
    private void procedimento_busca() {
        /**
         * @1. inserir a referência;
         * @1.1 Se o campo estiver vazio emitir a mensagem: "por favor insira a
         * refrência da pró-forma"
         * @2. buscar a venda relacionada com esta referência desde que o
         * documento seja do tipo pro-forma;
         * @2.1 Senão existe emitir uma mensagem: "Não existe pró-forma com esta
         * referência"
         * @3. percorrer e preencher os campos do formulário;
         * @4. setar o total
         * @5. setar cliente
         */

        //@1. Inserir a referência
        String ref_doc = txtRefDoc.getText();
        if (!ref_doc.equals("")) {
            //@2. buscar a venda relacionada com esta referência desde que o documento seja do tipo pro-forma;
            venda = vendaDao.findByCodFact(ref_doc, DVML.DOC_FACTURA_FT);
            if (venda != null) {

                /*@3. percorrer e preencher os campos do formulário;*/
                //3.1 preeenche o tipo documento
                //3.2 preenche o armazém
                //3.3 preenche a moeda
                //3.4 preencher a tabela com os itens
                List<TbItemVenda> linhas = venda.getTbItemVendaList();
                DefaultTableModel modelo = (DefaultTableModel) table_levantamento.getModel();
                //3.4.1 limpa a tabela
                modelo.setRowCount(0);
                for (TbItemVenda object : linhas) {
                    modelo.addRow(new Object[]{
                        object.getCodigoProduto().getCodigo(),
                        object.getCodigoProduto().getDesignacao(),
                        object.getQuantidade()
                    }
                    );
                }

                //@4.setar o total quantidade
                mostrarQtdTotal();
                //setTotalPagar();
                //@5.setar o cliente
                mostrar_dados_cliente();
                txtNomeMotorista.requestFocus();
                
            } else {
                procedimento_limpar_dados();
                JOptionPane.showMessageDialog(null, "Não existe pró-forma com esta referência", "AVISO", JOptionPane.WARNING_MESSAGE);
            }
            
        } else {
            JOptionPane.showMessageDialog(null, "por favor insira a refrência da pró-forma", "AVISO", JOptionPane.WARNING_MESSAGE);
        }
        
    }
    
    private void reset_combo() {
        
    }
    
    private void procedimento_limpar_dados() {
        limpar();
        esvaziar_tabela(table_levantamento);
        reset_combo();
    }
    
    private static void valor_por_extenco() {
        System.out.println("Valor XXXXXXX: " + CfMethods.parseMoedaFormatada(txtTotalQTD.getText()));
    }

    //----------- evento do teclado ---------------------------------------
    //----------- evento do teclado ---------------------------------------
    class TratarDesconto implements KeyListener {
        
        String prefixo = "";
        
        public void keyPressed(KeyEvent evt) {
            
            String prefixo = "";
            
            if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
                char key = evt.getKeyChar();
                double desconto = Double.parseDouble(prefixo);
                double total_pagar = Double.parseDouble(txtTotalQTD.getText().trim());
                double totalComDesconto = (total_pagar * desconto) / 100;
                double resultado = total_pagar - totalComDesconto;
                
                txtTotalQTD.setText(String.valueOf(resultado).trim());
                
            } else if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
                char key = evt.getKeyChar();
                
                double desconto = 0;
                double total_pagar = Double.parseDouble(txtTotalQTD.getText().trim());
                
                try {
                    desconto = Double.parseDouble(prefixo.toString().trim().substring(0, prefixo.length() - 2));
                    desconto = Double.parseDouble(prefixo);
                    total_pagar = Double.parseDouble(txtTotalQTD.getText().trim());
                    double totalComDesconto = (total_pagar * desconto) / 100;
                    double resultado = total_pagar - totalComDesconto;
                    txtTotalQTD.setText(String.valueOf(resultado).trim());
                } catch (Exception e) {
                    desconto = 0;
                }
                
            }
            
        }
        
        public void keyReleased(KeyEvent evt) {
        }
        
        public void keyTyped(KeyEvent evt) {
        }
    }

    //----------- evento do teclado ---------------------------------------
    public String getDataActual() {
        Calendar calendario = Calendar.getInstance();

        //buscar data
        int dia = calendario.get(Calendar.DAY_OF_MONTH);
        int mes = calendario.get(Calendar.MONTH);
        int ano = calendario.get(Calendar.YEAR);
        
        int hora = calendario.get(Calendar.HOUR_OF_DAY);
        int minuto = calendario.get(Calendar.MINUTE);
        int segundo = calendario.get(Calendar.SECOND);
        String data = ano + "-" + (mes + 1) + "-" + dia + " " + hora + ":" + minuto + ":" + segundo;
        
        return data;
        
    }
    
    public void salvarItemvenda() {
        
        int cod_venda = vendaDao.getLastCodigoVenda(DVML.DOC_NOTA_LEVANTAMENTO, getIdAnoEconomico(), conexao);
        boolean efectuada = true;
        
        List<TbItemVenda> linhas = vendaDao.findTbVenda(cod_venda).getTbItemVendaList();
        System.out.println("Codigo Venda: " +cod_venda);
        System.out.println("Size linha: " +linhas.size());
        TbItemVenda itemVenda, item;
        
//        for (int i = 0; i <linhas.size(); i++) {
//            try {  
//                System.out.println("Valor de i: " +(i+1));
//                item = linhas.get(i);
//                itemVenda = new TbItemVenda();
//                itemVenda.setCodigo(0);
//                itemVenda.setCodigoProduto( item.getCodigoProduto() ) ;
//                itemVenda.setCodigoVenda(  vendaDao.findTbVenda(cod_venda) );
//                itemVenda.setQuantidade( item.getQuantidade() );
//                itemVenda.setDesconto( item.getDesconto() );
//                itemVenda.setValorIva( item.getValorIva() );
//                itemVenda.setMotivoIsensao( item.getMotivoIsensao() );
//                itemVenda.setCodigoIsensao( item.getCodigoIsensao());
//                itemVenda.setTotal( item.getTotal() );
//                itemVenda.setFkPreco( item.getFkPreco() );
//
//                /*setando a mesa e lugar para cunprir a formalidade só aplica-se somente para resstauração*/
//                itemVenda.setFkLugares( item.getFkLugares() );
//                itemVenda.setFkMesas( item.getFkMesas() );
//                //cria o item venda
//                itemVendaDao.create(itemVenda);
//                
//            } catch (Exception e) {
//                e.printStackTrace();
//                efectuada = false;
//                transaction.rollback();
//                JOptionPane.showMessageDialog(null, "Falha ao registrar o produto: " + itemVendaLevantamento.getCodigoProduto().getCodigo() + " na Factura");
//                break;
//            }
//        }
        
        if (efectuada) {
            JOptionPane.showMessageDialog(null, "Factura efectuada com sucesso!..");
            String motivos_isentos = "";
            try {
                
                limpar();
                remover_all_produto();
                //adicionar_preco_quantidade_anitgo();

            } catch (Exception e) {
            }
            actualizar_cod_doc();
            // txtClienteNome.requestFocus();
            actualizar_abreviacao();
            //Chama a factura e imprime directamente para a imprissora que estiver devenidade no sistema operativo
            ListaVenda1 listaVenda1 = new ListaVenda1(cod_venda, this.abreviacao, false, false, "Original", motivos_isentos);
            //ListaVenda1 listaVenda2 = new ListaVenda1(cod_venda, false, ck_simplificada.isSelected());
            //Em caso em que a impreensão é dupla
            //ListaVendaDuplicado listaVenda1 = new ListaVendaDuplicado(cod_venda, setPeformance(), ckImpreesao.isSelected());
        }
        
    }
    
    public static void setTotalPagar() {
        //DefaultTableModel modelo = ( DefaultTableModel ) table.getModel();
        double total_liquido = getTotalAOALiquido();
        txtTotalQTD.setText(CfMethods.formatarComoMoeda(total_liquido));
        reset_valor_entregue();
        
    }
    
    private static void calculaTotalIVA() {
        DefaultTableModel modelo = (DefaultTableModel) table_levantamento.getModel();
        double iva = 0, preco = 0;
        int qtd = 0;
        
        total_iva = 0;
        for (int i = 0; i < modelo.getRowCount(); i++) {
            
            preco = CfMethods.parseMoedaFormatada(modelo.getValueAt(i, 2).toString());
            qtd = Integer.parseInt(modelo.getValueAt(i, 3).toString());
            iva = Double.parseDouble(modelo.getValueAt(i, 5).toString());
            iva = (iva / 100);
            
            total_iva += (iva * preco) * qtd;
            
        }
        System.out.println("TOTAL IVA: " + total_iva);
        
    }
    
    public void getDesconto_Quantidade() throws SQLException {
    }
    
    public double getDescontoActual() throws SQLException {
        
        ResultSet resultado = conexao.executeQuery("SELECT valor FROM tb_desconto WHERE idDesconto = 1");
        double valor = 0;
        if (resultado.next()) {
            valor = resultado.getDouble("valor");
        }
        return valor;
        
    }
    
    public void remover_all_produto() throws SQLException {
        
        DefaultTableModel modelo = (DefaultTableModel) table_levantamento.getModel();
        for (int i = modelo.getRowCount() - 1; i >= 0; i--) {
            modelo.removeRow(i);
        }
        
    }
    
    public void remover_produto() throws SQLException {
        
        if (linha > 0) {
            
            table_levantamento.getModel().setValueAt(0, linha - 1, 0);
            table_levantamento.getModel().setValueAt("", linha - 1, 1);
            table_levantamento.getModel().setValueAt(0, linha - 1, 2);
            table_levantamento.getModel().setValueAt(0, linha - 1, 3);
            table_levantamento.getModel().setValueAt(0, linha - 1, 4);
            table_levantamento.getModel().setValueAt(0, linha - 1, 5);
            
            setTotalPagar();
            linha--;
            coordenada--;
            
            calcularTroco();
        } else {
            JOptionPane.showMessageDialog(null, "Impossivel Remover Produtos na Tabela!....");
        }
        
    }
    
    public void actualizar_quantidade(int cod, int quantidade) {
        
        String sql = "UPDATE tb_stock SET quantidade_existente =  " + (getQuantidadeProduto(cod) - quantidade) + " WHERE cod_produto_codigo = " + cod + " AND  cod_armazem = " + getCodigoArmazem();
        System.out.println("Quantidade   : " + quantidade);
        conexao.executeUpdate(sql);
        
    }
    
    public int getQuantidadeProduto(int cod_produto) {
        
        String sql = "SELECT quantidade_existente FROM  tb_stock WHERE  cod_produto_codigo = " + cod_produto + " AND cod_armazem = " + getCodigoArmazem();
        
        ResultSet rs = new BDConexao().executeQuery(sql);
        
        try {
            if (rs.next()) {
                return rs.getInt("quantidade_existente");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            return 0;
        }
        
        return 0;
    }
    
    public int getLastCodigo(String tabela) {
        
        String sql = "SELECT max(codigo) FROM " + tabela;
        
        ResultSet rs = new BDConexao().executeQuery(sql);
        
        try {
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            return 0;
        }
        
        return 0;
    }
    
    public static int getCodigoArmazem() {
        //return conexao.getCodigoPublico("tb_armazem", String.valueOf(  cmbArmazem.getSelectedItem() ) );   
        return 1;
    }
    
    public void salvar_venda() {
        
        TbVenda nota_levantamento = new TbVenda();
        nota_levantamento = (TbVenda) venda;
        nota_levantamento.setCodigo(0);
        nota_levantamento.setRefCodFact( venda.getCodFact()   );
         nota_levantamento.setRefDataFact(venda.getDataVenda());
        nota_levantamento.setFkDocumento(documento);
        nota_levantamento.setCodFact(  getCodDocActualizador() );
        nota_levantamento.setHashCod(MetodosUtil.criptografia_hash(nota_levantamento, nota_levantamento.getTotalGeral().doubleValue(), conexao)); // não coloquei o totalGross porque não há necessidade.
        nota_levantamento.setAssinatura( MetodosUtil.assinatura_doc( nota_levantamento.getHashCod() ) );
        nota_levantamento.setDataVenda(new Date());
        nota_levantamento.setHora(new Date());
        nota_levantamento.setNomeMotorista(txtNomeMotorista.getText());
        nota_levantamento.setMarcaCarro(txtMarcaCarro.getText());
        nota_levantamento.setCorCarro(txtCor.getText());
        nota_levantamento.setNDocMotorista(txtDocBICE.getText());
        nota_levantamento.setMatricula(txtMatricula.getText());
        nota_levantamento.setCodigoUsuario( usuarioDao.findTbUsuario(cod_usuario ));
        nota_levantamento.setTbItemVendaList( venda.getTbItemVendaList());
     
        try {
            vendaDao.create(nota_levantamento);
            System.out.println("STATUS:factura criada com sucesso.");
            int cod_venda = vendaDao.getLastCodigoVenda(DVML.DOC_NOTA_LEVANTAMENTO, getIdAnoEconomico(), conexao);
 
            actualizar_cod_doc();
            // txtClienteNome.requestFocus();
            actualizar_abreviacao();
            JOptionPane.showMessageDialog(null, "Documento criado com sucesso!");
            ListaVenda1 listaVenda1 = new ListaVenda1(cod_venda, this.abreviacao, false, false, "Original", "");
            
            System.out.println("STATUS:itens adicionado na facrtura com sucesso.");
        } catch (Exception e) {
            System.err.println("STATUS: falha ao actualizar a factura");
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Falha ao Processar a Factura", "FALHA", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private String getCodDocActualizador() {
        try {
            this.documento = documentoDao.findDocumento(getIdDocumento());
            this.anoEconomico = anoEconomicoDao.findAnoEconomico(getIdAnoEconomico());
            // this.doc_prox_cod = documento.getCodUltimoDoc() + 1;
            this.doc_prox_cod = vendaDao.getUltimaContagemByIdDocumentoAndAnoEconomico(getIdDocumento(), getIdAnoEconomico(), conexao) + 1;
            prox_doc = documento.getAbreviacao();
            //FA Série / codigo
            prox_doc += " " + this.anoEconomico.getSerie() + "/" + this.doc_prox_cod;
            return prox_doc;
        } catch (Exception e) {
            return "";
        }
    }
    
    private String getNomeCliente() {
        
        return "";
        
    }
    
    private String getClienteNif() {
        try {
            return clienteDao.findTbCliente(getIdCliente()).getNif();
        } catch (Exception e) {
            return "";
        }
    }
    
    public static void main(String[] args) throws SQLException {
        new NotaLevantamentoVisao1(15, new BDConexao()).show(true);
    }
    
    public void confiLabel() {
        
        lbTotalPagar.setHorizontalAlignment(JLabel.RIGHT);
        //lbCliente.setHorizontalAlignment(JLabel.RIGHT);

    }

    //devolve o codigo_barra de uma determinada tabela
    public double getPrecoProduto(int codProduto, boolean stocavel) {
        
        String sql = "";
        
        if (stocavel) {
            sql = "SELECT preco_venda FROM tb_stock WHERE( cod_produto_codigo = " + codProduto + " AND cod_armazem = " + getCodigoArmazem() + ")";
        } else {
            sql = "SELECT preco FROM tb_produto WHERE( codigo = " + codProduto + ")";
            JOptionPane.showMessageDialog(null, "O produto provavelmente nap estocavel!...");
        }
        ResultSet rs = conexao.executeQuery(sql);
        
        try {
            if (rs.next()) {
                if (stocavel) {
                    return rs.getDouble("preco_venda");
                } else {
                    return rs.getDouble("preco");
                }
            }
        } catch (SQLException ex) {
            return 0;
        }
        
        return 0;
    }
    
    public boolean setCredito() {
        //return rbCredito.isSelected();
        return false;
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">    
    private void init() {
        
        vasilhameDao = new VasilhameDao(emf);
        descontoDao = new DescontoDao(emf);
        precoDao = new PrecoDao(emf);
        produtoDao = new ProdutoDao(emf);
        stockDao = new StockDao(emf);
        usuarioDao = new UsuarioDao(emf);
        clienteDao = new ClienteDao(emf);
        vendaDao = new VendaDao(emf);
        armazemDao = new ArmazemDao(emf);
        itemVendaDao = new ItemVendaDao(emf);
        tipoProdutoDao = new TipoProdutoDao(emf);
        bancoDao = new BancoDao(emf);
        anoEconomicoDao = new AnoEconomicoDao(emf);
        documentoDao = new DocumentoDao(emf);
        moedaDao = new MoedaDao(emf);
        cambioDao = new CambioDao(emf);
        mesasDao = new MesasDao(emf);
        lugarDao = new LugarDao(emf);
        produtoImpostoDao = new ProdutoImpostoDao(emf);
        produtoIsentoDao = new ProdutoIsentoDao(emf);
        //txtDesconto.setText("0");

        mostrar_nome();
        cmbAnoEconomico.setModel(new DefaultComboBoxModel((Vector) anoEconomicoDao.buscaTodos()));

        //desactivar_campos();
        mostrar_ano_economico_serie();
        lb_proximo_documento.setText("");
        txtTotalQTD.setText(CfMethods.formatarComoMoeda(0.0));
//        sp_valor_entregue.addKeyListener(new TratarEventoValorEntregue());
//        sp_valor_entregue.addKeyListener(new TratarTroco());

    }// </editor-fold>   

    private void mostrar_ano_economico_serie() {

//        this.anoEconomico = anoEconomicoDao.getLastObject();
        this.anoEconomico = anoEconomicoDao.findAnoEconomico(getIdAnoEconomico());
//        lb_ano_academico.setText( "ANO ECONÔMICO: " + this.anoEconomico.getSerie() );

    }
    
    private void mostrar_proximo_codigo_documento() {
        try {
            this.documento = documentoDao.findDocumento(getIdDocumento());
            this.doc_prox_cod = documento.getCodUltimoDoc() + 1;
            //prox_doc = " " + documento.getAbreviacao();
            prox_doc = documento.getAbreviacao();
            //FA Série / codigo
            prox_doc += " " + this.anoEconomico.getSerie() + "/" + this.doc_prox_cod;
            lb_proximo_documento.setText("PRÓXIMO DOC. :" + prox_doc);
        } catch (Exception e) {
            this.documento = null;
            lb_proximo_documento.setText("");
        }
    }
    
    private static double getTaxaImposto(int idProduto) {
        return produtoImpostoDao.getTaxaByIdProduto(idProduto);
    }
    
    private static String getMotivoIsensao(int idProduto) {
        return produtoIsentoDao.getRegimeIsensaoByIdProduto(idProduto);
    }
    
    private static double getValorIVA(double taxa, double preco_venda) {
        return (((taxa / 100) + 1) * preco_venda);
    }
    
    private void actualizar_cod_doc() {
        this.documento.setCodUltimoDoc(this.doc_prox_cod);
        this.documento.setDescricaoUltimoDoc(this.prox_doc);
        this.documento.setUltimaData(new Date());
        try {
            documentoDao.edit(documento);
        } catch (Exception e) {
            System.err.println("Falha ao actualizar o documento");
        }
    }
    
    private void setWindowsListener() {
        
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowActivated(WindowEvent e) {
                mostrar_proximo_codigo_documento();
            }
            
        });
        
    }
    
    private void actualizar_abreviacao() {
        
        switch (getIdDocumento()) {
           
            case DVML.DOC_NOTA_LEVANTAMENTO:
                this.abreviacao = Abreviacao.NL;
                break;
            default:
                break;
        }
        
    }
    
    public static double getDesconto_produto(int id_produto, double preco_total_produto, double qtd) {
        
        TbDesconto desconto = descontoDao.get_desconto_cliente_produto(getIdCliente(), id_produto);
        Double quantidade = desconto.getQuantidade();
        double percentagem_desconto = desconto.getValor();
        
        if (qtd >= quantidade) {
            return preco_total_produto * (percentagem_desconto / 100);
        } else {
            return 0.0;
        }
        
    }
    
    private void actualizar_moeda() {
//        CfMethods.MOEDA = getMoeda().getAbreviacao();
//        mostrar_abreviacao_moeda_cambio();
//        refresh_table();
    }
    
    private static double getTotalIncidencia() {
        DefaultTableModel modelo = (DefaultTableModel) table_levantamento.getModel();
        double qtd = 0;
        double incidencia = 0d, preco_unitario = 0d, desconto_valor_linha = 0;
        
        for (int i = 0; i < modelo.getRowCount(); i++) {
            preco_unitario = CfMethods.parseMoedaFormatada(modelo.getValueAt(i, 2).toString());
            qtd = Double.parseDouble(modelo.getValueAt(i, 3).toString());
            double valor_percentagem = Double.parseDouble(modelo.getValueAt(i, 4).toString());
            double taxa = Double.parseDouble(modelo.getValueAt(i, 5).toString());
            // a incidência só é aplicável ao produtos sujeitos a iva 
            if (taxa != 0) {
                desconto_valor_linha = ((valor_percentagem) / 100);
                double valor_unitario = (preco_unitario * qtd);
                incidencia += ((valor_unitario) - (valor_unitario * desconto_valor_linha));
                
            }
            
        }
        
        return incidencia;
    }
    
    private static double getTotalImposto() {
        DefaultTableModel modelo = (DefaultTableModel) table_levantamento.getModel();
        double qtd = 0;
        double imposto = 0d, preco_unitario = 0d, desconto_valor_linha = 0;
        
        for (int i = 0; i < modelo.getRowCount(); i++) {
            preco_unitario = CfMethods.parseMoedaFormatada(modelo.getValueAt(i, 2).toString());
            qtd = Double.parseDouble(modelo.getValueAt(i, 3).toString());
            double valor_percentagem = Double.parseDouble(modelo.getValueAt(i, 4).toString());
            double taxa = Double.parseDouble(modelo.getValueAt(i, 5).toString());
            // a incidência só é aplicável ao produtos sujeitos a iva 
            if (taxa != 0) {
                double valor_unitario = (preco_unitario * qtd);
                desconto_valor_linha = valor_unitario * ((valor_percentagem) / 100);
                imposto += ((valor_unitario - desconto_valor_linha) * (taxa / 100));
                
            }
            
        }
        
        return imposto;
    }
    
    private static double getTotalIncidenciaIsento() {
        DefaultTableModel modelo = (DefaultTableModel) table_levantamento.getModel();
        double qtd = 0;
        double incidencia_isento = 0d, preco_unitario = 0d, desconto_valor_linha = 0;
        
        for (int i = 0; i < modelo.getRowCount(); i++) {
            preco_unitario = CfMethods.parseMoedaFormatada(modelo.getValueAt(i, 2).toString());
            qtd = Double.parseDouble(modelo.getValueAt(i, 3).toString());
            double valor_percentagem = Double.parseDouble(modelo.getValueAt(i, 4).toString());
            double taxa = Double.parseDouble(modelo.getValueAt(i, 5).toString());
            // a incidência também é aplicável à produtos isentos do iva 
            if (taxa == 0) {
                desconto_valor_linha = ((valor_percentagem) / 100);
                double valor_unitario = (preco_unitario * qtd);
                incidencia_isento += ((valor_unitario) - (valor_unitario * desconto_valor_linha));
                
            }
            
        }
        System.err.println("INCIDENCIA ISENTO:  " + incidencia_isento);
        return incidencia_isento;
    }
    
    private static double getDescontoComercial() {
        DefaultTableModel modelo = (DefaultTableModel) table_levantamento.getModel();
        double qtd = 0;
        double desconto_comercial = 0d, preco_unitario = 0d, desconto_valor_linha = 0d;
        
        for (int i = 0; i < modelo.getRowCount(); i++) {
            preco_unitario = CfMethods.parseMoedaFormatada(modelo.getValueAt(i, 2).toString());
            qtd = Double.parseDouble(modelo.getValueAt(i, 3).toString());
            double valor_percentagem = Double.parseDouble(modelo.getValueAt(i, 4).toString());
            desconto_valor_linha = ((valor_percentagem) / 100);
            double valor_unitario = (preco_unitario * qtd);
            desconto_comercial += (valor_unitario * desconto_valor_linha);
            
        }
        
        return desconto_comercial;
    }
    
    private static double getTotalIliquido() {
        DefaultTableModel modelo = (DefaultTableModel) table_levantamento.getModel();
        double qtd = 0;
        double total_iliquido = 0, preco_unitario = 0;
        
        for (int i = 0; i < modelo.getRowCount(); i++) {
            preco_unitario = CfMethods.parseMoedaFormatada(modelo.getValueAt(i, 2).toString());
            qtd = Double.parseDouble(modelo.getValueAt(i, 3).toString());
            total_iliquido += (preco_unitario * qtd);
            
        }
        
        return total_iliquido;
    }
    
    private static double getDescontoFinanceiro() {
        double desconto_economico = 0d;
        //desconto_economico = Double.parseDouble( sp_valor_desconto_financeiro.getValue().toString() );
        return desconto_economico;
    }
    
    private static double getTotalAOALiquido() {
        double valores = (getTotalIliquido() + getTotalImposto());
        double descontos = (getDescontoComercial() + getDescontoFinanceiro());
        System.out.println("TotalIliquido: " + getTotalIliquido());
        System.out.println("TotalImposto: " + getTotalImposto());
        System.out.println("TotalDescontoComercial: " + getDescontoComercial());
        System.out.println("TotalDescontoFinanceiro: " + getDescontoFinanceiro());
        System.out.println("Total Liquido: " + (valores - descontos));
        return (valores - descontos);
    }
    
    private List<TbProduto> getProdutosIsentos() {
        DefaultTableModel modelo = (DefaultTableModel) table_levantamento.getModel();
        double taxa = 0.0;
        int codigo_produto = 0;
        List<TbProduto> lista_produtos_isentos = new ArrayList<>();
        for (int i = 0; i < modelo.getRowCount(); i++) {
            codigo_produto = Integer.parseInt(modelo.getValueAt(i, 0).toString());
            taxa = Double.parseDouble(modelo.getValueAt(i, 5).toString());
            if (taxa == 0.0) {
                lista_produtos_isentos.add(produtoDao.findTbProduto(codigo_produto));
            }
        }
        
        return lista_produtos_isentos;
        
    }
    
    private static void reset_valor_entregue() {
    }
    
    private static double getTotalVendaIVASemIncluirDesconto() {
        double taxa = 0, total_iva_local = 0, preco_unitario = 0, sub_total_iliquido = 0;
        double qtd = 0;
        
        DefaultTableModel modelo = (DefaultTableModel) table_levantamento.getModel();
        for (int i = 0; i < modelo.getRowCount(); i++) {
            preco_unitario = CfMethods.parseMoedaFormatada(modelo.getValueAt(i, 2).toString());
            qtd = Double.parseDouble(modelo.getValueAt(i, 3).toString());
            sub_total_iliquido = (preco_unitario * qtd);
            taxa = Double.parseDouble(modelo.getValueAt(i, 5).toString());
            total_iva_local += (((sub_total_iliquido) * (taxa / 100)));
        }
        
        return total_iva_local;
    }
    
    private double getGrossTotal() {
        System.out.println("TOTALILIQUIDO: " + getTotalVendaIVASemIncluirDesconto());
        System.out.println("TOTALVENDAIVASEMDESCONTO: " + getTotalVendaIVASemIncluirDesconto());
        return getTotalIliquido() + getTotalVendaIVASemIncluirDesconto();
    }
    
    private TbVenda getDocumentoRef() {
        String ref_doc = txtRefDoc.getText();
        return vendaDao.findByCodFact(ref_doc, DVML.DOC_FACTURA_PROFORMA_PP);
    }
    
    private int getIdAnoEconomico() {
        return anoEconomicoDao.getIdByDescricao(cmbAnoEconomico.getSelectedItem().toString());
    }
    
    private void mostrar_dados_cliente() {
        if (!Objects.isNull(venda)) {
            lbCliente.setText(venda.getCodigoCliente().getNome());
            lbEndereco.setText("Endereço:" + venda.getCodigoCliente().getMorada());
            lbNIF.setText("NIF: " + venda.getCodigoCliente().getNif());
            lbTelefone.setText("Telefone: " + venda.getCodigoCliente().getTelefone());
        }
    }
    
    private void mostrarQtdTotal() {
        DefaultTableModel modelo = (DefaultTableModel) table_levantamento.getModel();
        
        double qtd = 0;
        
        for (int i = 0; i < modelo.getRowCount(); i++) {
            qtd += Double.parseDouble(modelo.getValueAt(i, 2).toString());
        }
        
        txtTotalQTD.setText(String.valueOf(qtd));
    }
}
