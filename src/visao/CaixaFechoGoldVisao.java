/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visao;

import comercial.controller.CaixasController;
import comercial.controller.DadosInstituicaoController;
import comercial.controller.DocumentosController;
import comercial.controller.FormaPagamentoController;
import comercial.controller.FormaPagamentoItemController;
import comercial.controller.ItemCaixaController;
import comercial.controller.UsuariosController;
import comercial.controller.VendasController;
import dao.FormaPagamentoDao;
import entity.Caixa;
import entity.FormaPagamento;
import entity.ItemCaixa;
import entity.TbDadosInstituicao;
import entity.TbUsuario;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import lista.NLExporToPdfForSandEmailReport;
import lista.ReconciliacaoCaixaReport;
import util.BDConexao;
import util.DVML;
import util.JPAEntityMannagerFactoryUtil;

/**
 *
 * @author Domingos Dala Vunge
 */
public class CaixaFechoGoldVisao extends javax.swing.JFrame
{

    private static EntityManagerFactory emf = JPAEntityMannagerFactoryUtil.em;
    private static DadosInstituicaoController dadosInstituicaoController;
    private static CaixasController caixa_controller;
    private static ItemCaixaController item_caixa_controller;
    private static FormaPagamentoItemController formaPagamentoItemController;
    private static FormaPagamentoController formaPagamentoController;
    private static VendasController vendasController;
    private static UsuariosController usuariosController;
    private final FormaPagamentoDao formaPagamentoDao = new FormaPagamentoDao( emf );
    private int idUser;
    private static BDConexao conexao;
    private static BDConexao conexaoTransaction;
    private boolean touch;

    public CaixaFechoGoldVisao( int idUser, BDConexao conexao, boolean touch )
    {
        initComponents();
        setLocationRelativeTo( null );
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation( dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2 );
        this.conexao = conexao;
        this.idUser = idUser;
        this.touch = touch;
        dadosInstituicaoController = new DadosInstituicaoController( CaixaFechoGoldVisao.conexao );
        caixa_controller = new CaixasController( CaixaFechoGoldVisao.conexao );
        item_caixa_controller = new ItemCaixaController( CaixaFechoGoldVisao.conexao );
        formaPagamentoItemController = new FormaPagamentoItemController( CaixaFechoGoldVisao.conexao );
        formaPagamentoController = new FormaPagamentoController( CaixaFechoGoldVisao.conexao );
        usuariosController = new UsuariosController( CaixaFechoGoldVisao.conexao );
        vendasController = new VendasController( CaixaFechoGoldVisao.conexao );
        setNumeroCaixa();
        config();
        carregar_dados();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        lbFechoCaixa = new javax.swing.JLabel();
        lbFechoCaixa1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela_fecho_caixa = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lbFechoCaixa.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        lbFechoCaixa.setText("FECHO DO CAIXA");

        lbFechoCaixa1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        lbFechoCaixa1.setText("Reconciliação de Caixa");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbFechoCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbFechoCaixa1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbFechoCaixa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbFechoCaixa1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabela_fecho_caixa.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        tabela_fecho_caixa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Cod.", "Vendas"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tabela_fecho_caixa.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tabela_fecho_caixaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabela_fecho_caixa);
        if (tabela_fecho_caixa.getColumnModel().getColumnCount() > 0)
        {
            tabela_fecho_caixa.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens32x32/actualizar_32x32.png"))); // NOI18N
        jButton1.setText("Fechar");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/LOGOUT - VERMELHO/Logout 32x32.png"))); // NOI18N
        jButton2.setText("Sair");
        jButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        // TODO add your handling code here:

        procedimento_fechar_caixa();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
    {//GEN-HEADEREND:event_jButton2ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tabela_fecho_caixaMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tabela_fecho_caixaMouseClicked
    {//GEN-HEADEREND:event_tabela_fecho_caixaMouseClicked
        // TODO add your handling code here:
        if ( touch )
        {
            new TecladoNumeroPOSVisao( this, true, tabela_fecho_caixa, tabela_fecho_caixa.getSelectedRow(), tabela_fecho_caixa.getSelectedColumn(), DVML.NUMERO_TECLADO_FECHO_CAIXA ).setVisible( true );
        }
    }//GEN-LAST:event_tabela_fecho_caixaMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main( String args[] )
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for ( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels() )
            {
                if ( "Windows".equals( info.getName() ) )
                {
                    javax.swing.UIManager.setLookAndFeel( info.getClassName() );
                    break;
                }
            }
        }
        catch ( ClassNotFoundException ex )
        {
            java.util.logging.Logger.getLogger( CaixaFechoGoldVisao.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        catch ( InstantiationException ex )
        {
            java.util.logging.Logger.getLogger( CaixaFechoGoldVisao.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        catch ( IllegalAccessException ex )
        {
            java.util.logging.Logger.getLogger( CaixaFechoGoldVisao.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        catch ( javax.swing.UnsupportedLookAndFeelException ex )
        {
            java.util.logging.Logger.getLogger( CaixaFechoGoldVisao.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater( new Runnable()
        {
            public void run()
            {
                new CaixaFechoGoldVisao( 15, new BDConexao(), false ).setVisible( true );
            }
        } );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbFechoCaixa;
    private javax.swing.JLabel lbFechoCaixa1;
    public static javax.swing.JTable tabela_fecho_caixa;
    // End of variables declaration//GEN-END:variables

//    private void procedimento_fechar_caixa()
//    {
//
//        conexaoTransaction = new BDConexao();
//        DocumentosController.startTransaction( conexaoTransaction );
//
//        TbUsuario usuario = ( TbUsuario ) usuariosController.findById( this.idUser );
//        DefaultTableModel modelo = ( DefaultTableModel ) tabela_fecho_caixa.getModel();
//
//        int opcao = JOptionPane.showConfirmDialog( null, "Caro usuário deseja fechar realmente o caixa?" );
//        if ( JOptionPane.YES_OPTION == opcao )
//        {
//            boolean sucesso = true;
//            //Não existe fecho
//            if ( !caixa_controller.existe_fecho( idUser ) )
//            {
//                Caixa caixa_actual = caixa_controller.caixa_actual( idUser );
//                caixa_actual.setDataFecho( new Date() );
//                System.out.println( "DATA ABERTURA: " + caixa_actual.getDataAbertura() );
//                caixa_actual.setUsuarioFecho( usuario.getNome() );
//                caixa_actual.setCodUsuarioFecho( idUser );
//                caixa_actual.setNumeroVendas(
//                        formaPagamentoItemController.getNumeroVendasDiario( conexaoTransaction, idUser, caixa_actual.getDataAbertura(), caixa_actual.getDataFecho() ) );
//                double valor = formaPagamentoItemController.getValorRealDiario( conexaoTransaction, idUser, caixa_actual.getDataAbertura(), caixa_actual.getDataFecho() );
//                double troco = formaPagamentoItemController.getTrocoRealDiario( conexaoTransaction, idUser, caixa_actual.getDataAbertura(), caixa_actual.getDataFecho() );
//                BigDecimal totalDesconto = formaPagamentoItemController.getTotalDesconto( conexaoTransaction, idUser, caixa_actual.getDataAbertura(), caixa_actual.getDataFecho() );
//                BigDecimal totalIva = formaPagamentoItemController.getTotalIva( conexaoTransaction, idUser, caixa_actual.getDataAbertura(), caixa_actual.getDataFecho() );
//                BigDecimal totalIliquido = formaPagamentoItemController.getTotalIliquido( conexaoTransaction, idUser, caixa_actual.getDataAbertura(), caixa_actual.getDataFecho() );
//
//                caixa_actual.setTotalVendas( valor - troco );
//                caixa_actual.setTotalDesconto( totalDesconto );
//                caixa_actual.setTotalIva( totalIva );
//                caixa_actual.setTotaIIliquido( totalIliquido );
//
//                try
//                {
//                    caixa_controller.actualizar( caixa_actual );
//                    for ( int i = 0; i < tabela_fecho_caixa.getRowCount(); i++ )
//                    {
//                        Integer idFormaPagamento = Integer.valueOf( modelo.getValueAt( i, 0 ).toString() );
//                        if ( formaPagamentoItemController.existeVendaDiarioByFormaPagamento(
//                                usuario.getCodigo(), idFormaPagamento,
//                                caixa_actual.getDataAbertura(),
//                                caixa_actual.getDataFecho(), conexaoTransaction ) )
//                        {
////                                Double valor_declarado = Double.valueOf( modelo.getValueAt( i, 2 ).toString() );
//                            Double valor_declarado = Double.valueOf( "0" );
//                            Double valor_real = formaPagamentoItemController.getValorRealDiarioByFormaPagamento(
//                                    usuario.getCodigo(), idFormaPagamento,
//                                    caixa_actual.getDataAbertura(),
//                                    caixa_actual.getDataFecho(), conexaoTransaction );
////
////                            Double troco_real = formaPagamentoItemController.getTrocoRealDiarioByArea( 
////                                    areaVenda,
////                                    usuario.getCodigo(), idFormaPagamento,
////                                    caixa_actual.getDataAbertura(),
////                                    caixa_actual.getDataFecho(), conexao );
//
//                            ItemCaixa itemCaixa = new ItemCaixa();
//                            itemCaixa.setValorDeclarado( valor_declarado );
//                            itemCaixa.setValorReal( valor_real );
//                            itemCaixa.setFkFormaPagamento( formaPagamentoController.findByCodigo( idFormaPagamento ) );
//                            itemCaixa.setFkCaixa( caixa_actual );
//
//                            try
//                            {
//                                item_caixa_controller.salvar( itemCaixa );
//                            }
//                            catch ( Exception e )
//                            {
//                                sucesso = false;
//                                System.out.println( "Erro: " + e.getLocalizedMessage() );
//                                e.printStackTrace();
//                            }
//                        }
//                    }
//
//                }
//                catch ( Exception e )
//                {
//                    e.printStackTrace();
//                    sucesso = false;
//                }
//
//                if ( sucesso )
//                {
//                    modelo.setRowCount( 0 );
//                    JOptionPane.showMessageDialog( null, "Fecho realizado com sucesso" );
//                    DocumentosController.commitTransaction( conexaoTransaction );
//                    dispose();
//                    try
//                    {
//                        /**
//                         * ENVIAR EMAIL
//                         */
//                        ReconciliacaoCaixaReport rb = new ReconciliacaoCaixaReport( caixa_actual.getPkCaixa(), conexaoTransaction );
//                        NLExporToPdfForSandEmailReport exporToPdfForSandEmailReport = new NLExporToPdfForSandEmailReport( conexaoTransaction );
//                        conexaoTransaction.close();
//                        
////                        JOptionPane.showMessageDialog( null, "Fecho realizado com sucesso!...");
//                    }
//                    catch ( Exception e )
//                    {
//
//                        JOptionPane.showMessageDialog( null, "Falha ao processar os relatórios.\nFalha: " + e.getLocalizedMessage(),
//                                "Falha", JOptionPane.ERROR_MESSAGE );
//                        DocumentosController.rollBackTransaction( conexaoTransaction );
//                        conexaoTransaction.close();
//                    }
//
//                }
//            }
//        }
//    }
//    private void procedimento_fechar_caixa() {
//    conexaoTransaction = new BDConexao();
//    DocumentosController.startTransaction(conexaoTransaction);
//
//    TbUsuario usuario = (TbUsuario) usuariosController.findById(this.idUser);
//    DefaultTableModel modelo = (DefaultTableModel) tabela_fecho_caixa.getModel();
//
//    int opcao = JOptionPane.showConfirmDialog(null, "Caro usuário deseja fechar realmente o caixa?");
//    if (opcao == JOptionPane.YES_OPTION) {
//        boolean sucesso = true;
//
//        if (!caixa_controller.existe_fecho(idUser)) {
//            Caixa caixa_actual = caixa_controller.caixa_actual(idUser);
//            caixa_actual.setDataFecho(new Date());
//            caixa_actual.setUsuarioFecho(usuario.getNome());
//            caixa_actual.setCodUsuarioFecho(idUser);
//
//            Date dataAbertura = caixa_actual.getDataAbertura();
//            Date dataFecho = caixa_actual.getDataFecho();
//
//            // Totais do caixa
//            BigDecimal valor = formaPagamentoItemController.getValorRealDiario(conexaoTransaction, idUser, dataAbertura, dataFecho);
//            BigDecimal troco = formaPagamentoItemController.getTrocoRealDiario(conexaoTransaction, idUser, dataAbertura, dataFecho);
//            BigDecimal totalVendas = valor.subtract(troco);
//            BigDecimal totalDesconto = formaPagamentoItemController.getTotalDesconto(conexaoTransaction, idUser, dataAbertura, dataFecho);
//            BigDecimal totalIva = formaPagamentoItemController.getTotalIva(conexaoTransaction, idUser, dataAbertura, dataFecho);
//            BigDecimal totalIliquido = formaPagamentoItemController.getTotalIliquido(conexaoTransaction, idUser, dataAbertura, dataFecho);
//
//            caixa_actual.setNumeroVendas(formaPagamentoItemController.getNumeroVendasDiario(conexaoTransaction, idUser, dataAbertura, dataFecho));
//            caixa_actual.setTotalVendas(totalVendas.doubleValue());
//            caixa_actual.setTotalDesconto(totalDesconto);
//            caixa_actual.setTotalIva(totalIva);
//            caixa_actual.setTotaIIliquido(totalIliquido);
//
//            try {
//                System.out.println(">>> Atualizando CAIXA");
//                System.out.println("Total vendas: " + totalVendas);
//                System.out.println("Caixa ID: " + caixa_actual.getPkCaixa());
//
//                caixa_controller.actualizar(caixa_actual);
//
//                int totalLinhas = tabela_fecho_caixa.getRowCount();
//                System.out.println("Total de linhas na tabela: " + totalLinhas);
//
//                for (int i = 0; i < totalLinhas; i++) {
//                    try {
//                        int idFormaPagamento = Integer.parseInt(modelo.getValueAt(i, 0).toString());
//                        String declaradoStr = modelo.getValueAt(i, 2).toString();
//
//                        System.out.println("Linha " + i + " - FormaPagamento: " + idFormaPagamento + ", Valor declarado: " + declaradoStr);
//
//                        boolean existe = formaPagamentoItemController.existeVendaDiarioByFormaPagamento(
//                                usuario.getCodigo(), idFormaPagamento, dataAbertura, dataFecho, conexaoTransaction);
//                        System.out.println("→ Existe venda? " + existe);
//
//                        if (existe) {
//                            BigDecimal valor_declarado = new BigDecimal(declaradoStr);
//                            BigDecimal valor_real = formaPagamentoItemController.getValorRealDiarioByFormaPagamento(
//                                    usuario.getCodigo(), idFormaPagamento, dataAbertura, dataFecho, conexaoTransaction);
//
//                            ItemCaixa itemCaixa = new ItemCaixa();
//                            itemCaixa.setValorDeclarado(valor_declarado.doubleValue());
//                            itemCaixa.setValorReal(valor_real.doubleValue());
//                            itemCaixa.setFkFormaPagamento(formaPagamentoController.findByCodigo(idFormaPagamento));
//                            itemCaixa.setFkCaixa(caixa_actual);
//
//                            System.out.println(">>> Salvando ItemCaixa:");
//                            System.out.println(" - Valor declarado: " + itemCaixa.getValorDeclarado());
//                            System.out.println(" - Valor real: " + itemCaixa.getValorReal());
//                            System.out.println(" - Forma de pagamento ID: " + itemCaixa.getFkFormaPagamento().getPkFormaPagamento());
//                            System.out.println(" - Caixa ID: " + itemCaixa.getFkCaixa().getPkCaixa());
//
//                            boolean salvo = item_caixa_controller.salvar(itemCaixa);
//                            if (!salvo) {
//                                sucesso = false;
//                                System.out.println("❌ Falha ao salvar item_caixa no banco de dados.");
//                            }
//
//                        }
//                    } catch (Exception e) {
//                        sucesso = false;
//                        System.out.println("❌ Erro ao processar linha da tabela: " + e.getMessage());
//                        e.printStackTrace();
//                    }
//                }
//
//            } catch (Exception e) {
//                sucesso = false;
//                System.out.println("❌ Erro ao atualizar o caixa: " + e.getMessage());
//                e.printStackTrace();
//            }
//
//            if (sucesso) {
//                modelo.setRowCount(0);
//                JOptionPane.showMessageDialog(null, "Fecho realizado com sucesso");
//                DocumentosController.commitTransaction(conexaoTransaction);
//                dispose();
//
//                try {
//                    ReconciliacaoCaixaReport rb = new ReconciliacaoCaixaReport(caixa_actual.getPkCaixa(), conexaoTransaction);
//                    NLExporToPdfForSandEmailReport exporToPdf = new NLExporToPdfForSandEmailReport(conexaoTransaction);
//                    conexaoTransaction.close();
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Falha ao processar os relatórios.\nFalha: " + e.getLocalizedMessage(),
//                            "Falha", JOptionPane.ERROR_MESSAGE);
//                    DocumentosController.rollBackTransaction(conexaoTransaction);
//                    conexaoTransaction.close();
//                }
//
//            } else {
//                DocumentosController.rollBackTransaction(conexaoTransaction);
//                conexaoTransaction.close();
//            }
//        }
//    }
//}
    private void procedimento_fechar_caixa()
    {
        conexaoTransaction = new BDConexao();
        DocumentosController.startTransaction( conexaoTransaction );

        TbUsuario usuario = (TbUsuario) usuariosController.findById( this.idUser );
        DefaultTableModel modelo = (DefaultTableModel) tabela_fecho_caixa.getModel();

        int opcao = JOptionPane.showConfirmDialog( null, "Caro usuário deseja fechar realmente o caixa?" );
        if ( opcao == JOptionPane.YES_OPTION )
        {
            boolean sucesso = true;

            if ( !caixa_controller.existe_fecho( idUser ) )
            {
                Caixa caixa_actual = caixa_controller.caixa_actual( idUser );
                caixa_actual.setDataFecho( new Date() );
                caixa_actual.setUsuarioFecho( usuario.getNome() );
                caixa_actual.setCodUsuarioFecho( idUser );

                Date dataAbertura = caixa_actual.getDataAbertura();
                Date dataFecho = caixa_actual.getDataFecho();

                // Totais
                caixa_actual.setNumeroVendas(
                        formaPagamentoItemController.getNumeroVendasDiario( conexaoTransaction, idUser, dataAbertura, dataFecho )
                );

                BigDecimal valor = formaPagamentoItemController.getValorRealDiario( conexaoTransaction, idUser, dataAbertura, dataFecho );
                BigDecimal troco = formaPagamentoItemController.getTrocoRealDiario( conexaoTransaction, idUser, dataAbertura, dataFecho );
                BigDecimal totalVendas = valor.subtract( troco );

                caixa_actual.setTotalVendas( totalVendas.doubleValue() );
                caixa_actual.setTotalDesconto(
                        formaPagamentoItemController.getTotalDesconto( conexaoTransaction, idUser, dataAbertura, dataFecho )
                );
                caixa_actual.setTotalIva(
                        formaPagamentoItemController.getTotalIva( conexaoTransaction, idUser, dataAbertura, dataFecho )
                );
                caixa_actual.setTotaIIliquido(
                        formaPagamentoItemController.getTotalIliquido( conexaoTransaction, idUser, dataAbertura, dataFecho )
                );

                try
                {
                    // Atualizar o CAIXA
                    caixa_controller.actualizar( caixa_actual );
                    System.out.println( "✅ Caixa atualizado com sucesso. ID: " + caixa_actual.getPkCaixa() );

                    // Gravar itens do caixa
                    for ( int i = 0; i < modelo.getRowCount(); i++ )
                    {
                        try
                        {
                            int idFormaPagamento = Integer.parseInt( modelo.getValueAt( i, 0 ).toString() );

                            if ( formaPagamentoItemController.existeVendaDiarioByFormaPagamento(
                                    idUser, idFormaPagamento, dataAbertura, dataFecho, conexaoTransaction ) )
                            {
                                 System.out.println( "Inicio da operação salvar item_caixa: " );
                                BigDecimal valor_declarado = BigDecimal.ZERO; // você pode ajustar isso se tiver a coluna
//                            BigDecimal valor_declarado = new BigDecimal(modelo.getValueAt(i, 1).toString());

                                BigDecimal valor_real = formaPagamentoItemController.getValorRealDiarioByFormaPagamento(
                                        idUser, idFormaPagamento, dataAbertura, dataFecho, conexaoTransaction );

                                ItemCaixa itemCaixa = new ItemCaixa();
                                itemCaixa.setValorDeclarado( valor_declarado.doubleValue() );
                                itemCaixa.setValorReal( valor_real.doubleValue() );
                                itemCaixa.setFkFormaPagamento( formaPagamentoController.findByCodigo( idFormaPagamento ) );
                                itemCaixa.setFkCaixa( caixa_actual );

                                System.out.println( ">>> Salvando ItemCaixa:" );
                                System.out.println( " - Valor declarado: " + itemCaixa.getValorDeclarado() );
                                System.out.println( " - Valor real: " + itemCaixa.getValorReal() );
                                System.out.println( " - Forma de pagamento ID: " + idFormaPagamento );
                                System.out.println( " - Caixa ID: " + caixa_actual.getPkCaixa() );

                                item_caixa_controller.salvar( itemCaixa );
                            }

                        }
                        catch ( Exception ex )
                        {
                            sucesso = false;
                            System.out.println( "❌ Erro ao salvar item_caixa: " + ex.getMessage() );
                            ex.printStackTrace();
                        }
                    }

                }
                catch ( Exception e )
                {
                    sucesso = false;
                    System.out.println( "❌ Erro ao atualizar caixa: " + e.getMessage() );
                    e.printStackTrace();
                }

                // Finalizar transação
                if ( sucesso )
                {
                    DocumentosController.commitTransaction( conexaoTransaction );
                    JOptionPane.showMessageDialog( null, "Fecho realizado com sucesso" );
                    modelo.setRowCount( 0 );
                    dispose();
                    try
                    {
                        ReconciliacaoCaixaReport rb = new ReconciliacaoCaixaReport( caixa_actual.getPkCaixa(), conexaoTransaction );
                        NLExporToPdfForSandEmailReport exporToPdf = new NLExporToPdfForSandEmailReport( conexaoTransaction );
                        conexaoTransaction.close();
                    }
                    catch ( Exception e )
                    {
                        JOptionPane.showMessageDialog( null, "Falha ao gerar relatórios: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE );
                        DocumentosController.rollBackTransaction( conexaoTransaction );
                        conexaoTransaction.close();
                    }
                }
                else
                {
                    DocumentosController.rollBackTransaction( conexaoTransaction );
                    conexaoTransaction.close();
                    JOptionPane.showMessageDialog( null, "Erro ao realizar o fecho do caixa." );
                }
            }
        }
    }

    private void config()
    {
        tabela_fecho_caixa.setRowHeight( 50 );
        tabela_fecho_caixa.setShowGrid( true );
        tabela_fecho_caixa.getTableHeader().setReorderingAllowed( false );

    }
//    VIZUALIZAR FORMA PAGAMENTO

    private void carregar_dados()
    {
        Caixa caixa_actual = caixa_controller.caixa_actual();
//        List<TbBanco> bancos = vendaDao.getAllBancos( caixa_actual.getDataAbertura(), caixa_actual.getDataFecho() );
        List<FormaPagamento> bancos = formaPagamentoDao.findFormaPagamentoEntities();
        DefaultTableModel modelo = (DefaultTableModel) tabela_fecho_caixa.getModel();
        modelo.setRowCount( 0 );
        for ( FormaPagamento banco : bancos )
        {
            modelo.addRow( new Object[]
            {
                banco.getPkFormaPagamento(),
                banco.getDesignacao(),
                0d
            } );
        }
    }

    private void setNumeroCaixa()
    {
        Caixa caixa_actual = caixa_controller.caixa_actual( idUser );
        lbFechoCaixa.setText( "FECHO DE CAIXA Nº " + ( caixa_actual.getPkCaixa() ) );
    }

}
